/**
 * ActionHandler - Handles action buttons and workflow integration
 * 
 * Renders action buttons and integrates with WorkflowEngine
 * Supports different button types and workflow triggers
 */

import React from 'react';
import { workflowEngine } from '../../workflows/WorkflowEngine';

const ActionHandler = ({ actions, eventType, componentKey }) => {

  /**
   * Handle action button clicks - integrate with WorkflowEngine
   */
  const handleActionClick = async (action) => {
    try {
      console.log(`🎯 Action clicked: ${action.action} for ${eventType.eventType}`);
      
      // Show loading state if needed
      if (action.showLoader) {
        // Could set loading state here
      }

      let result;

      // Handle specific action types
      switch (action.action) {
        case 'generateFields':
          result = await workflowEngine.executeTrigger(eventType, 'onGenerateFields', {});
          break;
        
        case 'saveChanges':
          result = await workflowEngine.executeTrigger(eventType, 'onSave', {});
          break;
        
        case 'previewChanges':
          result = await workflowEngine.executeTrigger(eventType, 'onPreview', {});
          break;
        
        case 'resetToAutoGenerated':
          if (action.confirmMessage) {
            const confirmed = window.confirm(action.confirmMessage);
            if (!confirmed) return;
          }
          result = await workflowEngine.executeTrigger(eventType, 'onReset', {});
          break;
        
        case 'refresh':
          result = await workflowEngine.executeTrigger(eventType, 'onRefresh', {});
          break;
        
        case 'create':
          result = await workflowEngine.executeTrigger(eventType, 'onCreate', {});
          break;
        
        case 'update':
          result = await workflowEngine.executeTrigger(eventType, 'onUpdate', {});
          break;
        
        case 'delete':
          if (action.confirmMessage || 'Are you sure you want to delete this item?') {
            const confirmed = window.confirm(action.confirmMessage);
            if (!confirmed) return;
          }
          result = await workflowEngine.executeTrigger(eventType, 'onDelete', {});
          break;
        
        default:
          // Generic action handling
          result = await workflowEngine.executeAction(action, {}, eventType);
      }
      
      console.log(`✅ Action result:`, result);
      
      // Handle success notifications
      if (action.successMessage && result?.success !== false) {
        alert(`✅ ${action.successMessage}`);
      }
      
    } catch (error) {
      console.error(`❌ Action failed:`, error);
      
      // Handle error notifications
      const errorMessage = action.errorMessage || `Action failed: ${error.message}`;
      alert(`❌ ${errorMessage}`);
    }
  };

  /**
   * Get button CSS class based on action type
   */
  const getButtonClass = (action) => {
    const baseClass = 'btn';
    const typeClass = `btn-${action.type || 'secondary'}`;
    const sizeClass = action.size ? `btn-${action.size}` : '';
    const disabledClass = isActionDisabled(action) ? 'btn-disabled' : '';
    
    return [baseClass, typeClass, sizeClass, disabledClass].filter(Boolean).join(' ');
  };

  /**
   * Check if action should be disabled
   */
  const isActionDisabled = (action) => {
    if (action.disabled === true) return true;
    if (typeof action.disabled === 'string') {
      // Handle conditional disabling like "!eventTypeData.qry"
      // For now, just return false - would need context evaluation
      return false;
    }
    return false;
  };

  /**
   * Get button style based on action properties
   */
  const getButtonStyle = (action) => {
    const style = {};
    
    if (action.color) {
      style.backgroundColor = action.color;
    }
    
    if (action.style) {
      Object.assign(style, action.style);
    }
    
    return style;
  };

  /**
   * Render action icon if present
   */
  const renderActionIcon = (action) => {
    if (!action.icon) return null;
    
    return <span className="action-icon">{action.icon}</span>;
  };

  /**
   * Render single action button
   */
  const renderActionButton = (action, index) => {
    const isDisabled = isActionDisabled(action);
    
    return (
      <button
        key={`action-${index}`}
        className={getButtonClass(action)}
        style={getButtonStyle(action)}
        onClick={() => handleActionClick(action)}
        disabled={isDisabled}
        title={action.tooltip || action.label}
        data-action={action.action}
      >
        {renderActionIcon(action)}
        {action.label}
      </button>
    );
  };

  /**
   * Group actions by type for better layout
   */
  const groupActionsByType = (actions) => {
    const groups = {
      primary: [],
      secondary: [],
      danger: [],
      other: []
    };
    
    actions.forEach(action => {
      const type = action.type || 'secondary';
      if (groups[type]) {
        groups[type].push(action);
      } else {
        groups.other.push(action);
      }
    });
    
    return groups;
  };

  if (!actions || actions.length === 0) {
    return null;
  }

  const actionGroups = groupActionsByType(actions);
  
  return (
    <div className="action-handler">
      <div className="actions-container">
        {/* Primary actions first */}
        {actionGroups.primary.length > 0 && (
          <div className="action-group primary-actions">
            {actionGroups.primary.map((action, index) => 
              renderActionButton(action, `primary-${index}`)
            )}
          </div>
        )}
        
        {/* Secondary actions */}
        {actionGroups.secondary.length > 0 && (
          <div className="action-group secondary-actions">
            {actionGroups.secondary.map((action, index) => 
              renderActionButton(action, `secondary-${index}`)
            )}
          </div>
        )}
        
        {/* Danger actions (usually on the right) */}
        {actionGroups.danger.length > 0 && (
          <div className="action-group danger-actions">
            {actionGroups.danger.map((action, index) => 
              renderActionButton(action, `danger-${index}`)
            )}
          </div>
        )}
        
        {/* Other actions */}
        {actionGroups.other.length > 0 && (
          <div className="action-group other-actions">
            {actionGroups.other.map((action, index) => 
              renderActionButton(action, `other-${index}`)
            )}
          </div>
        )}
      </div>
      
      {/* Debug info for Studio */}
      {process.env.NODE_ENV === 'development' && (
        <div className="actions-debug">
          <small>
            Actions: {actions.map(a => `${a.label}(${a.action})`).join(', ')}
          </small>
        </div>
      )}
    </div>
  );
};

export default ActionHandler;