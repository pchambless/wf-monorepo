/**
 * Tests for ImpactProcessor
 */

import { ImpactProcessor } from "../ImpactProcessor.js";
import { CHANGE_TYPES, APP_NAMES } from "../types.js";

describe("ImpactProcessor", () => {
  let processor;

  beforeEach(() => {
    processor = new ImpactProcessor({
      monorepoRoot: "/test/monorepo",
    });
  });

  describe("shouldTrackImpact", () => {
    test("should track JavaScript files", () => {
      const event = {
        type: CHANGE_TYPES.MODIFY,
        filePath: "/test/monorepo/apps/wf-client/src/component.jsx",
        timestamp: new Date(),
      };

      expect(processor.shouldTrackImpact(event)).toBe(true);
    });

    test("should not track node_modules files", () => {
      const event = {
        type: CHANGE_TYPES.MODIFY,
        filePath: "/test/monorepo/node_modules/package/index.js",
        timestamp: new Date(),
      };

      expect(processor.shouldTrackImpact(event)).toBe(false);
    });

    test("should not track log files", () => {
      const event = {
        type: CHANGE_TYPES.CREATE,
        filePath: "/test/monorepo/debug.log",
        timestamp: new Date(),
      };

      expect(processor.shouldTrackImpact(event)).toBe(false);
    });
  });

  describe("determineAffectedApps", () => {
    test("should identify direct app changes", () => {
      const filePath = "/test/monorepo/apps/wf-client/src/component.jsx";
      const affected = processor.determineAffectedApps(filePath);

      expect(affected).toContain(APP_NAMES.CLIENT);
    });

    test("should identify shared-imports changes affecting all apps", () => {
      const filePath =
        "/test/monorepo/packages/shared-imports/src/utils/helper.js";
      const affected = processor.determineAffectedApps(filePath);

      expect(affected).toContain(APP_NAMES.CLIENT);
      expect(affected).toContain(APP_NAMES.ADMIN);
      expect(affected).toContain(APP_NAMES.PLAN_MANAGEMENT);
      expect(affected).toContain(APP_NAMES.SERVER);
    });

    test("should identify database changes affecting all apps", () => {
      const filePath = "/test/monorepo/sql/database/api_wf/tables/plans.sql";
      const affected = processor.determineAffectedApps(filePath);

      expect(affected.length).toBeGreaterThan(1);
      expect(affected).toContain(APP_NAMES.SERVER);
    });

    test("should identify eventType changes", () => {
      const filePath =
        "/test/monorepo/packages/shared-imports/src/events/plans/planDetail.js";
      const affected = processor.determineAffectedApps(filePath);

      expect(affected).toContain(APP_NAMES.CLIENT);
      expect(affected).toContain(APP_NAMES.PLAN_MANAGEMENT);
      expect(affected).toContain(APP_NAMES.SERVER);
    });
  });

  describe("generateDescription", () => {
    test("should generate description for shared utility change", () => {
      const event = {
        type: CHANGE_TYPES.MODIFY,
        filePath: "/test/monorepo/packages/shared-imports/src/utils/helper.js",
        timestamp: new Date(),
      };

      const description = processor.generateDescription(event);

      expect(description).toContain("MODIFY");
      expect(description).toContain("packages/shared-imports");
      expect(description).toContain("Shared utility change");
    });

    test("should generate description for eventType change", () => {
      const event = {
        type: CHANGE_TYPES.CREATE,
        filePath:
          "/test/monorepo/packages/shared-imports/src/events/plans/newEvent.js",
        timestamp: new Date(),
      };

      const description = processor.generateDescription(event);

      expect(description).toContain("CREATE");
      expect(description).toContain("EventType modification");
    });

    test("should generate description for database change", () => {
      const event = {
        type: CHANGE_TYPES.MODIFY,
        filePath: "/test/monorepo/sql/database/api_wf/tables/plans.sql",
        timestamp: new Date(),
      };

      const description = processor.generateDescription(event);

      expect(description).toContain("Database schema change");
    });
  });

  describe("processFileChange", () => {
    test("should process valid file change and return impact record", async () => {
      const event = {
        type: CHANGE_TYPES.MODIFY,
        filePath: "/test/monorepo/apps/wf-client/src/component.jsx",
        timestamp: new Date(),
      };

      const impacts = await processor.processFileChange(event);

      expect(impacts).toHaveLength(1);
      expect(impacts[0]).toMatchObject({
        filePath: "apps/wf-client/src/component.jsx",
        changeType: CHANGE_TYPES.MODIFY,
        affectedApps: [APP_NAMES.CLIENT],
        autoGenerated: true,
      });
      expect(impacts[0].description).toBeTruthy();
      expect(impacts[0].timestamp).toBeInstanceOf(Date);
    });

    test("should return empty array for excluded files", async () => {
      const event = {
        type: CHANGE_TYPES.MODIFY,
        filePath: "/test/monorepo/node_modules/package/index.js",
        timestamp: new Date(),
      };

      const impacts = await processor.processFileChange(event);

      expect(impacts).toHaveLength(0);
    });
  });

  describe("getRelativePath", () => {
    test("should convert absolute path to relative", () => {
      const absolutePath = "/test/monorepo/apps/wf-client/src/component.jsx";
      const relativePath = processor.getRelativePath(absolutePath);

      expect(relativePath).toBe("apps/wf-client/src/component.jsx");
    });
  });

  describe("matchesPattern", () => {
    test("should match simple glob patterns", () => {
      expect(
        processor.matchesPattern(
          "node_modules/package/index.js",
          "node_modules/**"
        )
      ).toBe(true);
      expect(processor.matchesPattern("src/component.jsx", "*.jsx")).toBe(
        false
      );
      expect(processor.matchesPattern("component.jsx", "*.jsx")).toBe(true);
    });
  });
});
