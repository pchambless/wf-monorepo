/**
 * Requirements Document Template
 * Generates formatted requirements specification documents
 */

/**
 * Generate requirements document content
 * @param {Object} params - Template parameters
 * @returns {string} Formatted requirements document
 */
export function requirementsTemplate(params) {
  const { planId, docID, content, agent = "Kiro", ...options } = params;
  const currentDate = new Date().toISOString().split("T")[0];

  return `# Requirements Specification
**DocID**: ${
    docID || planId
  } | **Created**: ${currentDate} | **Agent**: ${agent}

## Overview
${content}

## Functional Requirements
${
  options.functionalRequirements || "[Functional requirements to be documented]"
}

## Non-Functional Requirements
${
  options.nonFunctionalRequirements ||
  "[Non-functional requirements to be documented]"
}

## User Stories
${options.userStories || "[User stories to be defined]"}

## Acceptance Criteria
${options.acceptanceCriteria || "[Acceptance criteria to be specified]"}

## Constraints
${options.constraints || "[System constraints to be identified]"}

## Dependencies
${options.dependencies || "[External dependencies to be documented]"}

---
*This requirements specification was generated by ${agent} for Plan ${planId} implementation.*`;
}

export default requirementsTemplate;
