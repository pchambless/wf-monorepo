import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Get app name from command line args (default to client)
const appName = process.argv[2] || 'client';

// Dynamic import of the correct registry based on app
const { pageMapRegistry } = await import(`../../registries/${appName}/pageMapRegistry.js`);

/**
 * Page Index Generator for WhatsFresh
 * 
 * This tool generates React component index.js files that import
 * their corresponding pageMap.js from the local config.
 * 
 * Usage:
 * node genPageIndex.js [app] [entityName]     # Generate for a single entity
 * node genPageIndex.js [app] --all           # Generate for all entities
 * node genPageIndex.js [app] --force         # Force overwrite of existing files
 */

// Process command line args
const entityArg = process.argv[3]; // Third argument is the entity name
const force = process.argv.includes('--force');
const generateAll = entityArg === '--all';

if (!entityArg) {
  console.error(`Please provide an entity name or --all flag for app: ${appName}`);
  console.error(`Available entities: ${Object.keys(pageMapRegistry).filter(name =>
    pageMapRegistry[name].pageIndexPath || pageMapRegistry[name].pageMapPath).join(', ')}`);
  process.exit(1);
}

// Function to generate a single index.js file
function generateIndexFile(entityName) {
  const entity = pageMapRegistry[entityName];

  // Skip entities that don't have proper path information
  if (!entity) {
    console.log(`Skipping ${entityName} - entity not found in registry`);
    return false;
  }

  // Use direct eventType â†’ folder mapping (simplified architecture)
  // entityName (e.g., "ingrTypeList") becomes the folder name directly
  const dirPath = entityName;

  // Format nice display name for the component
  const componentName = `${entityName}Page`;

  // For logging, use the readable title from registry when available
  const loggerName = entity.title || entityName;

  // Get parent entity info if applicable
  const parentEntity = entity.parentEntity ? pageMapRegistry[entity.parentEntity] : null;

  // Create the target directory
  const targetDir = path.resolve(__dirname, '../../../../../apps/wf-client/src/pages', dirPath);
  if (!fs.existsSync(targetDir)) {
    fs.mkdirSync(targetDir, { recursive: true });
    console.log(`Created directory: ${targetDir}`);
  }

  // Create the index.js content - clean architecture with no external stores
  const indexContent = `import React from 'react';
import { CrudLayout } from '@whatsfresh/shared-imports';
import pageMap from './pageMap';


/**
 * ${loggerName} Page
 * Generated by DevTools - Simple wrapper around CrudLayout
 * All data fetching, state management, and UI handled internally by CrudLayout
 */
const ${componentName} = () => {
  return <CrudLayout pageMap={pageMap} />;
};

export default ${componentName};
`;

  // Write the file
  const targetFile = path.join(targetDir, 'index.jsx');
  const fileExists = fs.existsSync(targetFile);

  if (!fileExists || force) {
    fs.writeFileSync(targetFile, indexContent);
    console.log(`${fileExists ? 'Updated' : 'Created'}: ${targetFile}`);
    return true;
  } else {
    console.log(`Skipped: ${targetFile} (use --force to overwrite)`);
    return false;
  }
}

// Generate for a single entity or all entities
if (generateAll) {
  console.log('Generating index.jsx files for all entities...');
  let count = 0;

  // Get valid entities based on updated registry structure
  const validEntities = Object.keys(pageMapRegistry).filter(name => {
    const entity = pageMapRegistry[name];

    // Check three conditions:
    // 1. Has a pageIndexPath (new format)
    // 2. Has a pageMapPath (old format) 
    // 3. Has a corresponding pageMap file in src/pageMap
    return (
      (entity.pageIndexPath && entity.layout === 'CrudLayout') ||
      (entity.pageMapPath?.includes('pageMap.js')) ||
      fs.existsSync(path.resolve(__dirname,
        '../../packages/shared-config/src/pageMap', `${name}.js`))
    );
  });

  for (const entityName of validEntities) {
    if (generateIndexFile(entityName)) {
      count++;
    }
  }

  console.log(`Generation complete! Created/updated ${count} index.jsx files.`);
} else {
  console.log(`Generating index.jsx for entity: ${entityArg}`);
  if (!pageMapRegistry[entityArg]) {
    console.error(`Error: Entity "${entityArg}" not found in registry`);
    process.exit(1);
  }

  generateIndexFile(entityArg);
  console.log('Done!');
}