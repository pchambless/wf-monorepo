/**
 * Route Generation Utility
 * Generates app-specific routes based on event types and entity registries
 */

import { getClientSafeEventTypes, getAdminSafeEventTypes } from '@whatsfresh/shared-events';
import { clientEntityRegistry } from '../registries/clientEntityRegistry.js';
import { pageMapRegistry as adminEntityRegistry } from '../registries/admin/pageMapRegistry.js';

/**
 * Generate routes configuration for a specific app
 * @param {string} appType - 'client' or 'admin'
 * @returns {Object} Routes configuration
 */
export function generateRoutes(appType = 'client') {
    const isAdmin = appType === 'admin';
    const events = isAdmin ? getAdminSafeEventTypes() : getClientSafeEventTypes();
    const registry = isAdmin ? adminEntityRegistry : clientEntityRegistry;

    const routes = {};
    const sections = {};

    // Process events and match with registry
    events.forEach(event => {
        const config = registry[event.eventType];
        if (!config) return;

        // Create route entry
        routes[config.routeKey] = {
            path: `/${event.eventType}`,
            component: config.pageIndexPath,
            layout: config.layout,
            title: config.title,
            icon: config.icon,
            section: config.section,
            eventType: event.eventType,
            params: event.params,
            category: event.category
        };

        // Group into sections
        if (!sections[config.section]) {
            sections[config.section] = {
                name: config.section,
                order: config.sectionOrder || 999,
                items: []
            };
        }

        sections[config.section].items.push({
            routeKey: config.routeKey,
            title: config.title,
            icon: config.icon,
            order: config.itemOrder || 999,
            color: config.color
        });
    });

    // Sort sections and items
    Object.values(sections).forEach(section => {
        section.items.sort((a, b) => (a.order || 999) - (b.order || 999));
    });

    return {
        routes,
        sections,
        appType
    };
}

/**
 * Generate routes file content for an app
 * @param {string} appType - 'client' or 'admin'
 * @returns {string} Generated file content
 */
export function generateRoutesFile(appType = 'client') {
    const { routes, sections } = generateRoutes(appType);
    const isAdmin = appType === 'admin';
    const registry = isAdmin ? adminEntityRegistry : clientEntityRegistry;

    return `/**
 * Generated Routes Configuration for ${appType}
 * Auto-generated by devtools - DO NOT EDIT MANUALLY
 */

export const ROUTES = ${JSON.stringify(routes, null, 2)};

export const SECTIONS = ${JSON.stringify(sections, null, 2)};

export const entityRegistry = ${JSON.stringify(registry, null, 2)};

export function getNavSections() {
  return Object.values(SECTIONS).sort((a, b) => (a.order || 999) - (b.order || 999));
}

export function getRoute(routeKey) {
  return ROUTES[routeKey];
}

export function resolveRoute(eventType) {
  return Object.values(ROUTES).find(route => route.eventType === eventType);
}

export function getRouteKeyByEvent(eventType) {
  const entry = Object.entries(ROUTES).find(([_, route]) => route.eventType === eventType);
  return entry ? entry[0] : null;
}

// Generated on: ${new Date().toISOString()}
`;
}
