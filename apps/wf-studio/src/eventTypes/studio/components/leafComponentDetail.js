/**
 * LeafComponentDetail EventType
 * Detail view for qry-based eventTypes (forms, grids, data components)
 * Focuses on field generation, data binding, and schema management
 */
export const leafComponentDetail = {
  eventType: "leafComponentDetail",
  category: "component",
  title: "Leaf Component Detail",
  purpose: "Detail editing for qry-based eventTypes with field generation",
  pattern: "qry-based",
  
  // Tabbed interface for qry-based components
  components: [
    {
      id: "leafDetailTabs",
      type: "tabs",
      container: "tabs",
      props: {
        defaultTab: "properties",
        style: {
          backgroundColor: "#ffffff",
          height: "100%"
        }
      },
      tabs: [
        {
          id: "properties",
          label: "Properties",
          icon: "cog",
          component: "PropertiesTab"
        },
        {
          id: "fields", 
          label: "Fields",
          icon: "table",
          component: "FieldsTab"
        },
        {
          id: "preview",
          label: "Preview",
          icon: "eye", 
          component: "PreviewTab",
          conditional: "hasPreviewData" // Only show after Generate Fields
        }
      ]
    }
  ],

  // Properties Tab Configuration - Card-based layout
  propertiesTab: {
    layout: "cards",
    cards: [
      {
        id: "basicPropertiesCard",
        title: "Basic Properties",
        icon: "ðŸ”µ",
        color: "blue",
        fields: [
          {
            name: "category",
            label: "Category",
            type: "select",
            required: true,
            grp: 1,
            options: "getCategoryOptions",
            hint: "Component type classification"
          },
          {
            name: "title",
            label: "Title", 
            type: "text",
            required: true,
            grp: 1,
            placeholder: "User-friendly display name",
            hint: "Human-readable component name"
          },
          {
            name: "cluster",
            label: "Cluster",
            type: "text", 
            grp: 2,
            placeholder: "PLANS, USERS, etc.",
            hint: "Data grouping classification"
          }
        ]
      },
      {
        id: "dataBindingCard",
        title: "Data Binding",
        icon: "ðŸ”—", 
        color: "green",
        fullWidth: true, // Span entire tab width
        sections: [
          {
            id: "queryConfig",
            title: "Query Configuration",
            fields: [
              {
                name: "qry",
                label: "Query Reference",
                type: "text",
                required: true,
                grp: 1,
                placeholder: "planDtl, userProfile, etc.",
                hint: "Server eventType to query for data schema"
              },
              {
                name: "purpose", 
                label: "Purpose",
                type: "textarea",
                grp: 2,
                placeholder: "Describe what this component does...",
                hint: "Documentation for other developers"
              }
            ]
          },
          {
            id: "autoGeneratedZone",
            title: "ðŸ¤– AUTO-GENERATED ZONE",
            subtitle: "Safe to regenerate - Generated from schema",
            component: "FieldsList",
            conditional: "hasExistingFields",
            props: {
              showFieldDetails: true,
              allowReordering: false,
              readonly: true,
              format: "compact"
            }
          },
          {
            id: "manualCustomizationZone", 
            title: "âœ‹ MANUAL CUSTOMIZATION ZONE",
            subtitle: "Preserve existing - User customizations",
            component: "FieldOverridesList",
            conditional: "hasFieldOverrides", 
            props: {
              showOverrideDetails: true,
              allowEditing: true,
              allowHidden: true
            }
          }
        ],
        actions: [
          {
            label: "ðŸ”„ Generate Fields",
            action: "generateFields", 
            disabled: "!eventTypeData.qry",
            type: "primary",
            tooltip: "Generate fields from SQL schema"
          },
          {
            label: "Save Changes",
            action: "saveChanges",
            type: "secondary" 
          }
        ]
      }
    ]
  },

  // Preview Tab Configuration (conditional)
  previewTab: {
    layout: "split", // Side-by-side comparison
    sections: [
      {
        id: "currentVersion",
        title: "Current",
        position: "left",
        component: "EventTypePreview",
        props: {
          source: "currentEventType",
          highlightChanges: false
        }
      },
      {
        id: "generatedVersion", 
        title: "Generated",
        position: "right",
        component: "EventTypePreview", 
        props: {
          source: "previewEventType",
          highlightChanges: true,
          showDiffs: true
        }
      },
      {
        id: "previewActions",
        title: "Actions",
        position: "bottom",
        component: "PreviewActions",
        props: {
          actions: [
            {
              label: "Apply Changes",
              type: "primary",
              action: "applyPreviewChanges"
            },
            {
              label: "Cancel",
              type: "secondary", 
              action: "cancelPreview"
            }
          ]
        }
      }
    ]
  },

  // Workflow triggers specific to leaf components
  workflowTriggers: {
    onQryChange: [
      "validateQryExists",
      "showGenerateFieldsPrompt"
    ],
    onGenerateFields: [
      "callUnifiedGenFieldsWorkflow",
      "populatePreviewTab",
      "switchToPreviewTab"
    ],
    onApplyChanges: [
      "updateEventTypeWithPreview", 
      "saveEventTypeFile",
      "refreshCurrentFields",
      "hidePreviewTab"
    ]
  },

  // Schema metadata for this eventType
  schemaMetadata: {
    generatedFrom: "leafComponentDetail",
    applicablePatterns: ["qry-based"],
    excludedPatterns: ["component-based"]
  },

  fields: [], // This eventType doesn't have fields - it manages other eventTypes' fields
  hasComponents: true,
  hasWorkflows: true
};