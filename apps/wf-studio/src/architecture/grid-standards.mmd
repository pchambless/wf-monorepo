# Grid Standards Documentation

**Auto-generated from `grid-standards.js` v1.0.0**  
*Generated: 2025-09-04T14:40:31.327Z*

## System Overview

```mermaid
graph TD
    A[Grid Standards] --> B[Container Types]
    A --> C[Position Schema] 
    A --> D[Layout Patterns]
    A --> E[CSS Generation]
    
    B --> B1[page - Top-level grid]
    B --> B2[tab - Tab content grid]
    B --> B3[card - Card internal layout]
    B --> B4[modal - Modal dialog grid]
    B --> B5[inline - Flow within parent]
    
    C --> C1["col: {start, span}"]
    C --> C2["row: {start, span}"]
    
    E --> E1[CSS Custom Properties]
    E --> E2[Grid Container Classes]
```

## Configuration

| Property | Value | Description |
|----------|-------|-------------|
| **Grid Columns** | 10 | Total columns in grid system |
| **Default Gap** | 8px | Space between grid items |
| **Min Span** | 1 | Minimum column/row span |
| **Max Span** | 10 | Maximum column/row span |

## Container Types

```mermaid
flowchart LR
    subgraph "Container Hierarchy"
        PAGE[page] --> TAB[tab]
        TAB --> CARD[card]
        PAGE --> MODAL[modal]
        CARD --> INLINE[inline]
    end
```

- **page**: Top-level page grid (columnSidebar, tabsWorkArea, etc)
- **tab**: Tab content grid (cards within tabs)
- **card**: Card internal layout
- **modal**: Modal dialog grid
- **inline**: Flow within parent container

## Position Schema

All components use this position structure:

```javascript
position: {
  col: { start: 1-10, span: 1-10 },  // Column positioning
  row: { start: 1+,   span: 1+ }     // Row positioning  
}
```

### Validation Rules

- **col.start**: Integer between 1 and 10
- **col.span**: Integer between 1 and 10
- **col.start + col.span - 1**: Must not exceed 10
- **row.start**: Positive integer (1+)
- **row.span**: Positive integer (1+)

## Layout Patterns

Common layout patterns for quick use:

```mermaid
grid:
    columns 10
    
    subgraph "Full Width"
        A1[FULL_WIDTH]
        A1 --> A2["col: 1-10 (100%)"]
    end
    
    subgraph "Two Column"
        B1[LEFT_HALF]
        B1 --> B2["col: 1-5 (50%)"]
        B3[RIGHT_HALF] 
        B3 --> B4["col: 6-10 (50%)"]
    end
    
    subgraph "Three Column (Studio)"
        C1[LEFT_THIRD]
        C1 --> C2["col: 1-3 (30%)"]
        C3[MIDDLE_THIRD]
        C3 --> C4["col: 4-7 (40%)"]
        C5[RIGHT_THIRD]
        C5 --> C6["col: 8-10 (30%)"]
    end
```

### Pattern Details

- **FULL_WIDTH**: cols 1-10 (100%)
- **LEFT_HALF**: cols 1-5 (50%)
- **RIGHT_HALF**: cols 6-10 (50%)
- **LEFT_THIRD**: cols 1-3 (30%)
- **MIDDLE_THIRD**: cols 4-7 (40%)
- **RIGHT_THIRD**: cols 8-10 (30%)
- **CARD_TOP_LEFT**: cols 1-3 (30%)
- **CARD_TOP_RIGHT**: cols 7-10 (40%)
- **CARD_BOTTOM_LEFT**: cols 1-3 (30%)

## CSS Classes

Generated CSS classes for containers:

| Container Type | CSS Classes |
|----------------|-------------|
| **page** | `grid-container page-grid` |
| **tab** | `grid-container tab-grid` |
| **card** | `grid-container card-grid` |
| **modal** | `grid-container modal-grid` |
| **inline** | `inline-flow` |

## Usage Examples

### Basic Component Definition

```javascript
import { validatePosition, validateContainer, CONTAINER_TYPES, LAYOUT_PATTERNS } from './grid-standards.js';

export const myComponent = {
  container: validateContainer(CONTAINER_TYPES.TAB),
  position: validatePosition(LAYOUT_PATTERNS.CARD_TOP_LEFT),
  props: {
    title: "My Component"
  }
};
```

### CSS Application

```javascript
import { generateCSSProps } from './grid-standards.js';

const cssProps = generateCSSProps(component.position);
// Result: { '--col-start': 1, '--col-span': 3, '--row-start': 1, '--row-span': 1 }

<div style={cssProps} className="grid-item">
  {/* Component content */}
</div>
```

## Studio Layout Example

```mermaid
grid:
    columns 10
    
    sidebar["Sidebar\ncols 1-3"] --> componentPanel["Components\ncols 4-5"]
    componentPanel --> workArea["Work Area\ncols 6-10"]
    
    subgraph workArea ["Work Area (Tabs)"]
        direction TB
        tab1["Tab Content Grid"]
        cardBasics["Basic Properties\ncols 1-3"]
        cardData["Data Binding\ncols 4-6"] 
        cardPreview["Preview\ncols 7-10"]
        
        tab1 --> cardBasics
        tab1 --> cardData
        tab1 --> cardPreview
    end
```

---

*This documentation is auto-generated from executable standards.*  
*To update: modify `grid-standards.js` and run `npm run generate-grid-docs`*
