{"body":{"eventSQLId":"eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:20"}
{"level":"info","message":"Log file rotated","newFilename":"/home/paul/wf-monorepo-new/apps/server/server/logs/application-2025-10-25.log","oldFilename":"/home/paul/wf-monorepo-new/apps/server/server/logs/application-2025-10-24.log","timestamp":"2025-10-25 05:55:20"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:20"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: eventTypeList","timestamp":"2025-10-25 05:55:20"}
{"body":{"eventSQLId":"triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:20"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:20"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: triggerList","timestamp":"2025-10-25 05:55:20"}
{"body":{"eventSQLId":"qrySqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:20"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:20"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: qrySqlList","timestamp":"2025-10-25 05:55:20"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":725.365863,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: triggerList (ID: 16)","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":731.499378,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: eventTypeList (ID: 9)","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":714.711051,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: qrySqlList (ID: 17)","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":89.312976,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: triggerList (ID: 16)","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (816ms)","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":816.478162,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":90.280486,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: eventTypeList (ID: 9)","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (853ms)","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":852.581056,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 30","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":94.533475,"method":"GET","operation":"database_query","rowCount":30,"success":true},"timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: qrySqlList (ID: 17)","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (813ms)","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":812.774559,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-25 05:55:21"}
{"body":{"eventSQLId":"appList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:21"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: appList","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:21"}
{"body":{"eventSQLId":"appList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:21"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: appList","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":352.161729,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: appList (ID: 1)","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT xref_id, comp_name\r\nFROM api_wf.vw_hier_components vhc \r\nWHERE parent_id = 70\r\nAND   comp_type = 'App'\r\nAND   xref_id <> parent_id  -- exclude root.","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":360.489074,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: appList (ID: 1)","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT xref_id, comp_name\r\nFROM api_wf.vw_hier_components vhc \r\nWHERE parent_id = 70\r\nAND   comp_type = 'App'\r\nAND   xref_id <> parent_id  -- exclude root.","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":80.107066,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: appList (ID: 1)","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (443ms)","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":93.340145,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-25 05:55:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: appList (ID: 1)","timestamp":"2025-10-25 05:55:21"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (447ms)","timestamp":"2025-10-25 05:55:21"}
{"body":{"values":{"0":{"paramName":"appID","paramVal":"51"},"1":{"paramName":"appName","paramVal":"admin"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-25 05:55:27"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-25 05:55:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":226.935872,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":99.43843,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 05:55:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":311.603799,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 05:55:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":143.134638,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[setVals.js] Set 2 values for pc7900@gmail.com","timestamp":"2025-10-25 05:55:28"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (783ms)","timestamp":"2025-10-25 05:55:28"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":782.816573,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-25 05:55:28"}
{"body":{"eventSQLId":"pageList","params":{"appID":"51"}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:28"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: pageList","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":73.862359,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: pageList (ID: 2)","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[execEventType.js] Using passed param :appID → 51...","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT xref_id, comp_name\r\nFROM api_wf.vw_hier_components vhc \r\nWHERE parent_id = 51\r\nAND   comp_type in ('Page','CRUD')","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":70.949814,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:28"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: pageList (ID: 2)","timestamp":"2025-10-25 05:55:28"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (146ms)","timestamp":"2025-10-25 05:55:28"}
{"body":{"values":{"0":{"paramName":"pageID","paramVal":"64"},"1":{"paramName":"pageName","paramVal":"{pageName}"},"2":{"paramName":"xrefID","paramVal":"64"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-25 05:55:39"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-25 05:55:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":52.603112,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":85.859514,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:40"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 05:55:40"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 05:55:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":370.550537,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 05:55:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:40"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 05:55:40"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 05:55:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":350.568551,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 05:55:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:40"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 05:55:40"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 05:55:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":366.013014,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[setVals.js] Set 3 values for pc7900@gmail.com","timestamp":"2025-10-25 05:55:41"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (1231ms)","timestamp":"2025-10-25 05:55:41"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1230.5647119999999,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-25 05:55:41"}
{"body":{"eventSQLId":"xrefHierarchy","params":{"xrefID":"64"}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:41"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefHierarchy","timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":273.013812,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefHierarchy (ID: 3)","timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 64...","timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[execEventType.js] Executing SQL: CALL api_wf.sp_hier_structure(64)","timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-25 05:55:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":226.104211,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:41"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefHierarchy (ID: 3)","timestamp":"2025-10-25 05:55:41"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (503ms)","timestamp":"2025-10-25 05:55:41"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":502.962911,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-25 05:55:41"}
{"body":{"eventSQLId":"xrefPropList","params":{"xrefID":51}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:41"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefPropList","timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":310.433062,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 51...","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 51 \r\nAND active = 1","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":105.727402,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (418ms)","timestamp":"2025-10-25 05:55:42"}
{"body":{"eventSQLId":"xrefTriggerList","params":{"xrefID":51}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:42"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefTriggerList","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":296.549833,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 51...","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 51\r\nORDER BY class, ordr","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":124.823303,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (424ms)","timestamp":"2025-10-25 05:55:42"}
{"body":{"eventSQLId":"xrefPropList","params":{"xrefID":64}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:42"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefPropList","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":110.343426,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 64...","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 64 \r\nAND active = 1","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":75.362044,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (188ms)","timestamp":"2025-10-25 05:55:42"}
{"body":{"eventSQLId":"xrefTriggerList","params":{"xrefID":64}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:42"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefTriggerList","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":98.77989,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 64...","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 64\r\nORDER BY class, ordr","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:42"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:42"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":118.342998,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (219ms)","timestamp":"2025-10-25 05:55:43"}
{"body":{"eventSQLId":"xrefPropList","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:43"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefPropList","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":207.284761,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 65 \r\nAND active = 1","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":84.265812,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (295ms)","timestamp":"2025-10-25 05:55:43"}
{"body":{"eventSQLId":"xrefTriggerList","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:43"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefTriggerList","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":118.54829,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 65\r\nORDER BY class, ordr","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":92.801648,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (213ms)","timestamp":"2025-10-25 05:55:43"}
{"body":{"eventSQLId":"xrefPropList","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:43"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefPropList","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":41.154975,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 77 \r\nAND active = 1","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":319.041424,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (363ms)","timestamp":"2025-10-25 05:55:43"}
{"body":{"eventSQLId":"xrefTriggerList","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:43"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefTriggerList","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":51.890356,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 77\r\nORDER BY class, ordr","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":243.396477,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (298ms)","timestamp":"2025-10-25 05:55:44"}
{"body":{"eventSQLId":"xrefPropList","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:44"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefPropList","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":38.436362,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 66 \r\nAND active = 1","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":144.858359,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (185ms)","timestamp":"2025-10-25 05:55:44"}
{"body":{"eventSQLId":"xrefTriggerList","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:44"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefTriggerList","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":52.800522,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 66\r\nORDER BY class, ordr","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":78.244324,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (133ms)","timestamp":"2025-10-25 05:55:44"}
{"body":{"eventSQLId":"xrefPropList","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:44"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefPropList","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":40.872571,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 67 \r\nAND active = 1","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 4","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":387.103581,"method":"GET","operation":"database_query","rowCount":4,"success":true},"timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (430ms)","timestamp":"2025-10-25 05:55:45"}
{"body":{"eventSQLId":"xrefTriggerList","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:45"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefTriggerList","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.147262,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 67\r\nORDER BY class, ordr","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":288.05609,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (324ms)","timestamp":"2025-10-25 05:55:45"}
{"body":{"eventSQLId":"xrefPropList","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:45"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefPropList","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":36.508762,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 68 \r\nAND active = 1","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":89.188686,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (127ms)","timestamp":"2025-10-25 05:55:45"}
{"body":{"eventSQLId":"xrefTriggerList","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:45"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefTriggerList","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":38.365831,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 68\r\nORDER BY class, ordr","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":301.05759,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (341ms)","timestamp":"2025-10-25 05:55:45"}
{"body":{"eventSQLId":"xrefPropList","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:45"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefPropList","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.626291,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 69 \r\nAND active = 1","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:45"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:45"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 05:55:46"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":261.024525,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 05:55:46"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:46"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefPropList (ID: 7)","timestamp":"2025-10-25 05:55:46"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (305ms)","timestamp":"2025-10-25 05:55:46"}
{"body":{"eventSQLId":"xrefTriggerList","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 05:55:46"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 05:55:46"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: xrefTriggerList","timestamp":"2025-10-25 05:55:46"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:46"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:46"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 05:55:46"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.101484,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 05:55:46"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:46"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:46"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-25 05:55:46"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 69\r\nORDER BY class, ordr","timestamp":"2025-10-25 05:55:46"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 05:55:46"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 05:55:46"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-25 05:55:46"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":83.754149,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-25 05:55:46"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 05:55:46"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: xrefTriggerList (ID: 6)","timestamp":"2025-10-25 05:55:46"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (118ms)","timestamp":"2025-10-25 05:55:46"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-25 05:57:05"}
{"body":"{\"method\": \"INSERT\", \"table\": \"api_wf.plan_communications\", \"data\": {\"plan_id\": 45, \"from_agent\": \"claude\", \"to_agent\": \"kiro\", \"type\": \"guidance\", \"subject\": \"pageName Column Migration - Architecture Enhancement\", \"message\": \"# pageName Column Migration Plan\\n\\n## Overview\\nAdd `pageName` column to `eventComp_xref` to simplify component naming, querying, and template cloning.\\n\\n## Database Schema\\n\\n### Column Definition\\n```sql\\nALTER TABLE api_wf.eventComp_xref \\nADD COLUMN pageName VARCHAR(100) AFTER comp_name,\\nADD INDEX idx_pageName (pageName);\\n```\\n\\n### Data Population Strategy\\n```sql\\n-- 1. Pages set their own pageName\\nUPDATE api_wf.eventComp_xref \\nSET pageName = comp_name \\nWHERE comp_type = 'Page';\\n\\n-- 2. Child components inherit from parent Page\\nUPDATE api_wf.eventComp_xref child\\nJOIN api_wf.eventComp_xref parent ON child.parent_id = parent.id\\nSET child.pageName = parent.comp_name\\nWHERE parent.comp_type = 'Page';\\n\\n-- 3. Nested children (grandchildren) - recursive update\\nUPDATE api_wf.eventComp_xref gc\\nJOIN api_wf.eventComp_xref parent ON gc.parent_id = parent.id\\nJOIN api_wf.eventComp_xref grandparent ON parent.parent_id = grandparent.id\\nSET gc.pageName = grandparent.comp_name\\nWHERE grandparent.comp_type = 'Page' AND gc.pageName IS NULL;\\n```\\n\\n## Component Naming Convention\\n\\n### Before (Template Pattern)\\n- `{pageName}_AddNew`\\n- `{pageName}_Grid`\\n- `{pageName}_PageTitle`\\n- `{pageName}_Container`\\n\\n### After (Clean Names)\\n- `AddNew` (pageName: 'IngredientTypes')\\n- `Grid` (pageName: 'IngredientTypes')\\n- `PageTitle` (pageName: 'IngredientTypes')\\n- `Container` (pageName: 'IngredientTypes')\\n\\n### Hybrid Approach (Recommended)\\n- Keep `{pageName}_` prefix for uniqueness in database\\n- Use `pageName` column for filtering/querying\\n- Studio UI can strip prefix for display: `comp_name.replace(pageName + '_', '')`\\n\\n## Code Changes Required\\n\\n### 1. pageLoader.js (Line 53-65)\\n```javascript\\n// ADD pageName to component loading\\nawait db.eventComp_xref.add({\\n  id: compId,\\n  comp_name: cleanComp.comp_name,\\n  parent_id: cleanComp.parent_id,\\n  pageName: cleanComp.pageName,  // NEW\\n  // ... rest of fields\\n});\\n```\\n\\n### 2. pageConfigBuilder/dataFetcher.js\\n```javascript\\n// OPTION A: Filter by pageName (faster)\\nexport const getChildComponents = async (pageName) => {\\n  const allComponents = await db.eventComp_xref.toArray();\\n  return allComponents.filter(c => c.pageName === pageName && c.comp_type \\!== 'Page');\\n};\\n\\n// OPTION B: Keep parent_id for hierarchy, use pageName for context\\nexport const getChildComponents = async (parent_id) => {\\n  const allComponents = await db.eventComp_xref.toArray();\\n  const numericParentId = typeof parent_id === 'string' ? parseInt(parent_id, 10) : parent_id;\\n  const children = allComponents.filter(c => {\\n    const childParentId = typeof c.parent_id === 'string' ? parseInt(c.parent_id, 10) : c.parent_id;\\n    return childParentId === numericParentId;\\n  });\\n  return children;\\n};\\n```\\n\\n### 3. IndexedDB Schema (studioDb.js)\\n```javascript\\n// Add pageName to version 3\\ndb.version(3).stores({\\n  eventComp_xref: '++idbID, id, parent_id, pageName, comp_type, _dmlMethod',\\n  // ... other stores\\n});\\n```\\n\\n### 4. Studio UI Components\\n- **ComponentPropertiesPanel.jsx**: Add pageName field (read-only or editable)\\n- **PageFlowCanvas.jsx**: Display pageName in node labels\\n- **StudioSidebar.jsx**: Group components by pageName\\n\\n## Template Cloning Workflow\\n\\n### Current Process (Complex)\\n1. Copy all template components\\n2. Rename each component: `REPLACE(comp_name, '{pageName}', 'NewPage')`\\n3. Update all props with component name references\\n4. Update all triggers with component references\\n\\n### New Process (Simple)\\n1. Copy all template components with new pageName\\n```sql\\nINSERT INTO api_wf.eventComp_xref (comp_name, comp_type, parent_id, pageName, ...)\\nSELECT comp_name, comp_type, parent_id, 'NewPage', ...\\nFROM api_wf.eventComp_xref\\nWHERE pageName = '{pageName}';\\n```\\n2. Props and triggers auto-reference by component IDs (no renaming needed)\\n\\n## Benefits Summary\\n\\n1. **Cleaner Queries**: `SELECT * FROM eventComp_xref WHERE pageName = 'IngredientTypes'`\\n2. **Faster Filtering**: Index on pageName for performance\\n3. **Simplified Cloning**: Set pageName instead of mass renaming\\n4. **Better Context**: Always know which page a component belongs to\\n5. **Studio UX**: Group/filter components by page in UI\\n6. **Debugging**: Console logs show pageName immediately\\n\\n## Migration Checklist\\n\\n- [x] Add pageName column to MySQL table (User doing this)\\n- [ ] Populate existing records with pageName\\n- [ ] Update pageLoader.js to load pageName\\n- [ ] Update IndexedDB schema to v3 with pageName\\n- [ ] Update dataFetcher.js (decide on filtering strategy)\\n- [ ] Update Studio UI to display pageName\\n- [ ] Update template cloning workflow\\n- [ ] Test with existing pages (IngredientTypes, etc.)\\n- [ ] Document new component creation workflow\\n\\n## Risks & Considerations\\n\\n1. **Breaking Changes**: IndexedDB schema version bump will clear local data (acceptable for Studio)\\n2. **Backward Compatibility**: Old components without pageName need migration\\n3. **Naming Strategy**: Decide on prefix vs clean names\\n4. **Performance**: Index on pageName recommended for large datasets\\n\\n## Recommended Next Steps\\n\\n1. **Immediate**: Populate pageName for existing records\\n2. **Phase 1**: Update pageLoader.js and IndexedDB schema\\n3. **Phase 2**: Update Studio UI to show/edit pageName\\n4. **Phase 3**: Implement new template cloning workflow\\n5. **Phase 4**: Remove {pageName} prefixes from component names (optional)\\n\\n---\\n**Status**: User adding pageName column to MySQL table\\n**Next**: Kiro to implement code changes after column is ready\"}}","expose":true,"level":"error","message":"[app.js]  JSON parsing error: Bad escaped character in JSON at position 2481 (line 1 column 2482)","stack":"SyntaxError: Bad escaped character in JSON at position 2481 (line 1 column 2482)\n    at JSON.parse (<anonymous>)\n    at parse (/home/paul/wf-monorepo-new/node_modules/body-parser/lib/types/json.js:77:19)\n    at /home/paul/wf-monorepo-new/node_modules/body-parser/lib/read.js:123:18\n    at AsyncResource.runInAsyncScope (node:async_hooks:214:14)\n    at invokeCallback (/home/paul/wf-monorepo-new/node_modules/raw-body/index.js:238:16)\n    at done (/home/paul/wf-monorepo-new/node_modules/raw-body/index.js:227:7)\n    at IncomingMessage.onEnd (/home/paul/wf-monorepo-new/node_modules/raw-body/index.js:287:7)\n    at IncomingMessage.emit (node:events:518:28)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)","status":400,"statusCode":400,"timestamp":"2025-10-25 06:06:28","type":"entity.parse.failed"}
{"body":{"data":{"assigned_to":"kiro","comments":"Full migration plan documented in .kiro/plans/045-pageName-column-migration.md","description":"See .kiro/plans/045-pageName-column-migration.md for full details\n\n## Quick Summary\n\n### Database Changes\n- Add pageName VARCHAR(100) to eventComp_xref\n- Population queries: 4-step recursive update\n- Keep {pageName}_ prefix initially (Option A)\n\n### Code Changes\n1. pageLoader.js:63 - Load pageName field\n2. studioDb.js - Version 3 with pageName index  \n3. ComponentPropertiesPanel - Display pageName\n\n### Benefits\n- Cleaner queries: WHERE pageName = 'X'\n- Template cloning: 70% fewer SQL ops\n- Better debugging: pageName visible\n- Studio UX: Group by page\n\n### Next Steps\n1. User: Run population queries (see .md file)\n2. Kiro: Update pageLoader.js and IndexedDB\n3. Test with IngredientTypes page","name":"pageName Column Migration - Architecture Enhancement","priority":"high","status":"in_progress"},"method":"INSERT","table":"api_wf.plans"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 06:22:41"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 06:22:41"}
{"data":{"assigned_to":"kiro","comments":"Full migration plan documented in .kiro/plans/045-pageName-column-migration.md","description":"See .kiro/plans/045-pageName-column-migration.md for full details\n\n## Quick Summary\n\n### Database Changes\n- Add pageName VARCHAR(100) to eventComp_xref\n- Population queries: 4-step recursive update\n- Keep {pageName}_ prefix initially (Option A)\n\n### Code Changes\n1. pageLoader.js:63 - Load pageName field\n2. studioDb.js - Version 3 with pageName index  \n3. ComponentPropertiesPanel - Display pageName\n\n### Benefits\n- Cleaner queries: WHERE pageName = 'X'\n- Template cloning: 70% fewer SQL ops\n- Better debugging: pageName visible\n- Studio UX: Group by page\n\n### Next Steps\n1. User: Run population queries (see .md file)\n2. Kiro: Update pageLoader.js and IndexedDB\n3. Test with IngredientTypes page","name":"pageName Column Migration - Architecture Enhancement","priority":"high","status":"in_progress"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plans","timestamp":"2025-10-25 06:22:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 06:22:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 06:22:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 06:22:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":39.333163,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 06:22:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 06:22:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 06:22:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 06:22:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 06:22:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.107695,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 06:22:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 06:22:41"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plans (name, status, priority, description, comments, assigned_to, created_at, created_by) VALUES ('pageName Column Migration - Architecture Enhancement', 'in_progress', 'high', 'See .kiro/plans/045-pageName-column-migration.md for full details\n\n## Quick Summary\n\n### Database Changes\n- Add pageName VARCHAR(100) to eventComp_xref\n- Population queries: 4-step recursive update\n- Keep {pageName}_ prefix initially (Option A)\n\n### Code Changes\n1. pageLoader.js:63 - Load pageName field\n2. studioDb.js - Version 3 with pageName index  \n3. ComponentPropertiesPanel - Display pageName\n\n### Benefits\n- Cleaner queries: WHERE pageName = ''X''\n- Template cloning: 70% fewer SQL ops\n- Better debugging: pageName visible\n- Studio UX: Group by page\n\n### Next Steps\n1. User: Run population queries (see .md file)\n2. Kiro: Update pageLoader.js and IndexedDB\n3. Test with IngredientTypes page', 'Full migration plan documented in .kiro/plans/045-pageName-column-migration.md', 'kiro', NOW(), 'Paul')","timestamp":"2025-10-25 06:22:41"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 06:22:41"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 06:22:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":323.965086,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 06:22:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 06:22:41"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plans","timestamp":"2025-10-25 06:22:41"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-25 06:22:41"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (397ms)","timestamp":"2025-10-25 06:22:41"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-25 07:12:04"}
{"body":{"data":{"assigned_to":"kiro","comments":"Phased approach to integrating page_registry as single source of truth for page metadata","description":"# page_registry Phased Migration Plan\n\n## Phase 1: Foundation (Immediate)\n- Create page_registry table\n- Populate from existing Page components\n- Rename admin app to templates\n- Update pageLoader.js to load pageName\n- Bump IndexedDB schema to version 3\n\n**Priority:** immediate\n**Deliverable:** page_registry populated, pageName in IndexedDB, backward compatible\n\n## Phase 2: Integration (Short-term)\n- Add pageID column to eventComp_xref\n- Populate pageID from pageName\n- Add FK constraint to page_registry\n- Update pageConfigBuilder to use registry\n\n**Priority:** high\n**Deliverable:** Components linked to page_registry via pageID\n\n## Phase 3: Query Optimization (Medium-term)\n- Update dataFetcher.js for pageID queries\n- Replace hierarchy traversal with direct filtering\n- Performance testing\n\n**Priority:** medium\n**Deliverable:** Faster page loading with indexed pageID\n\n## Phase 4: Cleanup (Future)\n- Make pageID NOT NULL\n- Delete redundant App/Page entries\n- Update Studio UI\n\n**Priority:** low\n**Deliverable:** Fully normalized architecture\n\n## Phase 5: Template Cloning (Future)\n- Create cloning workflow\n- Studio UI integration\n\n**Priority:** medium\n**Deliverable:** Functional template cloning system","name":"page_registry Phased Migration","priority":"high","status":"pending"},"method":"INSERT","table":"api_wf.plans"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 07:52:03"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 07:52:03"}
{"data":{"assigned_to":"kiro","comments":"Phased approach to integrating page_registry as single source of truth for page metadata","description":"# page_registry Phased Migration Plan\n\n## Phase 1: Foundation (Immediate)\n- Create page_registry table\n- Populate from existing Page components\n- Rename admin app to templates\n- Update pageLoader.js to load pageName\n- Bump IndexedDB schema to version 3\n\n**Priority:** immediate\n**Deliverable:** page_registry populated, pageName in IndexedDB, backward compatible\n\n## Phase 2: Integration (Short-term)\n- Add pageID column to eventComp_xref\n- Populate pageID from pageName\n- Add FK constraint to page_registry\n- Update pageConfigBuilder to use registry\n\n**Priority:** high\n**Deliverable:** Components linked to page_registry via pageID\n\n## Phase 3: Query Optimization (Medium-term)\n- Update dataFetcher.js for pageID queries\n- Replace hierarchy traversal with direct filtering\n- Performance testing\n\n**Priority:** medium\n**Deliverable:** Faster page loading with indexed pageID\n\n## Phase 4: Cleanup (Future)\n- Make pageID NOT NULL\n- Delete redundant App/Page entries\n- Update Studio UI\n\n**Priority:** low\n**Deliverable:** Fully normalized architecture\n\n## Phase 5: Template Cloning (Future)\n- Create cloning workflow\n- Studio UI integration\n\n**Priority:** medium\n**Deliverable:** Functional template cloning system","name":"page_registry Phased Migration","priority":"high","status":"pending"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plans","timestamp":"2025-10-25 07:52:03"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 07:52:03"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 07:52:03"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 07:52:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":110.263637,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 07:52:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 07:52:03"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 07:52:03"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 07:52:03"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 07:52:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":39.89899,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 07:52:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 07:52:03"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plans (name, status, priority, description, comments, assigned_to, created_at, created_by) VALUES ('page_registry Phased Migration', 'pending', 'high', '# page_registry Phased Migration Plan\n\n## Phase 1: Foundation (Immediate)\n- Create page_registry table\n- Populate from existing Page components\n- Rename admin app to templates\n- Update pageLoader.js to load pageName\n- Bump IndexedDB schema to version 3\n\n**Priority:** immediate\n**Deliverable:** page_registry populated, pageName in IndexedDB, backward compatible\n\n## Phase 2: Integration (Short-term)\n- Add pageID column to eventComp_xref\n- Populate pageID from pageName\n- Add FK constraint to page_registry\n- Update pageConfigBuilder to use registry\n\n**Priority:** high\n**Deliverable:** Components linked to page_registry via pageID\n\n## Phase 3: Query Optimization (Medium-term)\n- Update dataFetcher.js for pageID queries\n- Replace hierarchy traversal with direct filtering\n- Performance testing\n\n**Priority:** medium\n**Deliverable:** Faster page loading with indexed pageID\n\n## Phase 4: Cleanup (Future)\n- Make pageID NOT NULL\n- Delete redundant App/Page entries\n- Update Studio UI\n\n**Priority:** low\n**Deliverable:** Fully normalized architecture\n\n## Phase 5: Template Cloning (Future)\n- Create cloning workflow\n- Studio UI integration\n\n**Priority:** medium\n**Deliverable:** Functional template cloning system', 'Phased approach to integrating page_registry as single source of truth for page metadata', 'kiro', NOW(), 'Paul')","timestamp":"2025-10-25 07:52:03"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 07:52:03"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 07:52:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":292.387468,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 07:52:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 07:52:03"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plans","timestamp":"2025-10-25 07:52:03"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-25 07:52:03"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (445ms)","timestamp":"2025-10-25 07:52:03"}
{"body":{"data":{"from_agent":"claude","message":"# Claude Session Summary - 2025-10-25\n\n**Focus:** pageName Column Architecture & page_registry Design\n**Primary AI:** Claude\n\n## Major Accomplishments\n\n### 1. CRUD Template Debugging\n- Identified root cause: IndexedDB stale data (MySQL props not synced)\n- Added comprehensive logging to TriggerEngine, pageLoader, dataFetcher\n- Solution: User needs to reload page in Studio to sync data\n\n### 2. pageName Column Migration (Plan 46)\n- User added pageName column to eventComp_xref\n- User populated pageName for all components\n- Clean naming convention: AddNew, Grid, Form (no prefixes)\n- 4-step recursive population strategy documented\n\n### 3. page_registry Table Architecture\n- Designed comprehensive metadata table for page definitions\n- Eliminates duplication between App/Page entries and metadata\n- Schema: appName, pageName, pageTitle, tableName, contextKey, routePath, status\n- Supports templates (status='template', routePath=NULL)\n- Enables template cloning, dynamic navigation, context validation\n\n### 4. Template Organization\n- Renamed 'admin' app (id=51) to 'templates' for CRUD storage\n- Real 'admin' app will be created separately\n- Template pages marked with status='template'\n\n### 5. Naming Convention Standardization\n- Abbreviated pageName: ingrType, ingr, prodType, brnd, vndr\n- Context keys: {pageName}ID -> ingrTypeID, brndID\n- Routes: /whatsfresh/ingrType\n- Display: Ingredient Types\n\n## Statistics\n- Files analyzed: 5\n- Code changes: 4 files with logging added\n- Plans created: 2 (Plan 46, Plan 47)\n- Database schema: 1 table designed (page_registry)\n\n## Next Steps (Plan 47)\n\n**Phase 1 (Immediate):**\n1. Create page_registry table\n2. Populate from existing Pages\n3. Rename admin -> templates\n4. Update pageLoader.js for pageName\n5. Bump IndexedDB to version 3\n\n**Phase 2 (Short-term):**\n1. Add pageID to eventComp_xref\n2. Establish FK to page_registry\n3. Update pageConfigBuilder\n\n**Phase 3-5:** Query optimization, cleanup, template cloning\n\n## Key Learnings\n\n**Architecture Evolution:** page_registry as single source of truth eliminates duplication and enables powerful features (template cloning, dynamic routing, context validation)\n\n**Naming Clarity:** Short technical names (pageName) vs human-readable titles (pageTitle) provides developer ergonomics + user-friendly UI\n\n**Migration Strategy:** Phased approach maintains backward compatibility - add new alongside old, migrate incrementally, remove old only after validation\n\n**Status:** Plan 47 created, ready for Phase 1 implementation","plan_id":47,"subject":"pageName Column Architecture & page_registry Design","to_agent":"any","type":"summary"},"method":"INSERT","table":"api_wf.plan_communications"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 07:52:46"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 07:52:46"}
{"data":{"from_agent":"claude","message":"# Claude Session Summary - 2025-10-25\n\n**Focus:** pageName Column Architecture & page_registry Design\n**Primary AI:** Claude\n\n## Major Accomplishments\n\n### 1. CRUD Template Debugging\n- Identified root cause: IndexedDB stale data (MySQL props not synced)\n- Added comprehensive logging to TriggerEngine, pageLoader, dataFetcher\n- Solution: User needs to reload page in Studio to sync data\n\n### 2. pageName Column Migration (Plan 46)\n- User added pageName column to eventComp_xref\n- User populated pageName for all components\n- Clean naming convention: AddNew, Grid, Form (no prefixes)\n- 4-step recursive population strategy documented\n\n### 3. page_registry Table Architecture\n- Designed comprehensive metadata table for page definitions\n- Eliminates duplication between App/Page entries and metadata\n- Schema: appName, pageName, pageTitle, tableName, contextKey, routePath, status\n- Supports templates (status='template', routePath=NULL)\n- Enables template cloning, dynamic navigation, context validation\n\n### 4. Template Organization\n- Renamed 'admin' app (id=51) to 'templates' for CRUD storage\n- Real 'admin' app will be created separately\n- Template pages marked with status='template'\n\n### 5. Naming Convention Standardization\n- Abbreviated pageName: ingrType, ingr, prodType, brnd, vndr\n- Context keys: {pageName}ID -> ingrTypeID, brndID\n- Routes: /whatsfresh/ingrType\n- Display: Ingredient Types\n\n## Statistics\n- Files analyzed: 5\n- Code changes: 4 files with logging added\n- Plans created: 2 (Plan 46, Plan 47)\n- Database schema: 1 table designed (page_registry)\n\n## Next Steps (Plan 47)\n\n**Phase 1 (Immediate):**\n1. Create page_registry table\n2. Populate from existing Pages\n3. Rename admin -> templates\n4. Update pageLoader.js for pageName\n5. Bump IndexedDB to version 3\n\n**Phase 2 (Short-term):**\n1. Add pageID to eventComp_xref\n2. Establish FK to page_registry\n3. Update pageConfigBuilder\n\n**Phase 3-5:** Query optimization, cleanup, template cloning\n\n## Key Learnings\n\n**Architecture Evolution:** page_registry as single source of truth eliminates duplication and enables powerful features (template cloning, dynamic routing, context validation)\n\n**Naming Clarity:** Short technical names (pageName) vs human-readable titles (pageTitle) provides developer ergonomics + user-friendly UI\n\n**Migration Strategy:** Phased approach maintains backward compatibility - add new alongside old, migrate incrementally, remove old only after validation\n\n**Status:** Plan 47 created, ready for Phase 1 implementation","plan_id":47,"subject":"pageName Column Architecture & page_registry Design","to_agent":"any","type":"summary"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_communications","timestamp":"2025-10-25 07:52:46"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 07:52:46"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 07:52:46"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 07:52:46"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":134.042886,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 07:52:46"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 07:52:46"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 07:52:46"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 07:52:46"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 07:52:46"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":39.499331,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 07:52:46"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 07:52:46"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_communications (plan_id, from_agent, to_agent, type, subject, message, created_at, created_by) VALUES (47, 'claude', 'any', 'summary', 'pageName Column Architecture & page_registry Design', '# Claude Session Summary - 2025-10-25\n\n**Focus:** pageName Column Architecture & page_registry Design\n**Primary AI:** Claude\n\n## Major Accomplishments\n\n### 1. CRUD Template Debugging\n- Identified root cause: IndexedDB stale data (MySQL props not synced)\n- Added comprehensive logging to TriggerEngine, pageLoader, dataFetcher\n- Solution: User needs to reload page in Studio to sync data\n\n### 2. pageName Column Migration (Plan 46)\n- User added pageName column to eventComp_xref\n- User populated pageName for all components\n- Clean naming convention: AddNew, Grid, Form (no prefixes)\n- 4-step recursive population strategy documented\n\n### 3. page_registry Table Architecture\n- Designed comprehensive metadata table for page definitions\n- Eliminates duplication between App/Page entries and metadata\n- Schema: appName, pageName, pageTitle, tableName, contextKey, routePath, status\n- Supports templates (status=''template'', routePath=NULL)\n- Enables template cloning, dynamic navigation, context validation\n\n### 4. Template Organization\n- Renamed ''admin'' app (id=51) to ''templates'' for CRUD storage\n- Real ''admin'' app will be created separately\n- Template pages marked with status=''template''\n\n### 5. Naming Convention Standardization\n- Abbreviated pageName: ingrType, ingr, prodType, brnd, vndr\n- Context keys: {pageName}ID -> ingrTypeID, brndID\n- Routes: /whatsfresh/ingrType\n- Display: Ingredient Types\n\n## Statistics\n- Files analyzed: 5\n- Code changes: 4 files with logging added\n- Plans created: 2 (Plan 46, Plan 47)\n- Database schema: 1 table designed (page_registry)\n\n## Next Steps (Plan 47)\n\n**Phase 1 (Immediate):**\n1. Create page_registry table\n2. Populate from existing Pages\n3. Rename admin -> templates\n4. Update pageLoader.js for pageName\n5. Bump IndexedDB to version 3\n\n**Phase 2 (Short-term):**\n1. Add pageID to eventComp_xref\n2. Establish FK to page_registry\n3. Update pageConfigBuilder\n\n**Phase 3-5:** Query optimization, cleanup, template cloning\n\n## Key Learnings\n\n**Architecture Evolution:** page_registry as single source of truth eliminates duplication and enables powerful features (template cloning, dynamic routing, context validation)\n\n**Naming Clarity:** Short technical names (pageName) vs human-readable titles (pageTitle) provides developer ergonomics + user-friendly UI\n\n**Migration Strategy:** Phased approach maintains backward compatibility - add new alongside old, migrate incrementally, remove old only after validation\n\n**Status:** Plan 47 created, ready for Phase 1 implementation', NOW(), 'Paul')","timestamp":"2025-10-25 07:52:46"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 07:52:46"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 07:52:46"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":266.002688,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 07:52:46"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 07:52:46"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_communications","timestamp":"2025-10-25 07:52:46"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-25 07:52:46"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (441ms)","timestamp":"2025-10-25 07:52:46"}
{"body":{"impacts":{"0":{"affectedApps":{"0":"studio"},"changeType":"MODIFY","createdBy":"claude","description":"Added debug logging to getComponentProps\n- Log xref_id and type on entry\n- Log props array found in IndexedDB\n- Log final props object being returned","filePath":"apps/studio/src/utils/pageConfigBuilder/dataFetcher.js"},"1":{"affectedApps":{"0":"studio"},"changeType":"MODIFY","createdBy":"claude","description":"Added debug logging to pageConfig building\n- Log pageProps loaded from getComponentProps\n- Log pageProps keys\n- Log final pageConfig.props after spreading","filePath":"apps/studio/src/utils/pageConfigBuilder/index.js"},"2":{"affectedApps":{"0":"documentation"},"changeType":"CREATE","createdBy":"claude","description":"Created comprehensive pageName migration plan (later moved to database as Plan 46)","filePath":".kiro/plans/046-pageName-column-migration.md"},"3":{"affectedApps":{"0":"documentation"},"changeType":"DELETE","createdBy":"claude","description":"Removed markdown file after storing plan in database (Plan 46)","filePath":".kiro/plans/046-pageName-column-migration.md"}},"planId":47},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/logImpact","timestamp":"2025-10-25 07:53:08"}
{"level":"http","message":"[logImpact.js] POST /api/logImpact","timestamp":"2025-10-25 07:53:08"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 07:53:08"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 07:53:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":422.195803,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 07:53:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 07:53:08"}
{"level":"info","message":"[impactLogger.js] Logged 4 impacts","timestamp":"2025-10-25 07:53:08"}
{"level":"info","message":"[logImpact.js] Impact logging completed successfully","timestamp":"2025-10-25 07:53:08"}
{"level":"info","message":"[app.js]  Response: POST /api/logImpact 200 (424ms)","timestamp":"2025-10-25 07:53:08"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-25 08:12:04"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-25 09:12:04"}
{"body":{"data":{"from_agent":"claude","message":"# Studio Navigation Revamp\n\n**Related to:** Plan 45 - {pageName} Template Architecture\n**Phase:** Post page_registry implementation (Plan 47)\n\n## Current State\n\nStudio navigation built on eventComp_xref hierarchy:\n```\nmonorepo (70)\n├── admin (51) [App]\n│   └── CRUD (64) [Page]\n├── whatsfresh (50) [App]\n│   ├── ingrType (57) [Page]\n│   └── ingr (58) [Page]\n```\n\n## New State (After Plan 47)\n\nApp/Page entries deleted from eventComp_xref. Navigation driven by page_registry:\n\n### Data Source\n```sql\n-- Get apps\nSELECT DISTINCT appName, COUNT(*) as pageCount\nFROM page_registry\nWHERE active = 1 AND appName != 'templates'\nGROUP BY appName;\n\n-- Get pages for selected app\nSELECT id, pageName, pageTitle, routePath\nFROM page_registry\nWHERE appName = :selectedApp AND active = 1\nORDER BY pageName;\n\n-- Get components for selected page\nSELECT * FROM eventComp_xref\nWHERE pageID = :selectedPageId AND active = 1;\n```\n\n### UI Design\n\n```\n┌─────────────────────────┐\n│ 📱 Apps                 │\n├─────────────────────────┤\n│ ▾ admin (2)             │\n│   📄 acct               │\n│   📄 user               │\n│ ▾ whatsfresh (10)       │\n│   📄 brnd               │\n│   📄 ingr               │\n│   📄 ingrBtch           │\n│   📄 ingrType          │\n│   📄 prod               │\n│   📄 prodBtch           │\n│   📄 prodBtchMap       │\n│   📄 prodType          │\n│   📄 rcpe               │\n│   📄 vndr               │\n│ ▸ login (1)             │\n├─────────────────────────┤\n│ 🔧 Templates (3)        │\n│   📋 CRUD               │\n│   🎨 appbar             │\n│   🎨 sidebar            │\n│   [+ Clone Template]    │\n└─────────────────────────┘\n```\n\n## Code Changes\n\n### StudioSidebar.jsx\n\n**Before:**\n```javascript\n// Load from eventComp_xref hierarchy\nconst loadApps = async () => {\n  const apps = await db.eventComp_xref\n    .where('comp_type').equals('App')\n    .toArray();\n};\n```\n\n**After:**\n```javascript\n// Load from page_registry\nconst loadApps = async () => {\n  const result = await execEvent('getApps');\n  return result.data; // [{appName: 'admin', pageCount: 2}, ...]\n};\n\nconst loadPages = async (appName) => {\n  const result = await execEvent('getPagesByApp', { appName });\n  return result.data; // [{id: 13, pageName: 'acct', pageTitle: 'Accounts'}, ...]\n};\n```\n\n### PageFlowCanvas.jsx\n\n**No changes needed!** Canvas still renders components from eventComp_xref:\n```javascript\nconst components = await db.eventComp_xref\n  .where('pageID').equals(selectedPageId)\n  .toArray();\n```\n\n## New Features\n\n### 1. Page Registry Report (PDF Export)\n\n**UI:**\n```javascript\n<button onClick={generateRegistryReport}>\n  📄 Export Page Registry PDF\n</button>\n```\n\n**Implementation:**\n- Query: SELECT * FROM page_registry ORDER BY appName, pageName\n- Group by appName\n- PDF libraries: jsPDF or pdfmake\n- Format: App sections with page cards showing route, table, contextKey\n\n**Report Layout:**\n```\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n admin (2 pages)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n┌──────────────────────────────────────────┐\n│ acct - Accounts                          │\n├──────────────────────────────────────────┤\n│ Route: /admin/acct                       │\n│ Table: whatsfresh.accounts               │\n│ Context: acctID                          │\n└──────────────────────────────────────────┘\n```\n\n### 2. Templates Section\n\n**UI:**\n- Separate section below apps\n- Show templates with [TEMPLATE] badge\n- \"Clone Template\" button for each template\n- Opens cloning wizard\n\n### 3. Search/Filter\n\n**Feature:**\n```javascript\n<input \n  placeholder=\"Search pages...\"\n  onChange={(e) => filterPages(e.target.value)}\n/>\n```\n\n**Query:**\n```sql\nSELECT * FROM page_registry\nWHERE (pageName LIKE :search OR pageTitle LIKE :search)\n  AND active = 1;\n```\n\n## Implementation Checklist\n\n- [ ] Create eventSQL queries: getApps, getPagesByApp\n- [ ] Update StudioSidebar to use page_registry\n- [ ] Remove App/Page node rendering from tree\n- [ ] Add Templates section to sidebar\n- [ ] Implement PDF export functionality\n- [ ] Add search/filter capability\n- [ ] Test navigation with all apps\n- [ ] Update Studio user guide\n\n## Benefits\n\n✅ Simpler data model (no redundant App/Page entries)\n✅ Faster queries (direct page_registry lookup vs hierarchy traversal)\n✅ Better UX (page counts, search, templates section)\n✅ PDF reporting for documentation\n✅ Foundation for template cloning wizard\n\n## Timeline\n\n**Implement after Plan 47 Phase 2 completes** (App/Page entries deleted)\n\n**Estimated effort:** 1-2 days\n- Query creation: 1 hour\n- Sidebar refactor: 4 hours\n- PDF export: 3 hours\n- Testing: 2 hours","plan_id":45,"subject":"Studio Navigation Revamp for page_registry","to_agent":"kiro","type":"guidance"},"method":"INSERT","table":"api_wf.plan_communications"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 09:43:08"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 09:43:08"}
{"data":{"from_agent":"claude","message":"# Studio Navigation Revamp\n\n**Related to:** Plan 45 - {pageName} Template Architecture\n**Phase:** Post page_registry implementation (Plan 47)\n\n## Current State\n\nStudio navigation built on eventComp_xref hierarchy:\n```\nmonorepo (70)\n├── admin (51) [App]\n│   └── CRUD (64) [Page]\n├── whatsfresh (50) [App]\n│   ├── ingrType (57) [Page]\n│   └── ingr (58) [Page]\n```\n\n## New State (After Plan 47)\n\nApp/Page entries deleted from eventComp_xref. Navigation driven by page_registry:\n\n### Data Source\n```sql\n-- Get apps\nSELECT DISTINCT appName, COUNT(*) as pageCount\nFROM page_registry\nWHERE active = 1 AND appName != 'templates'\nGROUP BY appName;\n\n-- Get pages for selected app\nSELECT id, pageName, pageTitle, routePath\nFROM page_registry\nWHERE appName = :selectedApp AND active = 1\nORDER BY pageName;\n\n-- Get components for selected page\nSELECT * FROM eventComp_xref\nWHERE pageID = :selectedPageId AND active = 1;\n```\n\n### UI Design\n\n```\n┌─────────────────────────┐\n│ 📱 Apps                 │\n├─────────────────────────┤\n│ ▾ admin (2)             │\n│   📄 acct               │\n│   📄 user               │\n│ ▾ whatsfresh (10)       │\n│   📄 brnd               │\n│   📄 ingr               │\n│   📄 ingrBtch           │\n│   📄 ingrType          │\n│   📄 prod               │\n│   📄 prodBtch           │\n│   📄 prodBtchMap       │\n│   📄 prodType          │\n│   📄 rcpe               │\n│   📄 vndr               │\n│ ▸ login (1)             │\n├─────────────────────────┤\n│ 🔧 Templates (3)        │\n│   📋 CRUD               │\n│   🎨 appbar             │\n│   🎨 sidebar            │\n│   [+ Clone Template]    │\n└─────────────────────────┘\n```\n\n## Code Changes\n\n### StudioSidebar.jsx\n\n**Before:**\n```javascript\n// Load from eventComp_xref hierarchy\nconst loadApps = async () => {\n  const apps = await db.eventComp_xref\n    .where('comp_type').equals('App')\n    .toArray();\n};\n```\n\n**After:**\n```javascript\n// Load from page_registry\nconst loadApps = async () => {\n  const result = await execEvent('getApps');\n  return result.data; // [{appName: 'admin', pageCount: 2}, ...]\n};\n\nconst loadPages = async (appName) => {\n  const result = await execEvent('getPagesByApp', { appName });\n  return result.data; // [{id: 13, pageName: 'acct', pageTitle: 'Accounts'}, ...]\n};\n```\n\n### PageFlowCanvas.jsx\n\n**No changes needed!** Canvas still renders components from eventComp_xref:\n```javascript\nconst components = await db.eventComp_xref\n  .where('pageID').equals(selectedPageId)\n  .toArray();\n```\n\n## New Features\n\n### 1. Page Registry Report (PDF Export)\n\n**UI:**\n```javascript\n<button onClick={generateRegistryReport}>\n  📄 Export Page Registry PDF\n</button>\n```\n\n**Implementation:**\n- Query: SELECT * FROM page_registry ORDER BY appName, pageName\n- Group by appName\n- PDF libraries: jsPDF or pdfmake\n- Format: App sections with page cards showing route, table, contextKey\n\n**Report Layout:**\n```\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n admin (2 pages)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n┌──────────────────────────────────────────┐\n│ acct - Accounts                          │\n├──────────────────────────────────────────┤\n│ Route: /admin/acct                       │\n│ Table: whatsfresh.accounts               │\n│ Context: acctID                          │\n└──────────────────────────────────────────┘\n```\n\n### 2. Templates Section\n\n**UI:**\n- Separate section below apps\n- Show templates with [TEMPLATE] badge\n- \"Clone Template\" button for each template\n- Opens cloning wizard\n\n### 3. Search/Filter\n\n**Feature:**\n```javascript\n<input \n  placeholder=\"Search pages...\"\n  onChange={(e) => filterPages(e.target.value)}\n/>\n```\n\n**Query:**\n```sql\nSELECT * FROM page_registry\nWHERE (pageName LIKE :search OR pageTitle LIKE :search)\n  AND active = 1;\n```\n\n## Implementation Checklist\n\n- [ ] Create eventSQL queries: getApps, getPagesByApp\n- [ ] Update StudioSidebar to use page_registry\n- [ ] Remove App/Page node rendering from tree\n- [ ] Add Templates section to sidebar\n- [ ] Implement PDF export functionality\n- [ ] Add search/filter capability\n- [ ] Test navigation with all apps\n- [ ] Update Studio user guide\n\n## Benefits\n\n✅ Simpler data model (no redundant App/Page entries)\n✅ Faster queries (direct page_registry lookup vs hierarchy traversal)\n✅ Better UX (page counts, search, templates section)\n✅ PDF reporting for documentation\n✅ Foundation for template cloning wizard\n\n## Timeline\n\n**Implement after Plan 47 Phase 2 completes** (App/Page entries deleted)\n\n**Estimated effort:** 1-2 days\n- Query creation: 1 hour\n- Sidebar refactor: 4 hours\n- PDF export: 3 hours\n- Testing: 2 hours","plan_id":45,"subject":"Studio Navigation Revamp for page_registry","to_agent":"kiro","type":"guidance"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_communications","timestamp":"2025-10-25 09:43:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 09:43:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 09:43:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 09:43:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":262.212873,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 09:43:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 09:43:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 09:43:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 09:43:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 09:43:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":81.249649,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 09:43:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 09:43:08"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_communications (plan_id, from_agent, to_agent, type, subject, message, created_at, created_by) VALUES (45, 'claude', 'kiro', 'guidance', 'Studio Navigation Revamp for page_registry', '# Studio Navigation Revamp\n\n**Related to:** Plan 45 - {pageName} Template Architecture\n**Phase:** Post page_registry implementation (Plan 47)\n\n## Current State\n\nStudio navigation built on eventComp_xref hierarchy:\n```\nmonorepo (70)\n├── admin (51) [App]\n│   └── CRUD (64) [Page]\n├── whatsfresh (50) [App]\n│   ├── ingrType (57) [Page]\n│   └── ingr (58) [Page]\n```\n\n## New State (After Plan 47)\n\nApp/Page entries deleted from eventComp_xref. Navigation driven by page_registry:\n\n### Data Source\n```sql\n-- Get apps\nSELECT DISTINCT appName, COUNT(*) as pageCount\nFROM page_registry\nWHERE active = 1 AND appName != ''templates''\nGROUP BY appName;\n\n-- Get pages for selected app\nSELECT id, pageName, pageTitle, routePath\nFROM page_registry\nWHERE appName = :selectedApp AND active = 1\nORDER BY pageName;\n\n-- Get components for selected page\nSELECT * FROM eventComp_xref\nWHERE pageID = :selectedPageId AND active = 1;\n```\n\n### UI Design\n\n```\n┌─────────────────────────┐\n│ 📱 Apps                 │\n├─────────────────────────┤\n│ ▾ admin (2)             │\n│   📄 acct               │\n│   📄 user               │\n│ ▾ whatsfresh (10)       │\n│   📄 brnd               │\n│   📄 ingr               │\n│   📄 ingrBtch           │\n│   📄 ingrType          │\n│   📄 prod               │\n│   📄 prodBtch           │\n│   📄 prodBtchMap       │\n│   📄 prodType          │\n│   📄 rcpe               │\n│   📄 vndr               │\n│ ▸ login (1)             │\n├─────────────────────────┤\n│ 🔧 Templates (3)        │\n│   📋 CRUD               │\n│   🎨 appbar             │\n│   🎨 sidebar            │\n│   [+ Clone Template]    │\n└─────────────────────────┘\n```\n\n## Code Changes\n\n### StudioSidebar.jsx\n\n**Before:**\n```javascript\n// Load from eventComp_xref hierarchy\nconst loadApps = async () => {\n  const apps = await db.eventComp_xref\n    .where(''comp_type'').equals(''App'')\n    .toArray();\n};\n```\n\n**After:**\n```javascript\n// Load from page_registry\nconst loadApps = async () => {\n  const result = await execEvent(''getApps'');\n  return result.data; // [{appName: ''admin'', pageCount: 2}, ...]\n};\n\nconst loadPages = async (appName) => {\n  const result = await execEvent(''getPagesByApp'', { appName });\n  return result.data; // [{id: 13, pageName: ''acct'', pageTitle: ''Accounts''}, ...]\n};\n```\n\n### PageFlowCanvas.jsx\n\n**No changes needed!** Canvas still renders components from eventComp_xref:\n```javascript\nconst components = await db.eventComp_xref\n  .where(''pageID'').equals(selectedPageId)\n  .toArray();\n```\n\n## New Features\n\n### 1. Page Registry Report (PDF Export)\n\n**UI:**\n```javascript\n<button onClick={generateRegistryReport}>\n  📄 Export Page Registry PDF\n</button>\n```\n\n**Implementation:**\n- Query: SELECT * FROM page_registry ORDER BY appName, pageName\n- Group by appName\n- PDF libraries: jsPDF or pdfmake\n- Format: App sections with page cards showing route, table, contextKey\n\n**Report Layout:**\n```\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n admin (2 pages)\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n┌──────────────────────────────────────────┐\n│ acct - Accounts                          │\n├──────────────────────────────────────────┤\n│ Route: /admin/acct                       │\n│ Table: whatsfresh.accounts               │\n│ Context: acctID                          │\n└──────────────────────────────────────────┘\n```\n\n### 2. Templates Section\n\n**UI:**\n- Separate section below apps\n- Show templates with [TEMPLATE] badge\n- \"Clone Template\" button for each template\n- Opens cloning wizard\n\n### 3. Search/Filter\n\n**Feature:**\n```javascript\n<input \n  placeholder=\"Search pages...\"\n  onChange={(e) => filterPages(e.target.value)}\n/>\n```\n\n**Query:**\n```sql\nSELECT * FROM page_registry\nWHERE (pageName LIKE :search OR pageTitle LIKE :search)\n  AND active = 1;\n```\n\n## Implementation Checklist\n\n- [ ] Create eventSQL queries: getApps, getPagesByApp\n- [ ] Update StudioSidebar to use page_registry\n- [ ] Remove App/Page node rendering from tree\n- [ ] Add Templates section to sidebar\n- [ ] Implement PDF export functionality\n- [ ] Add search/filter capability\n- [ ] Test navigation with all apps\n- [ ] Update Studio user guide\n\n## Benefits\n\n✅ Simpler data model (no redundant App/Page entries)\n✅ Faster queries (direct page_registry lookup vs hierarchy traversal)\n✅ Better UX (page counts, search, templates section)\n✅ PDF reporting for documentation\n✅ Foundation for template cloning wizard\n\n## Timeline\n\n**Implement after Plan 47 Phase 2 completes** (App/Page entries deleted)\n\n**Estimated effort:** 1-2 days\n- Query creation: 1 hour\n- Sidebar refactor: 4 hours\n- PDF export: 3 hours\n- Testing: 2 hours', NOW(), 'Paul')","timestamp":"2025-10-25 09:43:08"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 09:43:08"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 09:43:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":272.960034,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 09:43:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 09:43:08"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_communications","timestamp":"2025-10-25 09:43:08"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-25 09:43:08"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (620ms)","timestamp":"2025-10-25 09:43:08"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":619.517972,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-25 09:43:08"}
{"body":{"eventSQLId":"sessionPlan45"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 09:54:25"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 09:54:25"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: sessionPlan45","timestamp":"2025-10-25 09:54:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 09:54:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 09:54:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 09:54:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":112.287117,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 09:54:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 09:54:25"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: sessionPlan45 (ID: 31)","timestamp":"2025-10-25 09:54:25"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select * \r\nfrom api_wf.vw_plan45\r\nlimit 30","timestamp":"2025-10-25 09:54:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 09:54:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 09:54:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 19","timestamp":"2025-10-25 09:54:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":152.129311,"method":"GET","operation":"database_query","rowCount":19,"success":true},"timestamp":"2025-10-25 09:54:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 09:54:25"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: sessionPlan45 (ID: 31)","timestamp":"2025-10-25 09:54:25"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (265ms)","timestamp":"2025-10-25 09:54:25"}
{"body":{"eventSQLId":"sessionPlan45"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 09:58:31"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 09:58:31"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: sessionPlan45","timestamp":"2025-10-25 09:58:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 09:58:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 09:58:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 09:58:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":192.251204,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 09:58:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 09:58:31"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: sessionPlan45 (ID: 31)","timestamp":"2025-10-25 09:58:31"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select * \r\nfrom api_wf.vw_plan45\r\nlimit 30","timestamp":"2025-10-25 09:58:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 09:58:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 09:58:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 20","timestamp":"2025-10-25 09:58:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":608.591177,"method":"GET","operation":"database_query","rowCount":20,"success":true},"timestamp":"2025-10-25 09:58:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 09:58:32"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: sessionPlan45 (ID: 31)","timestamp":"2025-10-25 09:58:32"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (803ms)","timestamp":"2025-10-25 09:58:32"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":803.259216,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-25 09:58:32"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-25 10:12:04"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-25 11:12:04"}
{"body":{"data":{"assigned_to":"kiro","comments":"Continuation of Plan 45/46/47 architecture evolution","description":"# Container-as-Root Standard\n\n## Immediate Tasks\n\n### 1. Finalize sp_hier_structure Migration\n- Update stored procedure to use pageID-based queries\n- Remove App/Page level traversal\n- Container self-reference as root (level 0)\n- Include pageID in output\n- Increase recursion depth to 20 levels\n\n### 2. Container Standard Enforcement\n- Every page MUST have Container as root component\n- Container inherits Page props and triggers\n- Container uses self-reference (parent_id = id)\n- All other components are descendants\n\n### 3. App Props Migration Strategy\n- App-level props (PORT, routePath, allowedRoles) need new home\n- Options:\n  a. Add columns to page_registry (app_port, app_route_prefix, etc.)\n  b. Keep App entries as metadata-only (not rendered)\n  c. Create separate app_registry table\n- Recommended: Option B for Phase 1 (minimal disruption)\n\n## Medium-term\n\n### 4. Page Registry Integration\n- Update pageLoader.js to query page_registry\n- Update pageConfigBuilder to use pageID\n- Studio navigation from page_registry\n\n### 5. Template Cloning with comp_name Lookup\n- Add UNIQUE constraint: (pageID, comp_name)\n- Clone components, fix parent_ids using comp_name\n- Self-reference top-level Container\n\n## Success Criteria\n\n- All pages have Container at root\n- sp_hier_structure returns clean hierarchy with pageID\n- No App/Page entries in component trees (moved to registry)\n- Template cloning works end-to-end","name":"Container-as-Root Standard & Architecture Finalization","priority":"high","status":"pending"},"method":"INSERT","table":"api_wf.plans"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 11:25:09"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 11:25:09"}
{"data":{"assigned_to":"kiro","comments":"Continuation of Plan 45/46/47 architecture evolution","description":"# Container-as-Root Standard\n\n## Immediate Tasks\n\n### 1. Finalize sp_hier_structure Migration\n- Update stored procedure to use pageID-based queries\n- Remove App/Page level traversal\n- Container self-reference as root (level 0)\n- Include pageID in output\n- Increase recursion depth to 20 levels\n\n### 2. Container Standard Enforcement\n- Every page MUST have Container as root component\n- Container inherits Page props and triggers\n- Container uses self-reference (parent_id = id)\n- All other components are descendants\n\n### 3. App Props Migration Strategy\n- App-level props (PORT, routePath, allowedRoles) need new home\n- Options:\n  a. Add columns to page_registry (app_port, app_route_prefix, etc.)\n  b. Keep App entries as metadata-only (not rendered)\n  c. Create separate app_registry table\n- Recommended: Option B for Phase 1 (minimal disruption)\n\n## Medium-term\n\n### 4. Page Registry Integration\n- Update pageLoader.js to query page_registry\n- Update pageConfigBuilder to use pageID\n- Studio navigation from page_registry\n\n### 5. Template Cloning with comp_name Lookup\n- Add UNIQUE constraint: (pageID, comp_name)\n- Clone components, fix parent_ids using comp_name\n- Self-reference top-level Container\n\n## Success Criteria\n\n- All pages have Container at root\n- sp_hier_structure returns clean hierarchy with pageID\n- No App/Page entries in component trees (moved to registry)\n- Template cloning works end-to-end","name":"Container-as-Root Standard & Architecture Finalization","priority":"high","status":"pending"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plans","timestamp":"2025-10-25 11:25:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 11:25:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 11:25:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 11:25:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":81.101688,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 11:25:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 11:25:10"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 11:25:10"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 11:25:10"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 11:25:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":73.775779,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 11:25:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 11:25:10"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plans (name, status, priority, description, comments, assigned_to, created_at, created_by) VALUES ('Container-as-Root Standard & Architecture Finalization', 'pending', 'high', '# Container-as-Root Standard\n\n## Immediate Tasks\n\n### 1. Finalize sp_hier_structure Migration\n- Update stored procedure to use pageID-based queries\n- Remove App/Page level traversal\n- Container self-reference as root (level 0)\n- Include pageID in output\n- Increase recursion depth to 20 levels\n\n### 2. Container Standard Enforcement\n- Every page MUST have Container as root component\n- Container inherits Page props and triggers\n- Container uses self-reference (parent_id = id)\n- All other components are descendants\n\n### 3. App Props Migration Strategy\n- App-level props (PORT, routePath, allowedRoles) need new home\n- Options:\n  a. Add columns to page_registry (app_port, app_route_prefix, etc.)\n  b. Keep App entries as metadata-only (not rendered)\n  c. Create separate app_registry table\n- Recommended: Option B for Phase 1 (minimal disruption)\n\n## Medium-term\n\n### 4. Page Registry Integration\n- Update pageLoader.js to query page_registry\n- Update pageConfigBuilder to use pageID\n- Studio navigation from page_registry\n\n### 5. Template Cloning with comp_name Lookup\n- Add UNIQUE constraint: (pageID, comp_name)\n- Clone components, fix parent_ids using comp_name\n- Self-reference top-level Container\n\n## Success Criteria\n\n- All pages have Container at root\n- sp_hier_structure returns clean hierarchy with pageID\n- No App/Page entries in component trees (moved to registry)\n- Template cloning works end-to-end', 'Continuation of Plan 45/46/47 architecture evolution', 'kiro', NOW(), 'Paul')","timestamp":"2025-10-25 11:25:10"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 11:25:10"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 11:25:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":145.848046,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 11:25:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 11:25:10"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plans","timestamp":"2025-10-25 11:25:10"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-25 11:25:10"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (303ms)","timestamp":"2025-10-25 11:25:10"}
{"body":{"data":{"from_agent":"claude","message":"# Claude Session Summary - 2025-10-25 (Extended)\n\n**Focus:** Complete architectural transformation from template tokens to registry-based component system\n**Primary AI:** Claude\n**Duration:** Extended session (~8 hours of design work)\n\n---\n\n## Major Accomplishments\n\n### 1. CRUD Template Debugging (Session Start)\n- **Root cause identified:** IndexedDB stale data - MySQL props not syncing\n- Added comprehensive logging to TriggerEngine, pageLoader, dataFetcher\n- User solution: Reload page in Studio to sync MySQL → IndexedDB\n\n### 2. pageName Column Migration (Plan 46)\n- User added pageName VARCHAR(100) to eventComp_xref\n- User populated all existing components with pageName\n- Adopted clean naming (AddNew vs {pageName}_AddNew)\n- 4-step recursive population strategy documented\n- Abandoned prefix pattern in favor of clean component names\n\n### 3. page_registry Table Design (Plan 47)\n- **Breakthrough insight:** Eliminate redundant App/Page entries in eventComp_xref\n- Single source of truth for page metadata\n- Schema: appName, pageName, pageTitle, tableName, contextKey, routePath, status\n- 16 pages registered (templates, login, admin, whatsfresh)\n- Supports template status with NULL routePath\n\n### 4. Naming Convention Standardization\n- Abbreviated pageName: ingrType, ingr, prodType, brnd, vndr\n- Context keys: {pageName}ID → ingrTypeID, brndID\n- Routes: /whatsfresh/ingrType\n- Display titles: Ingredient Types, Brands\n- **User preference:** Short technical names for developer ergonomics\n\n### 5. Container-as-Root Standard (Plan 48)\n- **Key decision:** Every page MUST have Container at root\n- Container uses self-reference (parent_id = id)\n- Container inherits Page props and triggers after migration\n- Login page updated with Container (id=78)\n- CRUD template already had Container (id=65)\n\n### 6. sp_hier_structure Rewrite\n- Eliminated App/Page level traversal\n- Simplified to pageID-based queries\n- Recursive CTE starts at Container (level 0)\n- Handles deep nesting (increased limit to 20 levels)\n- Added pageID to output for explicit page ownership\n- Tested successfully with CRUD template and login page\n\n### 7. Studio Navigation Revamp Design\n- PDF export for page_registry documentation\n- Navigation tree from page_registry instead of eventComp_xref\n- Templates section separate from apps\n- Search/filter capabilities\n- Communication created (plan_communications #54)\n\n### 8. Plan Organization\n- **Plan 45:** Parent epic for template architecture\n- **Plan 46:** pageName column migration\n- **Plan 47:** page_registry phased migration\n- **Plan 48:** Container-as-root standard\n- All linked via plan_communications to Plan 45\n- sessionPlan45 query pulls last 30 records from vw_plan45\n\n---\n\n## Statistics\n\n- **Plans Created:** 3 (Plans 46, 47, 48)\n- **Communications:** 3 (Studio nav, session summaries, architecture docs)\n- **Files Modified:** 6 (TriggerEngine, textRenderer, dataFetcher, pageConfigBuilder, summary.md, startSession.md)\n- **SQL Modules:** 2 (sp_hier_structure rewritten, vw_hier_components updated)\n- **Database Tables:** 1 created (page_registry with 16 entries)\n- **Architecture Decisions:** 5 major (pageName, page_registry, Container-as-root, template organization, naming conventions)\n\n---\n\n## Next Steps (Plan 48)\n\n### Immediate (Priority: high)\n1. **Finalize sp_hier_structure:** Deploy rewritten procedure\n2. **Migrate Page props → Container:** Move tableName and page-level props\n3. **Migrate Page triggers → Container:** Move onLoad triggers\n4. **Add Container to remaining pages:** Ensure all pages follow standard\n5. **Update pageLoader.js:** Load pageID into IndexedDB\n6. **Bump IndexedDB schema:** Version 3 with pageID column\n\n### Short-term (Priority: medium)\n1. **Handle App props:** Decide on PORT, routePath, allowedRoles migration\n2. **Delete App/Page entries:** After props/triggers migrated\n3. **Update Studio navigation:** Use page_registry queries\n4. **Template cloning workflow:** Implement comp_name lookup strategy\n\n### Medium-term (Priority: low)\n1. **PDF registry report:** Implement export functionality\n2. **Search/filter pages:** Studio UX enhancement\n3. **Template library UI:** Browse and clone templates\n4. **Composite key CRUD:** Custom pages for prodBtchMap, rcpe\n\n---\n\n## Key Learnings\n\n### Architectural Evolution Pattern\n**Discovery process:**\n1. Started with template token debugging\n2. Revealed need for pageName column (better organization)\n3. pageName revealed opportunity for page_registry (eliminate duplication)\n4. page_registry enabled Container-as-root standard (clean hierarchy)\n5. Container-as-root simplified sp_hier_structure (no App/Page traversal)\n\n**Each phase built on insights from the previous phase** - organic architecture evolution driven by real problems.\n\n### Metadata Tables as Single Source of Truth\nSeparating **metadata** (page_registry) from **structure** (eventComp_xref) provides:\n- Clean separation of concerns\n- Faster queries (indexed pageID vs hierarchy traversal)\n- Template cloning (copy components + insert registry row)\n- Dynamic navigation (query registry for apps/pages)\n- Validation (context keys, route paths)\n\n### Developer Ergonomics vs User Experience\n**Balance achieved:**\n- pageName: Short technical names (ingrType) for developers\n- pageTitle: Human-readable names (Ingredient Types) for users\n- Both stored in page_registry for appropriate usage\n\n### Phased Migration Strategy\n**Critical for complex schema changes:**\n1. Add new alongside old (page_registry + eventComp_xref)\n2. Establish relationships (pageID FK)\n3. Migrate data incrementally (props, triggers)\n4. Update queries/code (pageLoader, Studio)\n5. Remove old only after validation (delete App/Page entries)\n\nEach phase maintains backward compatibility until the next phase is ready.\n\n### Container-as-Root Standard\n**Insight:** Container is already the semantic root for layout - making it the actual root (self-reference) simplifies:\n- Props/triggers inheritance (Page → Container migration)\n- Hierarchy queries (start at level 0 instead of -1)\n- Template structure (every page looks the same)\n- Rendering logic (no special case for Page vs Container)\n\n---\n\n## Technical Decisions\n\n### 1. Clean Component Names (No Prefixes)\n**Decision:** Use clean names (AddNew) instead of prefixed ({pageName}_AddNew)\n**Rationale:** pageName column makes prefix redundant, cleaner database, better readability\n**Trade-off:** Must use pageID for uniqueness instead of relying on name uniqueness\n\n### 2. Abbreviated pageName Pattern\n**Decision:** Short camelCase names (ingrType, prodBtch, brnd)\n**Rationale:** Developer familiarity, less typing, consistent with context_store keys\n**Benefit:** Routes (/whatsfresh/ingrType) and variables (ingrTypeID) align naturally\n\n### 3. Templates App (Not Admin)\n**Decision:** Renamed admin app to templates for CRUD/appbar/sidebar templates\n**Rationale:** Separation of concerns - templates vs actual admin functionality\n**Future:** Real admin app will be created separately for user/account management\n\n### 4. Recursive CTE (Not Flat Query)\n**Decision:** Keep recursive query for sp_hier_structure despite added complexity\n**Rationale:** Mapping page prototype showed 5-6 levels of nesting - flat query insufficient\n**Benefit:** Provides level and id_path for complex layouts\n\n### 5. pageID in sp_hier_structure Output\n**Decision:** Include pageID in every component result\n**Rationale:** Explicit page ownership, useful for debugging, validation, frontend queries\n\n---\n\n## Files Impacted\n\n### Code Changes\n1. apps/studio/src/utils/pageConfigBuilder/dataFetcher.js - Debug logging\n2. apps/studio/src/utils/pageConfigBuilder/index.js - Debug logging\n3. .shared/commands/summary.md - Added Plan 45 context query\n4. .shared/commands/startSession.md - Already had Plan 45 query (verified)\n\n### SQL Schema\n5. AI/sql/api_wf/procedures/sp_hier_structure.sql - Complete rewrite for pageID-based queries\n6. AI/sql/api_wf/views/vw_hier_components.sql - Updated to include pageID\n7. Database: page_registry table created with 16 entries\n8. Database: eventComp_xref.pageName column populated\n9. Database: Login page Container created (id=78)\n\n---\n\n**Status:** Architecture design complete, ready for Kiro implementation (Plans 47-48)\n**Blocked By:** None - all dependencies resolved\n**Next Session:** Kiro implements Phase 1 (pageLoader.js, IndexedDB v3, Container migrations)","plan_id":45,"subject":"Architecture Evolution: pageName → page_registry → Container-as-Root","to_agent":"any","type":"summary"},"method":"INSERT","table":"api_wf.plan_communications"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 11:26:39"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 11:26:39"}
{"data":{"from_agent":"claude","message":"# Claude Session Summary - 2025-10-25 (Extended)\n\n**Focus:** Complete architectural transformation from template tokens to registry-based component system\n**Primary AI:** Claude\n**Duration:** Extended session (~8 hours of design work)\n\n---\n\n## Major Accomplishments\n\n### 1. CRUD Template Debugging (Session Start)\n- **Root cause identified:** IndexedDB stale data - MySQL props not syncing\n- Added comprehensive logging to TriggerEngine, pageLoader, dataFetcher\n- User solution: Reload page in Studio to sync MySQL → IndexedDB\n\n### 2. pageName Column Migration (Plan 46)\n- User added pageName VARCHAR(100) to eventComp_xref\n- User populated all existing components with pageName\n- Adopted clean naming (AddNew vs {pageName}_AddNew)\n- 4-step recursive population strategy documented\n- Abandoned prefix pattern in favor of clean component names\n\n### 3. page_registry Table Design (Plan 47)\n- **Breakthrough insight:** Eliminate redundant App/Page entries in eventComp_xref\n- Single source of truth for page metadata\n- Schema: appName, pageName, pageTitle, tableName, contextKey, routePath, status\n- 16 pages registered (templates, login, admin, whatsfresh)\n- Supports template status with NULL routePath\n\n### 4. Naming Convention Standardization\n- Abbreviated pageName: ingrType, ingr, prodType, brnd, vndr\n- Context keys: {pageName}ID → ingrTypeID, brndID\n- Routes: /whatsfresh/ingrType\n- Display titles: Ingredient Types, Brands\n- **User preference:** Short technical names for developer ergonomics\n\n### 5. Container-as-Root Standard (Plan 48)\n- **Key decision:** Every page MUST have Container at root\n- Container uses self-reference (parent_id = id)\n- Container inherits Page props and triggers after migration\n- Login page updated with Container (id=78)\n- CRUD template already had Container (id=65)\n\n### 6. sp_hier_structure Rewrite\n- Eliminated App/Page level traversal\n- Simplified to pageID-based queries\n- Recursive CTE starts at Container (level 0)\n- Handles deep nesting (increased limit to 20 levels)\n- Added pageID to output for explicit page ownership\n- Tested successfully with CRUD template and login page\n\n### 7. Studio Navigation Revamp Design\n- PDF export for page_registry documentation\n- Navigation tree from page_registry instead of eventComp_xref\n- Templates section separate from apps\n- Search/filter capabilities\n- Communication created (plan_communications #54)\n\n### 8. Plan Organization\n- **Plan 45:** Parent epic for template architecture\n- **Plan 46:** pageName column migration\n- **Plan 47:** page_registry phased migration\n- **Plan 48:** Container-as-root standard\n- All linked via plan_communications to Plan 45\n- sessionPlan45 query pulls last 30 records from vw_plan45\n\n---\n\n## Statistics\n\n- **Plans Created:** 3 (Plans 46, 47, 48)\n- **Communications:** 3 (Studio nav, session summaries, architecture docs)\n- **Files Modified:** 6 (TriggerEngine, textRenderer, dataFetcher, pageConfigBuilder, summary.md, startSession.md)\n- **SQL Modules:** 2 (sp_hier_structure rewritten, vw_hier_components updated)\n- **Database Tables:** 1 created (page_registry with 16 entries)\n- **Architecture Decisions:** 5 major (pageName, page_registry, Container-as-root, template organization, naming conventions)\n\n---\n\n## Next Steps (Plan 48)\n\n### Immediate (Priority: high)\n1. **Finalize sp_hier_structure:** Deploy rewritten procedure\n2. **Migrate Page props → Container:** Move tableName and page-level props\n3. **Migrate Page triggers → Container:** Move onLoad triggers\n4. **Add Container to remaining pages:** Ensure all pages follow standard\n5. **Update pageLoader.js:** Load pageID into IndexedDB\n6. **Bump IndexedDB schema:** Version 3 with pageID column\n\n### Short-term (Priority: medium)\n1. **Handle App props:** Decide on PORT, routePath, allowedRoles migration\n2. **Delete App/Page entries:** After props/triggers migrated\n3. **Update Studio navigation:** Use page_registry queries\n4. **Template cloning workflow:** Implement comp_name lookup strategy\n\n### Medium-term (Priority: low)\n1. **PDF registry report:** Implement export functionality\n2. **Search/filter pages:** Studio UX enhancement\n3. **Template library UI:** Browse and clone templates\n4. **Composite key CRUD:** Custom pages for prodBtchMap, rcpe\n\n---\n\n## Key Learnings\n\n### Architectural Evolution Pattern\n**Discovery process:**\n1. Started with template token debugging\n2. Revealed need for pageName column (better organization)\n3. pageName revealed opportunity for page_registry (eliminate duplication)\n4. page_registry enabled Container-as-root standard (clean hierarchy)\n5. Container-as-root simplified sp_hier_structure (no App/Page traversal)\n\n**Each phase built on insights from the previous phase** - organic architecture evolution driven by real problems.\n\n### Metadata Tables as Single Source of Truth\nSeparating **metadata** (page_registry) from **structure** (eventComp_xref) provides:\n- Clean separation of concerns\n- Faster queries (indexed pageID vs hierarchy traversal)\n- Template cloning (copy components + insert registry row)\n- Dynamic navigation (query registry for apps/pages)\n- Validation (context keys, route paths)\n\n### Developer Ergonomics vs User Experience\n**Balance achieved:**\n- pageName: Short technical names (ingrType) for developers\n- pageTitle: Human-readable names (Ingredient Types) for users\n- Both stored in page_registry for appropriate usage\n\n### Phased Migration Strategy\n**Critical for complex schema changes:**\n1. Add new alongside old (page_registry + eventComp_xref)\n2. Establish relationships (pageID FK)\n3. Migrate data incrementally (props, triggers)\n4. Update queries/code (pageLoader, Studio)\n5. Remove old only after validation (delete App/Page entries)\n\nEach phase maintains backward compatibility until the next phase is ready.\n\n### Container-as-Root Standard\n**Insight:** Container is already the semantic root for layout - making it the actual root (self-reference) simplifies:\n- Props/triggers inheritance (Page → Container migration)\n- Hierarchy queries (start at level 0 instead of -1)\n- Template structure (every page looks the same)\n- Rendering logic (no special case for Page vs Container)\n\n---\n\n## Technical Decisions\n\n### 1. Clean Component Names (No Prefixes)\n**Decision:** Use clean names (AddNew) instead of prefixed ({pageName}_AddNew)\n**Rationale:** pageName column makes prefix redundant, cleaner database, better readability\n**Trade-off:** Must use pageID for uniqueness instead of relying on name uniqueness\n\n### 2. Abbreviated pageName Pattern\n**Decision:** Short camelCase names (ingrType, prodBtch, brnd)\n**Rationale:** Developer familiarity, less typing, consistent with context_store keys\n**Benefit:** Routes (/whatsfresh/ingrType) and variables (ingrTypeID) align naturally\n\n### 3. Templates App (Not Admin)\n**Decision:** Renamed admin app to templates for CRUD/appbar/sidebar templates\n**Rationale:** Separation of concerns - templates vs actual admin functionality\n**Future:** Real admin app will be created separately for user/account management\n\n### 4. Recursive CTE (Not Flat Query)\n**Decision:** Keep recursive query for sp_hier_structure despite added complexity\n**Rationale:** Mapping page prototype showed 5-6 levels of nesting - flat query insufficient\n**Benefit:** Provides level and id_path for complex layouts\n\n### 5. pageID in sp_hier_structure Output\n**Decision:** Include pageID in every component result\n**Rationale:** Explicit page ownership, useful for debugging, validation, frontend queries\n\n---\n\n## Files Impacted\n\n### Code Changes\n1. apps/studio/src/utils/pageConfigBuilder/dataFetcher.js - Debug logging\n2. apps/studio/src/utils/pageConfigBuilder/index.js - Debug logging\n3. .shared/commands/summary.md - Added Plan 45 context query\n4. .shared/commands/startSession.md - Already had Plan 45 query (verified)\n\n### SQL Schema\n5. AI/sql/api_wf/procedures/sp_hier_structure.sql - Complete rewrite for pageID-based queries\n6. AI/sql/api_wf/views/vw_hier_components.sql - Updated to include pageID\n7. Database: page_registry table created with 16 entries\n8. Database: eventComp_xref.pageName column populated\n9. Database: Login page Container created (id=78)\n\n---\n\n**Status:** Architecture design complete, ready for Kiro implementation (Plans 47-48)\n**Blocked By:** None - all dependencies resolved\n**Next Session:** Kiro implements Phase 1 (pageLoader.js, IndexedDB v3, Container migrations)","plan_id":45,"subject":"Architecture Evolution: pageName → page_registry → Container-as-Root","to_agent":"any","type":"summary"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_communications","timestamp":"2025-10-25 11:26:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 11:26:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 11:26:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 11:26:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":100.873602,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 11:26:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 11:26:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 11:26:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 11:26:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 11:26:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":220.828901,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 11:26:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 11:26:40"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_communications (plan_id, from_agent, to_agent, type, subject, message, created_at, created_by) VALUES (45, 'claude', 'any', 'summary', 'Architecture Evolution: pageName → page_registry → Container-as-Root', '# Claude Session Summary - 2025-10-25 (Extended)\n\n**Focus:** Complete architectural transformation from template tokens to registry-based component system\n**Primary AI:** Claude\n**Duration:** Extended session (~8 hours of design work)\n\n---\n\n## Major Accomplishments\n\n### 1. CRUD Template Debugging (Session Start)\n- **Root cause identified:** IndexedDB stale data - MySQL props not syncing\n- Added comprehensive logging to TriggerEngine, pageLoader, dataFetcher\n- User solution: Reload page in Studio to sync MySQL → IndexedDB\n\n### 2. pageName Column Migration (Plan 46)\n- User added pageName VARCHAR(100) to eventComp_xref\n- User populated all existing components with pageName\n- Adopted clean naming (AddNew vs {pageName}_AddNew)\n- 4-step recursive population strategy documented\n- Abandoned prefix pattern in favor of clean component names\n\n### 3. page_registry Table Design (Plan 47)\n- **Breakthrough insight:** Eliminate redundant App/Page entries in eventComp_xref\n- Single source of truth for page metadata\n- Schema: appName, pageName, pageTitle, tableName, contextKey, routePath, status\n- 16 pages registered (templates, login, admin, whatsfresh)\n- Supports template status with NULL routePath\n\n### 4. Naming Convention Standardization\n- Abbreviated pageName: ingrType, ingr, prodType, brnd, vndr\n- Context keys: {pageName}ID → ingrTypeID, brndID\n- Routes: /whatsfresh/ingrType\n- Display titles: Ingredient Types, Brands\n- **User preference:** Short technical names for developer ergonomics\n\n### 5. Container-as-Root Standard (Plan 48)\n- **Key decision:** Every page MUST have Container at root\n- Container uses self-reference (parent_id = id)\n- Container inherits Page props and triggers after migration\n- Login page updated with Container (id=78)\n- CRUD template already had Container (id=65)\n\n### 6. sp_hier_structure Rewrite\n- Eliminated App/Page level traversal\n- Simplified to pageID-based queries\n- Recursive CTE starts at Container (level 0)\n- Handles deep nesting (increased limit to 20 levels)\n- Added pageID to output for explicit page ownership\n- Tested successfully with CRUD template and login page\n\n### 7. Studio Navigation Revamp Design\n- PDF export for page_registry documentation\n- Navigation tree from page_registry instead of eventComp_xref\n- Templates section separate from apps\n- Search/filter capabilities\n- Communication created (plan_communications #54)\n\n### 8. Plan Organization\n- **Plan 45:** Parent epic for template architecture\n- **Plan 46:** pageName column migration\n- **Plan 47:** page_registry phased migration\n- **Plan 48:** Container-as-root standard\n- All linked via plan_communications to Plan 45\n- sessionPlan45 query pulls last 30 records from vw_plan45\n\n---\n\n## Statistics\n\n- **Plans Created:** 3 (Plans 46, 47, 48)\n- **Communications:** 3 (Studio nav, session summaries, architecture docs)\n- **Files Modified:** 6 (TriggerEngine, textRenderer, dataFetcher, pageConfigBuilder, summary.md, startSession.md)\n- **SQL Modules:** 2 (sp_hier_structure rewritten, vw_hier_components updated)\n- **Database Tables:** 1 created (page_registry with 16 entries)\n- **Architecture Decisions:** 5 major (pageName, page_registry, Container-as-root, template organization, naming conventions)\n\n---\n\n## Next Steps (Plan 48)\n\n### Immediate (Priority: high)\n1. **Finalize sp_hier_structure:** Deploy rewritten procedure\n2. **Migrate Page props → Container:** Move tableName and page-level props\n3. **Migrate Page triggers → Container:** Move onLoad triggers\n4. **Add Container to remaining pages:** Ensure all pages follow standard\n5. **Update pageLoader.js:** Load pageID into IndexedDB\n6. **Bump IndexedDB schema:** Version 3 with pageID column\n\n### Short-term (Priority: medium)\n1. **Handle App props:** Decide on PORT, routePath, allowedRoles migration\n2. **Delete App/Page entries:** After props/triggers migrated\n3. **Update Studio navigation:** Use page_registry queries\n4. **Template cloning workflow:** Implement comp_name lookup strategy\n\n### Medium-term (Priority: low)\n1. **PDF registry report:** Implement export functionality\n2. **Search/filter pages:** Studio UX enhancement\n3. **Template library UI:** Browse and clone templates\n4. **Composite key CRUD:** Custom pages for prodBtchMap, rcpe\n\n---\n\n## Key Learnings\n\n### Architectural Evolution Pattern\n**Discovery process:**\n1. Started with template token debugging\n2. Revealed need for pageName column (better organization)\n3. pageName revealed opportunity for page_registry (eliminate duplication)\n4. page_registry enabled Container-as-root standard (clean hierarchy)\n5. Container-as-root simplified sp_hier_structure (no App/Page traversal)\n\n**Each phase built on insights from the previous phase** - organic architecture evolution driven by real problems.\n\n### Metadata Tables as Single Source of Truth\nSeparating **metadata** (page_registry) from **structure** (eventComp_xref) provides:\n- Clean separation of concerns\n- Faster queries (indexed pageID vs hierarchy traversal)\n- Template cloning (copy components + insert registry row)\n- Dynamic navigation (query registry for apps/pages)\n- Validation (context keys, route paths)\n\n### Developer Ergonomics vs User Experience\n**Balance achieved:**\n- pageName: Short technical names (ingrType) for developers\n- pageTitle: Human-readable names (Ingredient Types) for users\n- Both stored in page_registry for appropriate usage\n\n### Phased Migration Strategy\n**Critical for complex schema changes:**\n1. Add new alongside old (page_registry + eventComp_xref)\n2. Establish relationships (pageID FK)\n3. Migrate data incrementally (props, triggers)\n4. Update queries/code (pageLoader, Studio)\n5. Remove old only after validation (delete App/Page entries)\n\nEach phase maintains backward compatibility until the next phase is ready.\n\n### Container-as-Root Standard\n**Insight:** Container is already the semantic root for layout - making it the actual root (self-reference) simplifies:\n- Props/triggers inheritance (Page → Container migration)\n- Hierarchy queries (start at level 0 instead of -1)\n- Template structure (every page looks the same)\n- Rendering logic (no special case for Page vs Container)\n\n---\n\n## Technical Decisions\n\n### 1. Clean Component Names (No Prefixes)\n**Decision:** Use clean names (AddNew) instead of prefixed ({pageName}_AddNew)\n**Rationale:** pageName column makes prefix redundant, cleaner database, better readability\n**Trade-off:** Must use pageID for uniqueness instead of relying on name uniqueness\n\n### 2. Abbreviated pageName Pattern\n**Decision:** Short camelCase names (ingrType, prodBtch, brnd)\n**Rationale:** Developer familiarity, less typing, consistent with context_store keys\n**Benefit:** Routes (/whatsfresh/ingrType) and variables (ingrTypeID) align naturally\n\n### 3. Templates App (Not Admin)\n**Decision:** Renamed admin app to templates for CRUD/appbar/sidebar templates\n**Rationale:** Separation of concerns - templates vs actual admin functionality\n**Future:** Real admin app will be created separately for user/account management\n\n### 4. Recursive CTE (Not Flat Query)\n**Decision:** Keep recursive query for sp_hier_structure despite added complexity\n**Rationale:** Mapping page prototype showed 5-6 levels of nesting - flat query insufficient\n**Benefit:** Provides level and id_path for complex layouts\n\n### 5. pageID in sp_hier_structure Output\n**Decision:** Include pageID in every component result\n**Rationale:** Explicit page ownership, useful for debugging, validation, frontend queries\n\n---\n\n## Files Impacted\n\n### Code Changes\n1. apps/studio/src/utils/pageConfigBuilder/dataFetcher.js - Debug logging\n2. apps/studio/src/utils/pageConfigBuilder/index.js - Debug logging\n3. .shared/commands/summary.md - Added Plan 45 context query\n4. .shared/commands/startSession.md - Already had Plan 45 query (verified)\n\n### SQL Schema\n5. AI/sql/api_wf/procedures/sp_hier_structure.sql - Complete rewrite for pageID-based queries\n6. AI/sql/api_wf/views/vw_hier_components.sql - Updated to include pageID\n7. Database: page_registry table created with 16 entries\n8. Database: eventComp_xref.pageName column populated\n9. Database: Login page Container created (id=78)\n\n---\n\n**Status:** Architecture design complete, ready for Kiro implementation (Plans 47-48)\n**Blocked By:** None - all dependencies resolved\n**Next Session:** Kiro implements Phase 1 (pageLoader.js, IndexedDB v3, Container migrations)', NOW(), 'Paul')","timestamp":"2025-10-25 11:26:40"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 11:26:40"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 11:26:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":265.983909,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 11:26:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 11:26:40"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_communications","timestamp":"2025-10-25 11:26:40"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-25 11:26:40"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (591ms)","timestamp":"2025-10-25 11:26:40"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":591.494134,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-25 11:26:40"}
{"body":{"impacts":{"0":{"affectedApps":{"0":"studio"},"changeType":"MODIFY","createdBy":"claude","description":"Added debug logging to getComponentProps\n- Log xref_id and type on entry\n- Log props array from IndexedDB\n- Log final props object returned\n- Helps trace pageName and props loading issues","filePath":"apps/studio/src/utils/pageConfigBuilder/dataFetcher.js"},"1":{"affectedApps":{"0":"studio"},"changeType":"MODIFY","createdBy":"claude","description":"Added debug logging to pageConfig building\n- Log pageProps after getComponentProps\n- Log pageProps keys\n- Log final pageConfig.props after spread\n- Traces props availability in context","filePath":"apps/studio/src/utils/pageConfigBuilder/index.js"},"2":{"affectedApps":{"0":"documentation"},"changeType":"MODIFY","createdBy":"claude","description":"Added Plan 45 context query to session summary\n- Added sessionPlan45 curl command\n- Added note about referencing Plan 45 for WhatsFresh work\n- Ensures AI coordination includes architectural context","filePath":".shared/commands/summary.md"},"3":{"affectedApps":{"0":"database"},"changeType":"MODIFY","createdBy":"claude","description":"Complete rewrite for page_registry architecture\n- Removed App/Page level traversal\n- Changed to pageID-based queries\n- Container self-reference as root (level 0)\n- Recursive CTE for deep nesting (20 levels)\n- Added pageID to output\n- Simplified parent_name logic","filePath":"AI/sql/api_wf/procedures/sp_hier_structure.sql"},"4":{"affectedApps":{"0":"database"},"changeType":"MODIFY","createdBy":"claude","description":"Updated view to include pageID column\n- Added pageID from eventComp_xref\n- Supports new sp_hier_structure queries\n- Enables pageID-based filtering","filePath":"AI/sql/api_wf/views/vw_hier_components.sql"}},"planId":45},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/logImpact","timestamp":"2025-10-25 11:27:00"}
{"level":"http","message":"[logImpact.js] POST /api/logImpact","timestamp":"2025-10-25 11:27:00"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 11:27:00"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 11:27:00"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":468.025746,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 11:27:01"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 11:27:01"}
{"level":"info","message":"[impactLogger.js] Logged 5 impacts","timestamp":"2025-10-25 11:27:01"}
{"level":"info","message":"[logImpact.js] Impact logging completed successfully","timestamp":"2025-10-25 11:27:01"}
{"level":"info","message":"[app.js]  Response: POST /api/logImpact 200 (470ms)","timestamp":"2025-10-25 11:27:01"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-25 12:12:04"}
{"level":"debug","message":"[app.js]  Request","method":"GET","path":"/health","timestamp":"2025-10-25 12:24:27"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/favicon.ico","timestamp":"2025-10-25 12:24:27"}
{"body":{"columns":{"0":"summary_id","1":"session_date","2":"accomplishments","3":"next_steps","4":"created_by"},"limit":2,"method":"SELECT","orderBy":"session_date DESC","table":"api_wf.session_summaries"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 12:26:03"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 12:26:03"}
{"level":"debug","message":"[dmlProcessor.js] Processing SELECT on api_wf.session_summaries","timestamp":"2025-10-25 12:26:03"}
{"code":"MISSING_REQUIRED_FIELDS","level":"error","message":"[execDML.js] DML operation failed: method, table, and data are required","stack":"Error: method, table, and data are required\n    at processDML (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dml/dmlProcessor.js:42:19)\n    at execDML (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execDML.js:13:30)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:157:13)\n    at Route.dispatch (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:117:3)\n    at handle (/home/paul/wf-monorepo-new/node_modules/router/index.js:435:11)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at /home/paul/wf-monorepo-new/node_modules/router/index.js:295:15\n    at processParams (/home/paul/wf-monorepo-new/node_modules/router/index.js:582:12)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/index.js:291:5)","status":400,"timestamp":"2025-10-25 12:26:03"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 400 (1ms)","timestamp":"2025-10-25 12:26:03"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":0.878194,"method":"POST","operation":"http_request","path":"/api/execDML","status":400},"timestamp":"2025-10-25 12:26:03"}
{"body":{"columns":{"0":"plan_id","1":"file_path","2":"change_type","3":"phase","4":"description","5":"status","6":"created_at"},"method":"SELECT","orderBy":"created_at DESC","table":"api_wf.plan_impacts","where":"created_at >= DATE_SUB(NOW(), INTERVAL 24 HOUR)"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 12:26:03"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 12:26:03"}
{"level":"debug","message":"[dmlProcessor.js] Processing SELECT on api_wf.plan_impacts","timestamp":"2025-10-25 12:26:03"}
{"code":"MISSING_REQUIRED_FIELDS","level":"error","message":"[execDML.js] DML operation failed: method, table, and data are required","stack":"Error: method, table, and data are required\n    at processDML (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dml/dmlProcessor.js:42:19)\n    at execDML (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execDML.js:13:30)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:157:13)\n    at Route.dispatch (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:117:3)\n    at handle (/home/paul/wf-monorepo-new/node_modules/router/index.js:435:11)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at /home/paul/wf-monorepo-new/node_modules/router/index.js:295:15\n    at processParams (/home/paul/wf-monorepo-new/node_modules/router/index.js:582:12)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/index.js:291:5)","status":400,"timestamp":"2025-10-25 12:26:03"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 400 (1ms)","timestamp":"2025-10-25 12:26:03"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":0.83455,"method":"POST","operation":"http_request","path":"/api/execDML","status":400},"timestamp":"2025-10-25 12:26:03"}
{"body":{"data":{"columns":{"0":"summary_id","1":"session_date","2":"accomplishments","3":"next_steps","4":"created_by"},"limit":2,"orderBy":"session_date DESC"},"method":"SELECT","table":"api_wf.session_summaries"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 12:26:08"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 12:26:08"}
{"data":{"columns":{"0":"summary_id","1":"session_date","2":"accomplishments","3":"next_steps","4":"created_by"},"limit":2,"orderBy":"session_date DESC"},"level":"debug","message":"[dmlProcessor.js] Processing SELECT on api_wf.session_summaries","timestamp":"2025-10-25 12:26:08"}
{"code":"INVALID_METHOD","level":"error","message":"[execDML.js] DML operation failed: Method must be INSERT, UPDATE, or DELETE. Got: SELECT","stack":"Error: Method must be INSERT, UPDATE, or DELETE. Got: SELECT\n    at processDML (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dml/dmlProcessor.js:50:19)\n    at execDML (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execDML.js:13:30)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:157:13)\n    at Route.dispatch (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:117:3)\n    at handle (/home/paul/wf-monorepo-new/node_modules/router/index.js:435:11)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at /home/paul/wf-monorepo-new/node_modules/router/index.js:295:15\n    at processParams (/home/paul/wf-monorepo-new/node_modules/router/index.js:582:12)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/index.js:291:5)","status":400,"timestamp":"2025-10-25 12:26:08"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 400 (1ms)","timestamp":"2025-10-25 12:26:08"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":0.748255,"method":"POST","operation":"http_request","path":"/api/execDML","status":400},"timestamp":"2025-10-25 12:26:08"}
{"body":{"data":{"columns":{"0":"plan_id","1":"file_path","2":"change_type","3":"phase","4":"description","5":"status","6":"created_at"},"orderBy":"created_at DESC","where":"created_at >= DATE_SUB(NOW(), INTERVAL 24 HOUR)"},"method":"SELECT","table":"api_wf.plan_impacts"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 12:26:08"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 12:26:08"}
{"data":{"columns":{"0":"plan_id","1":"file_path","2":"change_type","3":"phase","4":"description","5":"status","6":"created_at"},"orderBy":"created_at DESC","where":"created_at >= DATE_SUB(NOW(), INTERVAL 24 HOUR)"},"level":"debug","message":"[dmlProcessor.js] Processing SELECT on api_wf.plan_impacts","timestamp":"2025-10-25 12:26:08"}
{"code":"INVALID_METHOD","level":"error","message":"[execDML.js] DML operation failed: Method must be INSERT, UPDATE, or DELETE. Got: SELECT","stack":"Error: Method must be INSERT, UPDATE, or DELETE. Got: SELECT\n    at processDML (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dml/dmlProcessor.js:50:19)\n    at execDML (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execDML.js:13:30)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:157:13)\n    at Route.dispatch (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:117:3)\n    at handle (/home/paul/wf-monorepo-new/node_modules/router/index.js:435:11)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at /home/paul/wf-monorepo-new/node_modules/router/index.js:295:15\n    at processParams (/home/paul/wf-monorepo-new/node_modules/router/index.js:582:12)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/index.js:291:5)","status":400,"timestamp":"2025-10-25 12:26:08"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 400 (1ms)","timestamp":"2025-10-25 12:26:08"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":0.958432,"method":"POST","operation":"http_request","path":"/api/execDML","status":400},"timestamp":"2025-10-25 12:26:08"}
{"body":{"eventSQLId":"sessionRecentList"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 12:26:17"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 12:26:17"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: sessionRecentList","timestamp":"2025-10-25 12:26:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 12:26:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 12:26:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 12:26:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":214.047908,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 12:26:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 12:26:18"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: sessionRecentList (ID: 30)","timestamp":"2025-10-25 12:26:18"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT a.id, a.subject, a.message, a.from_agent, a.to_agent, a.created_at \r\nFROM   api_wf.plan_communications a\r\nWHERE a.type = 'summary'\r\nORDER BY a.created_at DESC \r\nlimit 2","timestamp":"2025-10-25 12:26:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 12:26:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 12:26:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-25 12:26:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":114.916217,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 12:26:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 12:26:18"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: sessionRecentList (ID: 30)","timestamp":"2025-10-25 12:26:18"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (330ms)","timestamp":"2025-10-25 12:26:18"}
{"body":{"eventSQLId":"sessionRecentList"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 12:27:25"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: sessionRecentList","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":175.353728,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: sessionRecentList (ID: 30)","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT a.id, a.subject, a.message, a.from_agent, a.to_agent, a.created_at \r\nFROM   api_wf.plan_communications a\r\nWHERE a.type = 'summary'\r\nORDER BY a.created_at DESC \r\nlimit 2","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":84.942828,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: sessionRecentList (ID: 30)","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (262ms)","timestamp":"2025-10-25 12:27:25"}
{"body":{"eventSQLId":"recentImpactList"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 12:27:25"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: recentImpactList","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":107.844235,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: recentImpactList (ID: 24)","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select plan_id, fileName, t.fileFolder, t.change_type, description, batch_id, created_at, created_by\nfrom api_wf.plan_impacts t\nWHERE created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)\nORDER BY created_at DESC\nLIMIT 30","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 30","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":102.205703,"method":"GET","operation":"database_query","rowCount":30,"success":true},"timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: recentImpactList (ID: 24)","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (212ms)","timestamp":"2025-10-25 12:27:25"}
{"body":{"eventSQLId":"sessionPlan45"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 12:27:25"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: sessionPlan45","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":137.642219,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: sessionPlan45 (ID: 31)","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select * \r\nfrom api_wf.vw_plan45\r\nlimit 30","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 26","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":88.470443,"method":"GET","operation":"database_query","rowCount":26,"success":true},"timestamp":"2025-10-25 12:27:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: sessionPlan45 (ID: 31)","timestamp":"2025-10-25 12:27:25"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (228ms)","timestamp":"2025-10-25 12:27:25"}
{"body":{"eventSQLId":"pageRegistryList"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 12:59:27"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 12:59:27"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: pageRegistryList","timestamp":"2025-10-25 12:59:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 12:59:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 12:59:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 12:59:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":235.711847,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 12:59:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 12:59:28"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 404 (237ms)","timestamp":"2025-10-25 12:59:28"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":237.155233,"method":"POST","operation":"http_request","path":"/api/execEventType","status":404},"timestamp":"2025-10-25 12:59:28"}
{"body":{"query":"SELECT * FROM page_registry LIMIT 5"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/query","timestamp":"2025-10-25 12:59:32"}
{"level":"warn","message":"[server.js] Route not found: POST /api/query","timestamp":"2025-10-25 12:59:32"}
{"level":"info","message":"[app.js]  Response: POST /api/query 404 (0ms)","timestamp":"2025-10-25 12:59:32"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":0.420531,"method":"POST","operation":"http_request","path":"/api/query","status":404},"timestamp":"2025-10-25 12:59:32"}
{"body":{"eventSQLId":"tableList"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 12:59:56"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 12:59:56"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: tableList","timestamp":"2025-10-25 12:59:56"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 12:59:56"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 12:59:56"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 12:59:57"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":157.056208,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 12:59:57"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 12:59:57"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 404 (158ms)","timestamp":"2025-10-25 12:59:57"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":158.125835,"method":"POST","operation":"http_request","path":"/api/execEventType","status":404},"timestamp":"2025-10-25 12:59:57"}
{"body":{"eventSQLId":"appList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:23"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: appList","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:23"}
{"body":{"eventSQLId":"eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:23"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: eventTypeList","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:23"}
{"body":{"eventSQLId":"qrySqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:23"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: qrySqlList","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:23"}
{"body":{"eventSQLId":"triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:23"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: triggerList","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":45.522163,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: appList (ID: 1)","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT xref_id, comp_name\r\nFROM api_wf.vw_hier_components vhc \r\nWHERE parent_id = 70\r\nAND   comp_type = 'App'\r\nAND   xref_id <> parent_id  -- exclude root.","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":79.324832,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: eventTypeList (ID: 9)","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":35.373943,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: appList (ID: 1)","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (82ms)","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":79.910705,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: qrySqlList (ID: 17)","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 31","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":75.265339,"method":"GET","operation":"database_query","rowCount":31,"success":true},"timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: qrySqlList (ID: 17)","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (156ms)","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":78.07078,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: eventTypeList (ID: 9)","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (158ms)","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":290.477754,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: triggerList (ID: 16)","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":68.605439,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-25 13:00:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: triggerList (ID: 16)","timestamp":"2025-10-25 13:00:23"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (361ms)","timestamp":"2025-10-25 13:00:23"}
{"body":{"eventSQLId":"appList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:27"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: appList","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:27"}
{"body":{"eventSQLId":"eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:27"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: eventTypeList","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:27"}
{"body":{"eventSQLId":"qrySqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:27"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: qrySqlList","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:27"}
{"body":{"eventSQLId":"triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:27"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: triggerList","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":41.623824,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: eventTypeList (ID: 9)","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":44.169545,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: appList (ID: 1)","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT xref_id, comp_name\r\nFROM api_wf.vw_hier_components vhc \r\nWHERE parent_id = 70\r\nAND   comp_type = 'App'\r\nAND   xref_id <> parent_id  -- exclude root.","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.627773,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: eventTypeList (ID: 9)","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (76ms)","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":72.976638,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: qrySqlList (ID: 17)","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":35.485893,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: appList (ID: 1)","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (81ms)","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":75.595416,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: triggerList (ID: 16)","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 31","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":62.594048,"method":"GET","operation":"database_query","rowCount":31,"success":true},"timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: qrySqlList (ID: 17)","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (137ms)","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":240.471324,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-25 13:00:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: triggerList (ID: 16)","timestamp":"2025-10-25 13:00:27"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (317ms)","timestamp":"2025-10-25 13:00:27"}
{"body":{"eventSQLId":"appList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:31"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: appList","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:31"}
{"body":{"eventSQLId":"eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:31"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: eventTypeList","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:31"}
{"body":{"eventSQLId":"qrySqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:31"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: qrySqlList","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:31"}
{"body":{"eventSQLId":"triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:31"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: triggerList","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":35.642113,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: appList (ID: 1)","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT xref_id, comp_name\r\nFROM api_wf.vw_hier_components vhc \r\nWHERE parent_id = 70\r\nAND   comp_type = 'App'\r\nAND   xref_id <> parent_id  -- exclude root.","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.772037,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: eventTypeList (ID: 9)","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":36.953351,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: qrySqlList (ID: 17)","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":33.028914,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: triggerList (ID: 16)","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":30.962574,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: appList (ID: 1)","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (68ms)","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.494624,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: eventTypeList (ID: 9)","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (71ms)","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 31","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":37.303998,"method":"GET","operation":"database_query","rowCount":31,"success":true},"timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: qrySqlList (ID: 17)","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (78ms)","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":37.864307,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-25 13:00:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: triggerList (ID: 16)","timestamp":"2025-10-25 13:00:31"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (73ms)","timestamp":"2025-10-25 13:00:31"}
{"body":{"eventSQLId":"appList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:36"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: appList","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:36"}
{"body":{"eventSQLId":"eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:36"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: eventTypeList","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:36"}
{"body":{"eventSQLId":"qrySqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:36"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: qrySqlList","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:36"}
{"body":{"eventSQLId":"triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:36"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: triggerList","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":49.507587,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: appList (ID: 1)","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT xref_id, comp_name\r\nFROM api_wf.vw_hier_components vhc \r\nWHERE parent_id = 70\r\nAND   comp_type = 'App'\r\nAND   xref_id <> parent_id  -- exclude root.","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":35.210326,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: triggerList (ID: 16)","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":48.730356,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: eventTypeList (ID: 9)","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":44.452896,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: qrySqlList (ID: 17)","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":50.974114,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: appList (ID: 1)","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (103ms)","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":48.461467,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: eventTypeList (ID: 9)","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (101ms)","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 31","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":48.542392,"method":"GET","operation":"database_query","rowCount":31,"success":true},"timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: qrySqlList (ID: 17)","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (97ms)","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":56.298622,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-25 13:00:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: triggerList (ID: 16)","timestamp":"2025-10-25 13:00:36"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (94ms)","timestamp":"2025-10-25 13:00:36"}
{"body":{"eventSQLId":"appList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:51"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: appList","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:51"}
{"body":{"eventSQLId":"eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:51"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: eventTypeList","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:51"}
{"body":{"eventSQLId":"qrySqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:51"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: qrySqlList","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:51"}
{"body":{"eventSQLId":"triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:00:51"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: triggerList","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":258.9036,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: appList (ID: 1)","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT xref_id, comp_name\r\nFROM api_wf.vw_hier_components vhc \r\nWHERE parent_id = 70\r\nAND   comp_type = 'App'\r\nAND   xref_id <> parent_id  -- exclude root.","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":252.263887,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: qrySqlList (ID: 17)","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":252.925445,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: triggerList (ID: 16)","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":257.655921,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: eventTypeList (ID: 9)","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":33.945304,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: appList (ID: 1)","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (295ms)","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.38058,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: triggerList (ID: 16)","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (288ms)","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 31","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":37.47127,"method":"GET","operation":"database_query","rowCount":31,"success":true},"timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: qrySqlList (ID: 17)","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (291ms)","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":35.607834,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-25 13:00:51"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: eventTypeList (ID: 9)","timestamp":"2025-10-25 13:00:51"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (296ms)","timestamp":"2025-10-25 13:00:51"}
{"body":{"eventSQLId":"appList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:01:00"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: appList","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:00"}
{"body":{"eventSQLId":"eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:01:00"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: eventTypeList","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:00"}
{"body":{"eventSQLId":"qrySqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:01:00"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: qrySqlList","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:00"}
{"body":{"eventSQLId":"triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:01:00"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: triggerList","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":37.285909,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: appList (ID: 1)","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT xref_id, comp_name\r\nFROM api_wf.vw_hier_components vhc \r\nWHERE parent_id = 70\r\nAND   comp_type = 'App'\r\nAND   xref_id <> parent_id  -- exclude root.","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.012363,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: qrySqlList (ID: 17)","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":40.275175,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: triggerList (ID: 16)","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":67.05799,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: eventTypeList (ID: 9)","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":33.650582,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: appList (ID: 1)","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (73ms)","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":74.898067,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: triggerList (ID: 16)","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (117ms)","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 31","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":83.749782,"method":"GET","operation":"database_query","rowCount":31,"success":true},"timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: qrySqlList (ID: 17)","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (129ms)","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":248.599521,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-25 13:01:00"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: eventTypeList (ID: 9)","timestamp":"2025-10-25 13:01:00"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (317ms)","timestamp":"2025-10-25 13:01:00"}
{"body":{"eventSQLId":"appList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:01:08"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: appList","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:08"}
{"body":{"eventSQLId":"eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:01:08"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: eventTypeList","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:08"}
{"body":{"eventSQLId":"qrySqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:01:08"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: qrySqlList","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:08"}
{"body":{"eventSQLId":"triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 13:01:08"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: triggerList","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":45.991659,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: appList (ID: 1)","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT xref_id, comp_name\r\nFROM api_wf.vw_hier_components vhc \r\nWHERE parent_id = 70\r\nAND   comp_type = 'App'\r\nAND   xref_id <> parent_id  -- exclude root.","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":38.40403,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: eventTypeList (ID: 9)","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":37.548039,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: qrySqlList (ID: 17)","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.32533,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: triggerList (ID: 16)","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 31","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":135.28453,"method":"GET","operation":"database_query","rowCount":31,"success":true},"timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: qrySqlList (ID: 17)","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (177ms)","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":132.910666,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: triggerList (ID: 16)","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (169ms)","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":154.626345,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: appList (ID: 1)","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (203ms)","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":156.001585,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-25 13:01:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: eventTypeList (ID: 9)","timestamp":"2025-10-25 13:01:08"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (201ms)","timestamp":"2025-10-25 13:01:08"}
{"body":{"data":{"change_type":"MODIFY","description":"Reset to v1 schema with page_registry\n- Added pageID back to eventComp_xref\n- Added page_registry table (id, pageName, appName)\n- Removed obsolete comments about pageID removal","file_path":"apps/studio/src/db/versions/v01.js","phase":"development","plan_id":48,"status":"completed","userID":"claude"},"method":"INSERT","table":"api_wf.plan_impacts"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 13:01:25"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 13:01:25"}
{"data":{"change_type":"MODIFY","description":"Reset to v1 schema with page_registry\n- Added pageID back to eventComp_xref\n- Added page_registry table (id, pageName, appName)\n- Removed obsolete comments about pageID removal","file_path":"apps/studio/src/db/versions/v01.js","phase":"development","plan_id":48,"status":"completed","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_impacts","timestamp":"2025-10-25 13:01:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:01:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":262.940625,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:01:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:01:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":147.34907,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:01:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:26"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_impacts (plan_id, file_path, change_type, phase, description, status, created_at, created_by) VALUES (48, 'apps/studio/src/db/versions/v01.js', 'MODIFY', 'development', 'Reset to v1 schema with page_registry\n- Added pageID back to eventComp_xref\n- Added page_registry table (id, pageName, appName)\n- Removed obsolete comments about pageID removal', 'completed', NOW(), 'Paul')","timestamp":"2025-10-25 13:01:26"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 13:01:26"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 13:01:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":362.491378,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 13:01:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:26"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_impacts","timestamp":"2025-10-25 13:01:26"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-25 13:01:26"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (775ms)","timestamp":"2025-10-25 13:01:26"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":774.671838,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-25 13:01:26"}
{"body":{"data":{"change_type":"MODIFY","description":"Reset IndexedDB to version 1\n- Changed from version 2 to version 1\n- Added page_registry to clearAllData and exportAllData\n- Fresh start for page_registry architecture","file_path":"apps/studio/src/db/studioDb.js","phase":"development","plan_id":48,"status":"completed","userID":"claude"},"method":"INSERT","table":"api_wf.plan_impacts"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 13:01:26"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 13:01:26"}
{"data":{"change_type":"MODIFY","description":"Reset IndexedDB to version 1\n- Changed from version 2 to version 1\n- Added page_registry to clearAllData and exportAllData\n- Fresh start for page_registry architecture","file_path":"apps/studio/src/db/studioDb.js","phase":"development","plan_id":48,"status":"completed","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_impacts","timestamp":"2025-10-25 13:01:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:01:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":143.457447,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:01:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:01:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":39.923222,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:01:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:26"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_impacts (plan_id, file_path, change_type, phase, description, status, created_at, created_by) VALUES (48, 'apps/studio/src/db/studioDb.js', 'MODIFY', 'development', 'Reset IndexedDB to version 1\n- Changed from version 2 to version 1\n- Added page_registry to clearAllData and exportAllData\n- Fresh start for page_registry architecture', 'completed', NOW(), 'Paul')","timestamp":"2025-10-25 13:01:26"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 13:01:26"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 13:01:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":513.170665,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 13:01:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:27"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_impacts","timestamp":"2025-10-25 13:01:27"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-25 13:01:27"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (700ms)","timestamp":"2025-10-25 13:01:27"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":700.004119,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-25 13:01:27"}
{"body":{"data":{"change_type":"MODIFY","description":"Load page_registry from MySQL into IndexedDB\n- Fetch page_registry record using pageRegistryDetail event\n- Store in IndexedDB page_registry table\n- Include pageID when adding components\n- Clear page_registry in clearPageData","file_path":"apps/studio/src/utils/pageLoader.js","phase":"development","plan_id":48,"status":"completed","userID":"claude"},"method":"INSERT","table":"api_wf.plan_impacts"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 13:01:27"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 13:01:27"}
{"data":{"change_type":"MODIFY","description":"Load page_registry from MySQL into IndexedDB\n- Fetch page_registry record using pageRegistryDetail event\n- Store in IndexedDB page_registry table\n- Include pageID when adding components\n- Clear page_registry in clearPageData","file_path":"apps/studio/src/utils/pageLoader.js","phase":"development","plan_id":48,"status":"completed","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_impacts","timestamp":"2025-10-25 13:01:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:01:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":101.520082,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:01:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 13:01:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 13:01:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 13:01:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":36.710317,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 13:01:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:27"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_impacts (plan_id, file_path, change_type, phase, description, status, created_at, created_by) VALUES (48, 'apps/studio/src/utils/pageLoader.js', 'MODIFY', 'development', 'Load page_registry from MySQL into IndexedDB\n- Fetch page_registry record using pageRegistryDetail event\n- Store in IndexedDB page_registry table\n- Include pageID when adding components\n- Clear page_registry in clearPageData', 'completed', NOW(), 'Paul')","timestamp":"2025-10-25 13:01:27"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 13:01:27"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 13:01:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":361.224056,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 13:01:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 13:01:28"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_impacts","timestamp":"2025-10-25 13:01:28"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-25 13:01:28"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (502ms)","timestamp":"2025-10-25 13:01:28"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":502.207317,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-25 13:01:28"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-25 13:12:04"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-25 14:12:05"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-25 16:11:57"}
{"body":{"eventSQLId":"pageRegistryDetail","pageID":1},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:19:44"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:19:44"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: pageRegistryDetail","timestamp":"2025-10-25 16:19:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:19:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:19:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 16:19:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":187.424602,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 16:19:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:19:44"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 404 (189ms)","timestamp":"2025-10-25 16:19:44"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":188.540512,"method":"POST","operation":"http_request","path":"/api/execEventType","status":404},"timestamp":"2025-10-25 16:19:44"}
{"body":{"eventSQLId":"eventSQLList"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:19:49"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:19:49"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: eventSQLList","timestamp":"2025-10-25 16:19:49"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:19:49"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:19:49"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 16:19:49"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":224.533362,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 16:19:49"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:19:49"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 404 (226ms)","timestamp":"2025-10-25 16:19:49"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":225.936934,"method":"POST","operation":"http_request","path":"/api/execEventType","status":404},"timestamp":"2025-10-25 16:19:49"}
{"body":{"eventSQLId":"eventSQLList"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:19:53"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:19:53"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: eventSQLList","timestamp":"2025-10-25 16:19:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:19:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:19:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 16:19:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":236.976395,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 16:19:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:19:53"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 404 (238ms)","timestamp":"2025-10-25 16:19:53"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":238.020301,"method":"POST","operation":"http_request","path":"/api/execEventType","status":404},"timestamp":"2025-10-25 16:19:53"}
{"body":{"data":{"description":"Get single page_registry record by pageID","qryName":"pageRegistryDetail","qrySQL":"SELECT id, appName, pageName, pageTitle, tableName, tableID, contextKey, routePath, status FROM page_registry WHERE id = :pageID","userID":"claude"},"method":"INSERT","table":"api_wf.eventSQL"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 16:20:39"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 16:20:39"}
{"data":{"description":"Get single page_registry record by pageID","qryName":"pageRegistryDetail","qrySQL":"SELECT id, appName, pageName, pageTitle, tableName, tableID, contextKey, routePath, status FROM page_registry WHERE id = :pageID","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.eventSQL","timestamp":"2025-10-25 16:20:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:20:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:20:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:20:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":408.936277,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:20:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:20:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:20:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:20:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:20:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":36.541955,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:20:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:20:39"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.eventSQL (qryName, qrySQL, description, created_at, created_by) VALUES ('pageRegistryDetail', 'SELECT id, appName, pageName, pageTitle, tableName, tableID, contextKey, routePath, status FROM page_registry WHERE id = :pageID', 'Get single page_registry record by pageID', NOW(), 'Paul')","timestamp":"2025-10-25 16:20:39"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 16:20:39"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 16:20:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":551.913258,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 16:20:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:20:40"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.eventSQL","timestamp":"2025-10-25 16:20:40"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-25 16:20:40"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (1000ms)","timestamp":"2025-10-25 16:20:40"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":999.631581,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-25 16:20:40"}
{"body":{"eventSQLId":"pageRegistryDetail","pageID":1},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:20:44"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:20:44"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: pageRegistryDetail","timestamp":"2025-10-25 16:20:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:20:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:20:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:20:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":77.098933,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:20:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:20:44"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: pageRegistryDetail (ID: 33)","timestamp":"2025-10-25 16:20:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:20:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:20:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:20:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":203.57871,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:20:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:20:44"}
{"level":"debug","message":"[execEventType.js] Resolved from context :pageID → 64","timestamp":"2025-10-25 16:20:44"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, appName, pageName, pageTitle, tableName, tableID, contextKey, routePath, status FROM page_registry WHERE id = 64","timestamp":"2025-10-25 16:20:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:20:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:20:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":33.08577,"errorCode":"ER_NO_SUCH_TABLE","errorType":"Error","method":"GET","operation":"database_query","success":false},"timestamp":"2025-10-25 16:20:44"}
{"code":"ER_NO_SUCH_TABLE","errno":1146,"level":"error","message":"Table 'whatsfresh.page_registry' doesn't exist","sql":"SELECT id, appName, pageName, pageTitle, tableName, tableID, contextKey, routePath, status FROM page_registry WHERE id = 64","sqlMessage":"Table 'whatsfresh.page_registry' doesn't exist","sqlState":"42S02","stack":"Error: Table 'whatsfresh.page_registry' doesn't exist\n    at PromisePoolConnection.execute (/home/paul/wf-monorepo-new/node_modules/mysql2/promise.js:111:22)\n    at executeQuery (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dbUtils.js:61:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async execEventType (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execEventType.js:118:20)","timestamp":"2025-10-25 16:20:44"}
{"level":"error","message":"[dbUtils.js] Query: ********","timestamp":"2025-10-25 16:20:44"}
{"level":"error","message":"[dbUtils.js] Stack trace: Error\n    at executeQuery (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dbUtils.js:92:50)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async execEventType (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execEventType.js:118:20)","timestamp":"2025-10-25 16:20:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:20:44"}
{"code":"ER_NO_SUCH_TABLE","errno":1146,"level":"error","message":"Table 'whatsfresh.page_registry' doesn't exist","sql":"SELECT id, appName, pageName, pageTitle, tableName, tableID, contextKey, routePath, status FROM page_registry WHERE id = 64","sqlMessage":"Table 'whatsfresh.page_registry' doesn't exist","sqlState":"42S02","stack":"Error: Table 'whatsfresh.page_registry' doesn't exist\n    at PromisePoolConnection.execute (/home/paul/wf-monorepo-new/node_modules/mysql2/promise.js:111:22)\n    at executeQuery (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dbUtils.js:61:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async execEventType (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execEventType.js:118:20)","timestamp":"2025-10-25 16:20:44"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 500 (317ms)","timestamp":"2025-10-25 16:20:44"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":316.727307,"method":"POST","operation":"http_request","path":"/api/execEventType","status":500},"timestamp":"2025-10-25 16:20:44"}
{"body":{"data":{"change_type":"MODIFY","description":"Updated to use PageRegDtl query for page_registry loading","file_path":"apps/studio/src/utils/pageLoader.js","phase":"development","plan_id":48,"status":"completed","userID":"claude"},"method":"INSERT","table":"api_wf.plan_impacts"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 16:24:19"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 16:24:19"}
{"data":{"change_type":"MODIFY","description":"Updated to use PageRegDtl query for page_registry loading","file_path":"apps/studio/src/utils/pageLoader.js","phase":"development","plan_id":48,"status":"completed","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_impacts","timestamp":"2025-10-25 16:24:19"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:24:19"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:24:19"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:24:19"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":74.548118,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:24:19"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:24:19"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:24:19"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:24:19"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:24:19"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":39.137699,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:24:19"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:24:19"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_impacts (plan_id, file_path, change_type, phase, description, status, created_at, created_by) VALUES (48, 'apps/studio/src/utils/pageLoader.js', 'MODIFY', 'development', 'Updated to use PageRegDtl query for page_registry loading', 'completed', NOW(), 'Paul')","timestamp":"2025-10-25 16:24:19"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 16:24:19"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 16:24:19"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":573.693037,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 16:24:19"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:24:19"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_impacts","timestamp":"2025-10-25 16:24:19"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-25 16:24:19"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (690ms)","timestamp":"2025-10-25 16:24:19"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":690.166801,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-25 16:24:19"}
{"body":{"eventSQLId":"PageRegDtl","pageID":1},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:25:35"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:25:35"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: PageRegDtl","timestamp":"2025-10-25 16:25:35"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:25:35"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:25:35"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:25:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":201.622589,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:25:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:25:36"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: PageRegDtl (ID: 34)","timestamp":"2025-10-25 16:25:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:25:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:25:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:25:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":37.499384,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:25:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:25:36"}
{"level":"debug","message":"[execEventType.js] Resolved from context :pageID → 64","timestamp":"2025-10-25 16:25:36"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  page_registry pr \r\nwhere id = 64","timestamp":"2025-10-25 16:25:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:25:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:25:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":138.588049,"errorCode":"ER_NO_SUCH_TABLE","errorType":"Error","method":"GET","operation":"database_query","success":false},"timestamp":"2025-10-25 16:25:36"}
{"code":"ER_NO_SUCH_TABLE","errno":1146,"level":"error","message":"Table 'whatsfresh.page_registry' doesn't exist","sql":"select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  page_registry pr \r\nwhere id = 64","sqlMessage":"Table 'whatsfresh.page_registry' doesn't exist","sqlState":"42S02","stack":"Error: Table 'whatsfresh.page_registry' doesn't exist\n    at PromisePoolConnection.execute (/home/paul/wf-monorepo-new/node_modules/mysql2/promise.js:111:22)\n    at executeQuery (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dbUtils.js:61:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async execEventType (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execEventType.js:118:20)","timestamp":"2025-10-25 16:25:36"}
{"level":"error","message":"[dbUtils.js] Query: ********","timestamp":"2025-10-25 16:25:36"}
{"level":"error","message":"[dbUtils.js] Stack trace: Error\n    at executeQuery (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dbUtils.js:92:50)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async execEventType (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execEventType.js:118:20)","timestamp":"2025-10-25 16:25:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:25:36"}
{"code":"ER_NO_SUCH_TABLE","errno":1146,"level":"error","message":"Table 'whatsfresh.page_registry' doesn't exist","sql":"select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  page_registry pr \r\nwhere id = 64","sqlMessage":"Table 'whatsfresh.page_registry' doesn't exist","sqlState":"42S02","stack":"Error: Table 'whatsfresh.page_registry' doesn't exist\n    at PromisePoolConnection.execute (/home/paul/wf-monorepo-new/node_modules/mysql2/promise.js:111:22)\n    at executeQuery (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dbUtils.js:61:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async execEventType (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execEventType.js:118:20)","timestamp":"2025-10-25 16:25:36"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 500 (379ms)","timestamp":"2025-10-25 16:25:36"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":379.415002,"method":"POST","operation":"http_request","path":"/api/execEventType","status":500},"timestamp":"2025-10-25 16:25:36"}
{"body":{"eventSQLId":"PageRegDtl","pageID":1},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:25:44"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:25:44"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: PageRegDtl","timestamp":"2025-10-25 16:25:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:25:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:25:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:25:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":204.683759,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:25:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:25:44"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: PageRegDtl (ID: 34)","timestamp":"2025-10-25 16:25:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:25:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:25:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:25:45"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":38.879082,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:25:45"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:25:45"}
{"level":"debug","message":"[execEventType.js] Resolved from context :pageID → 64","timestamp":"2025-10-25 16:25:45"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  page_registry pr \r\nwhere id = 64","timestamp":"2025-10-25 16:25:45"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:25:45"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:25:45"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":39.86361,"errorCode":"ER_NO_SUCH_TABLE","errorType":"Error","method":"GET","operation":"database_query","success":false},"timestamp":"2025-10-25 16:25:45"}
{"code":"ER_NO_SUCH_TABLE","errno":1146,"level":"error","message":"Table 'whatsfresh.page_registry' doesn't exist","sql":"select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  page_registry pr \r\nwhere id = 64","sqlMessage":"Table 'whatsfresh.page_registry' doesn't exist","sqlState":"42S02","stack":"Error: Table 'whatsfresh.page_registry' doesn't exist\n    at PromisePoolConnection.execute (/home/paul/wf-monorepo-new/node_modules/mysql2/promise.js:111:22)\n    at executeQuery (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dbUtils.js:61:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async execEventType (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execEventType.js:118:20)","timestamp":"2025-10-25 16:25:45"}
{"level":"error","message":"[dbUtils.js] Query: ********","timestamp":"2025-10-25 16:25:45"}
{"level":"error","message":"[dbUtils.js] Stack trace: Error\n    at executeQuery (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dbUtils.js:92:50)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async execEventType (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execEventType.js:118:20)","timestamp":"2025-10-25 16:25:45"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:25:45"}
{"code":"ER_NO_SUCH_TABLE","errno":1146,"level":"error","message":"Table 'whatsfresh.page_registry' doesn't exist","sql":"select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  page_registry pr \r\nwhere id = 64","sqlMessage":"Table 'whatsfresh.page_registry' doesn't exist","sqlState":"42S02","stack":"Error: Table 'whatsfresh.page_registry' doesn't exist\n    at PromisePoolConnection.execute (/home/paul/wf-monorepo-new/node_modules/mysql2/promise.js:111:22)\n    at executeQuery (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dbUtils.js:61:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async execEventType (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execEventType.js:118:20)","timestamp":"2025-10-25 16:25:45"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 500 (285ms)","timestamp":"2025-10-25 16:25:45"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":285.411726,"method":"POST","operation":"http_request","path":"/api/execEventType","status":500},"timestamp":"2025-10-25 16:25:45"}
{"body":{"eventSQLId":"PageRegDtl","pageID":1},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:26:26"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:26:26"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: PageRegDtl","timestamp":"2025-10-25 16:26:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:26:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:26:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:26:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":160.005582,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:26:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:26:27"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: PageRegDtl (ID: 34)","timestamp":"2025-10-25 16:26:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:26:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:26:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:26:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":102.681037,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:26:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:26:27"}
{"level":"debug","message":"[execEventType.js] Resolved from context :pageID → 64","timestamp":"2025-10-25 16:26:27"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  api_wf.page_registry pr \r\nwhere id = 64","timestamp":"2025-10-25 16:26:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:26:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:26:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 16:26:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":204.406054,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 16:26:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:26:27"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: PageRegDtl (ID: 34)","timestamp":"2025-10-25 16:26:27"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (469ms)","timestamp":"2025-10-25 16:26:27"}
{"body":{"eventSQLId":"pageRegList"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:26:31"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:26:31"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: pageRegList","timestamp":"2025-10-25 16:26:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:26:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:26:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:26:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":159.388755,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:26:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:26:31"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: pageRegList (ID: 32)","timestamp":"2025-10-25 16:26:31"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  api_wf.page_registry pr \r\norder by appName, pageName","timestamp":"2025-10-25 16:26:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:26:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:26:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 17","timestamp":"2025-10-25 16:26:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":100.793886,"method":"GET","operation":"database_query","rowCount":17,"success":true},"timestamp":"2025-10-25 16:26:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:26:31"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: pageRegList (ID: 32)","timestamp":"2025-10-25 16:26:31"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (262ms)","timestamp":"2025-10-25 16:26:31"}
{"body":{"eventSQLId":"PageRegDtl","pageID":12},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:26:36"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:26:36"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: PageRegDtl","timestamp":"2025-10-25 16:26:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:26:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:26:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:26:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":107.35431,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:26:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:26:36"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: PageRegDtl (ID: 34)","timestamp":"2025-10-25 16:26:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:26:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:26:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:26:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":104.600504,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:26:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:26:36"}
{"level":"debug","message":"[execEventType.js] Resolved from context :pageID → 64","timestamp":"2025-10-25 16:26:36"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  api_wf.page_registry pr \r\nwhere id = 64","timestamp":"2025-10-25 16:26:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:26:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:26:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 16:26:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":93.977674,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 16:26:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:26:36"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: PageRegDtl (ID: 34)","timestamp":"2025-10-25 16:26:36"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (308ms)","timestamp":"2025-10-25 16:26:36"}
{"body":{"eventSQLId":"eventSQLDtl","eventSQLId_param":34},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:26:42"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:26:42"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: eventSQLDtl","timestamp":"2025-10-25 16:26:42"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:26:42"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:26:42"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 16:26:42"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":204.694398,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 16:26:42"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:26:42"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 404 (205ms)","timestamp":"2025-10-25 16:26:42"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":205.373981,"method":"POST","operation":"http_request","path":"/api/execEventType","status":404},"timestamp":"2025-10-25 16:26:42"}
{"body":{"eventSQLId":"PageRegDtl","pageID":12},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:27:33"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:27:33"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: PageRegDtl","timestamp":"2025-10-25 16:27:33"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:27:33"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:27:33"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:27:33"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":181.746759,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:27:33"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:27:33"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: PageRegDtl (ID: 34)","timestamp":"2025-10-25 16:27:33"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:27:33"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:27:33"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:27:33"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":35.698093,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:27:33"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:27:33"}
{"level":"debug","message":"[execEventType.js] Resolved from context :pageID → 64","timestamp":"2025-10-25 16:27:33"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  api_wf.page_registry pr \r\nwhere id = 64","timestamp":"2025-10-25 16:27:33"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:27:33"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:27:33"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 16:27:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":88.730977,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 16:27:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:27:34"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: PageRegDtl (ID: 34)","timestamp":"2025-10-25 16:27:34"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (308ms)","timestamp":"2025-10-25 16:27:34"}
{"body":{"eventSQLId":"PageRegDtl","pageID":"12"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:27:38"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:27:38"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: PageRegDtl","timestamp":"2025-10-25 16:27:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:27:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:27:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:27:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":43.075457,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:27:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:27:38"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: PageRegDtl (ID: 34)","timestamp":"2025-10-25 16:27:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:27:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:27:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:27:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":278.568299,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:27:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:27:38"}
{"level":"debug","message":"[execEventType.js] Resolved from context :pageID → 64","timestamp":"2025-10-25 16:27:38"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  api_wf.page_registry pr \r\nwhere id = 64","timestamp":"2025-10-25 16:27:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:27:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:27:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-25 16:27:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":38.939011,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-25 16:27:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:27:38"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: PageRegDtl (ID: 34)","timestamp":"2025-10-25 16:27:38"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (362ms)","timestamp":"2025-10-25 16:27:38"}
{"body":{"eventSQLId":"PageRegDtl"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:29:13"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:29:13"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: PageRegDtl","timestamp":"2025-10-25 16:29:13"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:29:13"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:29:13"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:29:13"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":39.183048,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:29:13"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:29:13"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: PageRegDtl (ID: 34)","timestamp":"2025-10-25 16:29:13"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:29:13"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:29:13"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:29:13"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":309.958833,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:29:13"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:29:13"}
{"level":"debug","message":"[execEventType.js] Resolved from context :pageID → 12","timestamp":"2025-10-25 16:29:13"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  api_wf.page_registry pr \r\nwhere id = 12","timestamp":"2025-10-25 16:29:13"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:29:13"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:29:13"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:29:13"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":179.111203,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:29:13"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:29:13"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: PageRegDtl (ID: 34)","timestamp":"2025-10-25 16:29:13"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (531ms)","timestamp":"2025-10-25 16:29:13"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":530.631962,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-25 16:29:13"}
{"body":{"data":{"description":"Get distinct app names from page_registry","qryName":"pageRegApps","qrySQL":"SELECT DISTINCT appName FROM api_wf.page_registry WHERE active = 1 ORDER BY appName","userID":"claude"},"method":"INSERT","table":"api_wf.eventSQL"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 16:31:16"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 16:31:16"}
{"data":{"description":"Get distinct app names from page_registry","qryName":"pageRegApps","qrySQL":"SELECT DISTINCT appName FROM api_wf.page_registry WHERE active = 1 ORDER BY appName","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.eventSQL","timestamp":"2025-10-25 16:31:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:31:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:31:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:31:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":58.8615,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:31:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:31:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:31:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:31:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:31:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":39.10224,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:31:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:31:16"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.eventSQL (qryName, qrySQL, description, created_at, created_by) VALUES ('pageRegApps', 'SELECT DISTINCT appName FROM api_wf.page_registry WHERE active = 1 ORDER BY appName', 'Get distinct app names from page_registry', NOW(), 'Paul')","timestamp":"2025-10-25 16:31:16"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 16:31:16"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 16:31:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":612.227983,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 16:31:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:31:17"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.eventSQL","timestamp":"2025-10-25 16:31:17"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-25 16:31:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (712ms)","timestamp":"2025-10-25 16:31:17"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":712.298718,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-25 16:31:17"}
{"body":{"data":{"description":"Get pages for selected app from page_registry","qryName":"pageRegByApp","qrySQL":"SELECT id, pageName, pageTitle, routePath FROM api_wf.page_registry WHERE appName = :appName AND active = 1 ORDER BY pageName","userID":"claude"},"method":"INSERT","table":"api_wf.eventSQL"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 16:31:17"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 16:31:17"}
{"data":{"description":"Get pages for selected app from page_registry","qryName":"pageRegByApp","qrySQL":"SELECT id, pageName, pageTitle, routePath FROM api_wf.page_registry WHERE appName = :appName AND active = 1 ORDER BY pageName","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.eventSQL","timestamp":"2025-10-25 16:31:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:31:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:31:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:31:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":336.182752,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:31:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:31:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:31:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:31:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:31:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.135866,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:31:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:31:17"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.eventSQL (qryName, qrySQL, description, created_at, created_by) VALUES ('pageRegByApp', 'SELECT id, pageName, pageTitle, routePath FROM api_wf.page_registry WHERE appName = :appName AND active = 1 ORDER BY pageName', 'Get pages for selected app from page_registry', NOW(), 'Paul')","timestamp":"2025-10-25 16:31:17"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 16:31:17"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 16:31:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":821.925496,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 16:31:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:31:18"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.eventSQL","timestamp":"2025-10-25 16:31:18"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-25 16:31:18"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (1203ms)","timestamp":"2025-10-25 16:31:18"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1203.3091180000001,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-25 16:31:18"}
{"body":{"eventSQLId":"pageRegApps"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:31:22"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:31:22"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: pageRegApps","timestamp":"2025-10-25 16:31:22"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:31:22"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:31:22"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:31:22"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":66.239399,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:31:22"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:31:22"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: pageRegApps (ID: 35)","timestamp":"2025-10-25 16:31:22"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT DISTINCT appName FROM api_wf.page_registry WHERE active = 1 ORDER BY appName","timestamp":"2025-10-25 16:31:22"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:31:22"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:31:22"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 4","timestamp":"2025-10-25 16:31:22"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":317.524697,"method":"GET","operation":"database_query","rowCount":4,"success":true},"timestamp":"2025-10-25 16:31:22"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:31:22"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: pageRegApps (ID: 35)","timestamp":"2025-10-25 16:31:22"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (385ms)","timestamp":"2025-10-25 16:31:22"}
{"body":{"appName":"whatsfresh","eventSQLId":"pageRegByApp"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:31:26"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:31:26"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: pageRegByApp","timestamp":"2025-10-25 16:31:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:31:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:31:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:31:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":223.832512,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:31:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:31:26"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: pageRegByApp (ID: 36)","timestamp":"2025-10-25 16:31:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:31:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:31:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:31:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":70.981871,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:31:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:31:26"}
{"level":"debug","message":"[execEventType.js] Resolved from context :appName → 'admin'","timestamp":"2025-10-25 16:31:26"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, pageName, pageTitle, routePath FROM api_wf.page_registry WHERE appName = 'admin' AND active = 1 ORDER BY pageName","timestamp":"2025-10-25 16:31:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:31:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:31:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-25 16:31:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":276.087429,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-25 16:31:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:31:27"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: pageRegByApp (ID: 36)","timestamp":"2025-10-25 16:31:27"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (572ms)","timestamp":"2025-10-25 16:31:27"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":572.298087,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-25 16:31:27"}
{"body":{"eventSQLId":"pageRegByApp"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-25 16:31:32"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-25 16:31:32"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: pageRegByApp","timestamp":"2025-10-25 16:31:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:31:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:31:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:31:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":296.558977,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:31:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:31:32"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: pageRegByApp (ID: 36)","timestamp":"2025-10-25 16:31:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:31:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:31:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:31:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.570377,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:31:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:31:32"}
{"level":"debug","message":"[execEventType.js] Resolved from context :appName → 'admin'","timestamp":"2025-10-25 16:31:32"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, pageName, pageTitle, routePath FROM api_wf.page_registry WHERE appName = 'admin' AND active = 1 ORDER BY pageName","timestamp":"2025-10-25 16:31:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:31:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:31:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-25 16:31:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":96.736109,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-25 16:31:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:31:32"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: pageRegByApp (ID: 36)","timestamp":"2025-10-25 16:31:32"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (428ms)","timestamp":"2025-10-25 16:31:32"}
{"body":{"data":{"change_type":"MODIFY","description":"Load ALL page_registry records at startup\n- Added loadAllPageRegistry function\n- Loads once, caches in IndexedDB\n- Enables Dexie queries for navigation\n- Removed page_registry.clear from clearPageData (preserve cache)","file_path":"apps/studio/src/utils/pageLoader.js","phase":"development","plan_id":48,"status":"completed","userID":"claude"},"method":"INSERT","table":"api_wf.plan_impacts"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-25 16:40:03"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-25 16:40:03"}
{"data":{"change_type":"MODIFY","description":"Load ALL page_registry records at startup\n- Added loadAllPageRegistry function\n- Loads once, caches in IndexedDB\n- Enables Dexie queries for navigation\n- Removed page_registry.clear from clearPageData (preserve cache)","file_path":"apps/studio/src/utils/pageLoader.js","phase":"development","plan_id":48,"status":"completed","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_impacts","timestamp":"2025-10-25 16:40:03"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:40:03"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:40:03"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:40:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":41.998427,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:40:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:40:03"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-25 16:40:03"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-25 16:40:03"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-25 16:40:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":304.62921,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-25 16:40:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:40:04"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_impacts (plan_id, file_path, change_type, phase, description, status, created_at, created_by) VALUES (48, 'apps/studio/src/utils/pageLoader.js', 'MODIFY', 'development', 'Load ALL page_registry records at startup\n- Added loadAllPageRegistry function\n- Loads once, caches in IndexedDB\n- Enables Dexie queries for navigation\n- Removed page_registry.clear from clearPageData (preserve cache)', 'completed', NOW(), 'Paul')","timestamp":"2025-10-25 16:40:04"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-25 16:40:04"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-25 16:40:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":558.957437,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-25 16:40:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-25 16:40:04"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_impacts","timestamp":"2025-10-25 16:40:04"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-25 16:40:04"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (908ms)","timestamp":"2025-10-25 16:40:04"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":907.51345,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-25 16:40:04"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-25 17:26:57"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-25 18:26:57"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-25 22:33:13"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-25 23:48:13"}
