{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-29 00:28:03"}
{"level":"info","message":"Log file rotated","newFilename":"/home/paul/wf-monorepo-new/apps/server/server/logs/application-2025-10-29.log","oldFilename":"/home/paul/wf-monorepo-new/apps/server/server/logs/application-2025-10-28.log","timestamp":"2025-10-29 00:28:03"}
{"level":"info","message":"[app.js]  Application initialized","timestamp":"2025-10-29 06:56:54"}
{"level":"info","message":"[dbManager.js] Database connection test successful","timestamp":"2025-10-29 06:56:54"}
{"level":"info","message":"[server.js] Initializing routes","timestamp":"2025-10-29 06:56:54"}
{"level":"debug","message":"[index.js]  Initializing routes","timestamp":"2025-10-29 06:56:54"}
{"level":"info","message":"[registerRoutes.js] Started registering routes","timestamp":"2025-10-29 06:56:54"}
{"0":"POST /api/execEventType","1":"GET /api/eventType/:xrefId","10":"POST /api/clearVals","11":"POST /api/logImpact","12":"GET /api/impacts/recent","13":"GET /api/impacts/batch/:batchId","14":"GET /api/studio/genPageConfig","15":"POST /api/genPageConfig","16":"POST /api/initialize","17":"GET /api/util/list-routes","18":"POST /api/util/restart-server","19":"POST /api/util/run-migration","2":"GET /api/eventTypes","20":"GET /api/util/migration-status","21":"POST /api/util/open-terminal","22":"POST /api/auth/login","23":"GET /api/github/labels","24":"GET /api/github/issues","25":"POST /api/github/issues","26":"GET /api/github/issues/:issue_number/comments","27":"POST /api/github/upload-image","3":"GET /api/triggers","4":"POST /api/execDML","5":"POST /api/execCreateDoc","6":"GET /api/getDoc","7":"POST /api/studio/genFields","8":"GET /api/getVal","9":"POST /api/setVals","level":"info","message":"[registerRoutes.js] Routes registered:","timestamp":"2025-10-29 06:56:54"}
{"level":"info","message":"[registerRoutes.js] Routes setup complete","timestamp":"2025-10-29 06:56:54"}
{"level":"debug","message":"[index.js]  Routes initialized","timestamp":"2025-10-29 06:56:54"}
{"level":"info","message":"[server.js] Routes initialized","timestamp":"2025-10-29 06:56:54"}
{"level":"info","message":"[server.js] Starting server on port 3001","timestamp":"2025-10-29 06:56:54"}
{"level":"info","message":"[server.js] Server timeouts configured: keepAlive=5s, headers=6s","timestamp":"2025-10-29 06:56:55"}
{"level":"info","message":"[server.js] Server is running on http://localhost:3001","timestamp":"2025-10-29 06:56:55"}
{"body":{"conditions":{"agent":"claude"},"limit":2,"method":"SELECT","orderBy":"created_at DESC","table":"api_wf.session_summaries"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 06:58:58"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 06:58:58"}
{"level":"debug","message":"[dmlProcessor.js] Processing SELECT on api_wf.session_summaries","timestamp":"2025-10-29 06:58:58"}
{"code":"MISSING_REQUIRED_FIELDS","level":"error","message":"[execDML.js] DML operation failed: method, table, and data are required","stack":"Error: method, table, and data are required\n    at processDML (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dml/dmlProcessor.js:42:19)\n    at execDML (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execDML.js:13:30)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:157:13)\n    at Route.dispatch (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:117:3)\n    at handle (/home/paul/wf-monorepo-new/node_modules/router/index.js:435:11)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at /home/paul/wf-monorepo-new/node_modules/router/index.js:295:15\n    at processParams (/home/paul/wf-monorepo-new/node_modules/router/index.js:582:12)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/index.js:291:5)","status":400,"timestamp":"2025-10-29 06:58:58"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 400 (3ms)","timestamp":"2025-10-29 06:58:58"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":3.008472,"method":"POST","operation":"http_request","path":"/api/execDML","status":400},"timestamp":"2025-10-29 06:58:58"}
{"body":{"conditions":{"created_at":{"operator":">=","value":"DATE_SUB(NOW(), INTERVAL 24 HOUR)"}},"limit":20,"method":"SELECT","orderBy":"created_at DESC","table":"api_wf.plan_impacts"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 06:58:59"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 06:58:59"}
{"level":"debug","message":"[dmlProcessor.js] Processing SELECT on api_wf.plan_impacts","timestamp":"2025-10-29 06:58:59"}
{"code":"MISSING_REQUIRED_FIELDS","level":"error","message":"[execDML.js] DML operation failed: method, table, and data are required","stack":"Error: method, table, and data are required\n    at processDML (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dml/dmlProcessor.js:42:19)\n    at execDML (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execDML.js:13:30)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:157:13)\n    at Route.dispatch (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:117:3)\n    at handle (/home/paul/wf-monorepo-new/node_modules/router/index.js:435:11)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at /home/paul/wf-monorepo-new/node_modules/router/index.js:295:15\n    at processParams (/home/paul/wf-monorepo-new/node_modules/router/index.js:582:12)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/index.js:291:5)","status":400,"timestamp":"2025-10-29 06:58:59"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 400 (2ms)","timestamp":"2025-10-29 06:58:59"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1.756797,"method":"POST","operation":"http_request","path":"/api/execDML","status":400},"timestamp":"2025-10-29 06:58:59"}
{"body":{"limit":5,"method":"SELECT","orderBy":"created_at DESC","table":"api_wf.plan_communications"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 06:58:59"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 06:58:59"}
{"level":"debug","message":"[dmlProcessor.js] Processing SELECT on api_wf.plan_communications","timestamp":"2025-10-29 06:58:59"}
{"code":"MISSING_REQUIRED_FIELDS","level":"error","message":"[execDML.js] DML operation failed: method, table, and data are required","stack":"Error: method, table, and data are required\n    at processDML (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dml/dmlProcessor.js:42:19)\n    at execDML (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execDML.js:13:30)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:157:13)\n    at Route.dispatch (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:117:3)\n    at handle (/home/paul/wf-monorepo-new/node_modules/router/index.js:435:11)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at /home/paul/wf-monorepo-new/node_modules/router/index.js:295:15\n    at processParams (/home/paul/wf-monorepo-new/node_modules/router/index.js:582:12)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/index.js:291:5)","status":400,"timestamp":"2025-10-29 06:58:59"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 400 (2ms)","timestamp":"2025-10-29 06:58:59"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1.660364,"method":"POST","operation":"http_request","path":"/api/execDML","status":400},"timestamp":"2025-10-29 06:58:59"}
{"body":{"query":"SELECT * FROM api_wf.session_summaries WHERE agent = \"claude\" ORDER BY created_at DESC LIMIT 2"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/query","timestamp":"2025-10-29 06:59:05"}
{"level":"warn","message":"[server.js] Route not found: POST /api/query","timestamp":"2025-10-29 06:59:05"}
{"level":"info","message":"[app.js]  Response: POST /api/query 404 (1ms)","timestamp":"2025-10-29 06:59:05"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":0.928801,"method":"POST","operation":"http_request","path":"/api/query","status":404},"timestamp":"2025-10-29 06:59:05"}
{"body":{"query":"SELECT * FROM api_wf.plan_impacts WHERE created_at >= DATE_SUB(NOW(), INTERVAL 24 HOUR) ORDER BY created_at DESC LIMIT 20"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/query","timestamp":"2025-10-29 06:59:05"}
{"level":"warn","message":"[server.js] Route not found: POST /api/query","timestamp":"2025-10-29 06:59:05"}
{"level":"info","message":"[app.js]  Response: POST /api/query 404 (1ms)","timestamp":"2025-10-29 06:59:05"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":0.801175,"method":"POST","operation":"http_request","path":"/api/query","status":404},"timestamp":"2025-10-29 06:59:05"}
{"body":{"query":"SELECT * FROM api_wf.plan_communications ORDER BY created_at DESC LIMIT 5"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/query","timestamp":"2025-10-29 06:59:05"}
{"level":"warn","message":"[server.js] Route not found: POST /api/query","timestamp":"2025-10-29 06:59:05"}
{"level":"info","message":"[app.js]  Response: POST /api/query 404 (1ms)","timestamp":"2025-10-29 06:59:05"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":0.657986,"method":"POST","operation":"http_request","path":"/api/query","status":404},"timestamp":"2025-10-29 06:59:05"}
{"level":"debug","message":"[app.js]  Request","method":"GET","path":"/health","timestamp":"2025-10-29 06:59:10"}
{"body":{"eventSQLId":"sessionRecentList"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 06:59:15"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 06:59:15"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: sessionRecentList","timestamp":"2025-10-29 06:59:15"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 06:59:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 06:59:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":683.507734,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: sessionRecentList (ID: 30)","timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT *\r\nFROM api_wf.vw_plan_composite vpc\r\nWHERE plan_id IN (\r\n    SELECT id\r\n    FROM (\r\n        SELECT id\r\n        FROM api_wf.plans\r\n        ORDER BY id DESC\r\n        LIMIT 2\r\n    ) AS limited_plans\r\n);","timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 06:59:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 43","timestamp":"2025-10-29 06:59:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":215.455629,"method":"GET","operation":"database_query","rowCount":43,"success":true},"timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 06:59:16"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: sessionRecentList (ID: 30)","timestamp":"2025-10-29 06:59:16"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (902ms)","timestamp":"2025-10-29 06:59:16"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":901.888983,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-29 06:59:16"}
{"body":{"eventSQLId":"recentImpactList"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 06:59:16"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: recentImpactList","timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 06:59:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 06:59:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":257.259386,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: recentImpactList (ID: 24)","timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select plan_id, fileName, t.fileFolder, t.change_type, description, batch_id, created_at, created_by\nfrom api_wf.plan_impacts t\nWHERE created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)\nORDER BY created_at DESC\nLIMIT 30","timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 06:59:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 06:59:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 30","timestamp":"2025-10-29 06:59:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":119.367189,"method":"GET","operation":"database_query","rowCount":30,"success":true},"timestamp":"2025-10-29 06:59:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 06:59:17"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: recentImpactList (ID: 24)","timestamp":"2025-10-29 06:59:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (380ms)","timestamp":"2025-10-29 06:59:17"}
{"body":{"eventSQLId":"sessionPlan45"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 06:59:17"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 06:59:17"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: sessionPlan45","timestamp":"2025-10-29 06:59:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 06:59:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 06:59:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 06:59:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":185.169254,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 06:59:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 06:59:17"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: sessionPlan45 (ID: 31)","timestamp":"2025-10-29 06:59:17"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select * \r\nfrom api_wf.vw_plan45\r\nlimit 30","timestamp":"2025-10-29 06:59:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 06:59:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 06:59:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 26","timestamp":"2025-10-29 06:59:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":187.001957,"method":"GET","operation":"database_query","rowCount":26,"success":true},"timestamp":"2025-10-29 06:59:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 06:59:17"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: sessionPlan45 (ID: 31)","timestamp":"2025-10-29 06:59:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (375ms)","timestamp":"2025-10-29 06:59:17"}
{"body":{"eventSQLId":"ingrTypeProps","params":{"xref_id":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:02:10"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:02:10"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: ingrTypeProps","timestamp":"2025-10-29 07:02:10"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:02:10"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:02:10"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 07:02:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":178.872807,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 07:02:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:02:10"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 404 (180ms)","timestamp":"2025-10-29 07:02:10"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":179.895753,"method":"POST","operation":"http_request","path":"/api/execEventType","status":404},"timestamp":"2025-10-29 07:02:10"}
{"body":{"eventSQLId":"compPropsSelect","params":{"xref_id":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:02:18"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:02:18"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: compPropsSelect","timestamp":"2025-10-29 07:02:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:02:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:02:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 07:02:19"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":130.884973,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 07:02:19"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:02:19"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 404 (133ms)","timestamp":"2025-10-29 07:02:19"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":132.54779,"method":"POST","operation":"http_request","path":"/api/execEventType","status":404},"timestamp":"2025-10-29 07:02:19"}
{"body":{"eventSQLId":"hierComponents","params":{"pageID":11}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:02:23"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:02:23"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: hierComponents","timestamp":"2025-10-29 07:02:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:02:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:02:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 07:02:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":193.905683,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 07:02:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:02:23"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 404 (196ms)","timestamp":"2025-10-29 07:02:23"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":196.033059,"method":"POST","operation":"http_request","path":"/api/execEventType","status":404},"timestamp":"2025-10-29 07:02:23"}
{"body":{"data":{"paramName":"rowActions","xref_id":67},"method":"SELECT","table":"api_wf.eventProps"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 07:02:43"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 07:02:43"}
{"data":{"paramName":"rowActions","xref_id":67},"level":"debug","message":"[dmlProcessor.js] Processing SELECT on api_wf.eventProps","timestamp":"2025-10-29 07:02:43"}
{"code":"INVALID_METHOD","level":"error","message":"[execDML.js] DML operation failed: Method must be INSERT, UPDATE, or DELETE. Got: SELECT","stack":"Error: Method must be INSERT, UPDATE, or DELETE. Got: SELECT\n    at processDML (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dml/dmlProcessor.js:50:19)\n    at execDML (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execDML.js:13:30)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:157:13)\n    at Route.dispatch (/home/paul/wf-monorepo-new/node_modules/router/lib/route.js:117:3)\n    at handle (/home/paul/wf-monorepo-new/node_modules/router/index.js:435:11)\n    at Layer.handleRequest (/home/paul/wf-monorepo-new/node_modules/router/lib/layer.js:152:17)\n    at /home/paul/wf-monorepo-new/node_modules/router/index.js:295:15\n    at processParams (/home/paul/wf-monorepo-new/node_modules/router/index.js:582:12)\n    at next (/home/paul/wf-monorepo-new/node_modules/router/index.js:291:5)","status":400,"timestamp":"2025-10-29 07:02:43"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 400 (1ms)","timestamp":"2025-10-29 07:02:43"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1.021072,"method":"POST","operation":"http_request","path":"/api/execDML","status":400},"timestamp":"2025-10-29 07:02:43"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-29 07:11:54"}
{"body":{"eventSQLId":"studio-eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:24:52"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventTypeList","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:24:52"}
{"body":{"eventSQLId":"studio-eventSqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:24:52"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventSqlList","timestamp":"2025-10-29 07:24:52"}
{"body":{"eventSQLId":"studio-triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:24:52"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-triggerList","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":92.025132,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:24:52"}
{"body":{"eventSQLId":"studio-pageRegistry","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:24:52"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-pageRegistry","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":71.932269,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (173ms)","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":440.987764,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":438.090765,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-triggerList (ID: 16)","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":104.791308,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-triggerList (ID: 16)","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (546ms)","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":545.938264,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":455.897889,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  api_wf.page_registry pr \r\norder by appName, pageName","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 33","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":109.092142,"method":"GET","operation":"database_query","rowCount":33,"success":true},"timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (553ms)","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":552.862426,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 17","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":200.247764,"method":"GET","operation":"database_query","rowCount":17,"success":true},"timestamp":"2025-10-29 07:24:52"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (658ms)","timestamp":"2025-10-29 07:24:52"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":658.458779,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-29 07:24:52"}
{"body":{"values":{"0":{"paramName":"appID","paramVal":"templates"},"1":{"paramName":"appName","paramVal":"templates"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 07:24:57"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 07:24:57"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:24:57"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:24:57"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:24:57"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":278.318914,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:24:57"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:24:57"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 07:24:57"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 07:24:57"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":283.151788,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:24:58"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:24:58"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 07:24:58"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 07:24:58"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":326.160317,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:24:58"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:24:58"}
{"level":"debug","message":"[setVals.js] Set 2 values for pc7900@gmail.com","timestamp":"2025-10-29 07:24:58"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (892ms)","timestamp":"2025-10-29 07:24:58"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":891.912253,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 07:24:58"}
{"body":{"values":{"0":{"paramName":"pageID","paramVal":"11"},"1":{"paramName":"pageName","paramVal":"CRUD Template"},"2":{"paramName":"xrefID","paramVal":"11"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 07:25:01"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 07:25:01"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:01"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:01"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:01"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":260.574619,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:01"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:01"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 07:25:01"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 07:25:01"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":470.006625,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:25:01"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:01"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 07:25:01"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 07:25:01"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":456.60069,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 07:25:02"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":361.712856,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[setVals.js] Set 3 values for pc7900@gmail.com","timestamp":"2025-10-29 07:25:02"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (1553ms)","timestamp":"2025-10-29 07:25:02"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1553.126037,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 07:25:02"}
{"body":{"eventSQLId":"studio-xrefHierarchy","params":{"pageID":"11"}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:25:02"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefHierarchy","timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:02"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:02"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":125.560499,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:02"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:02"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":103.822387,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[execEventType.js] Resolved from context :xrefID → 11","timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[execEventType.js] Executing SQL: CALL api_wf.sp_hier_structure(11)","timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:02"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:02"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":399.437033,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (632ms)","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":632.472926,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-29 07:25:03"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:25:03"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":120.994117,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 65 \r\nAND active = 1","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":187.530338,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (312ms)","timestamp":"2025-10-29 07:25:03"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:25:03"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":200.859136,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 65\r\nORDER BY class, ordr","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":115.975476,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (320ms)","timestamp":"2025-10-29 07:25:03"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:25:03"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":41.674431,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 77 \r\nAND active = 1","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:03"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:03"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":234.894578,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (281ms)","timestamp":"2025-10-29 07:25:04"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:25:04"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":40.055706,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 77\r\nORDER BY class, ordr","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":267.538372,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (311ms)","timestamp":"2025-10-29 07:25:04"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:25:04"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.739894,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 66 \r\nAND active = 1","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":140.953459,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (186ms)","timestamp":"2025-10-29 07:25:04"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:25:04"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":43.840542,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 66\r\nORDER BY class, ordr","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":157.640196,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (204ms)","timestamp":"2025-10-29 07:25:04"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:25:04"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":45.387002,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 67 \r\nAND active = 1","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:04"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:04"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 4","timestamp":"2025-10-29 07:25:05"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":242.878909,"method":"GET","operation":"database_query","rowCount":4,"success":true},"timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:05"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:25:05"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (291ms)","timestamp":"2025-10-29 07:25:05"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:25:05"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:05"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:05"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":51.58993,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 67\r\nORDER BY class, ordr","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:05"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 07:25:05"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":594.704039,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:05"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:25:05"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (650ms)","timestamp":"2025-10-29 07:25:05"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":649.563371,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-29 07:25:05"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:25:05"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:05"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:05"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":47.565314,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 68 \r\nAND active = 1","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:05"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:05"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":189.87913,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (242ms)","timestamp":"2025-10-29 07:25:06"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:25:06"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.375629,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 68\r\nORDER BY class, ordr","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":269.713661,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (306ms)","timestamp":"2025-10-29 07:25:06"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:25:06"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":55.03719,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 69 \r\nAND active = 1","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":155.00722,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (213ms)","timestamp":"2025-10-29 07:25:06"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:25:06"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":62.733613,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 69\r\nORDER BY class, ordr","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":183.725041,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (248ms)","timestamp":"2025-10-29 07:25:06"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 07:25:06"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:06"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:06"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:07"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":140.334971,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:07"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:07"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 07:25:07"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 200 (142ms)","timestamp":"2025-10-29 07:25:07"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 07:25:09"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 07:25:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":331.525583,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:10"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 07:25:10"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (336ms)","timestamp":"2025-10-29 07:25:10"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 07:25:10"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 07:25:10"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:25:10"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:25:10"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:25:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":186.276413,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:25:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:25:10"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 07:25:10"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (189ms)","timestamp":"2025-10-29 07:25:10"}
{"body":{"values":{"0":{"paramName":"appID","paramVal":"whatsfresh"},"1":{"paramName":"appName","paramVal":"whatsfresh"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 07:26:02"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 07:26:02"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:02"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:02"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":205.428919,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:03"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 07:26:03"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 07:26:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":284.827308,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:26:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:03"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 07:26:03"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 07:26:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":439.067284,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:26:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:03"}
{"level":"debug","message":"[setVals.js] Set 2 values for pc7900@gmail.com","timestamp":"2025-10-29 07:26:03"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (933ms)","timestamp":"2025-10-29 07:26:03"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":932.691776,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 07:26:03"}
{"body":{"values":{"0":{"paramName":"pageID","paramVal":"1"},"1":{"paramName":"pageName","paramVal":"Ingredient Types"},"2":{"paramName":"xrefID","paramVal":"1"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 07:26:05"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 07:26:05"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:05"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:05"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:05"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":103.88102,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:05"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:05"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 07:26:05"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 07:26:05"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":325.050956,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:26:06"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:06"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 07:26:06"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 07:26:06"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":394.521839,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:26:06"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:06"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 07:26:06"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 07:26:06"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":514.608837,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:26:06"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:06"}
{"level":"debug","message":"[setVals.js] Set 3 values for pc7900@gmail.com","timestamp":"2025-10-29 07:26:06"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (1343ms)","timestamp":"2025-10-29 07:26:06"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1342.5697599999999,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 07:26:06"}
{"body":{"eventSQLId":"studio-xrefHierarchy","params":{"pageID":"1"}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:26:06"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:26:06"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefHierarchy","timestamp":"2025-10-29 07:26:06"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:06"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:06"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:07"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":106.92193,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:07"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:07"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 07:26:07"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:07"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:07"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:07"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":513.969117,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:07"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:07"}
{"level":"debug","message":"[execEventType.js] Resolved from context :xrefID → 1","timestamp":"2025-10-29 07:26:07"}
{"level":"debug","message":"[execEventType.js] Executing SQL: CALL api_wf.sp_hier_structure(1)","timestamp":"2025-10-29 07:26:07"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:07"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:07"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 07:26:07"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":291.257287,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:26:07"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:07"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 07:26:07"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (915ms)","timestamp":"2025-10-29 07:26:07"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":915.43195,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-29 07:26:07"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":60}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:26:07"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:26:07"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 07:26:07"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:07"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:07"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":99.297896,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 60...","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 60 \r\nAND active = 1","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":99.361348,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (201ms)","timestamp":"2025-10-29 07:26:08"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":60}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:26:08"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":195.615362,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 60...","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 60\r\nORDER BY class, ordr","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":104.251455,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (303ms)","timestamp":"2025-10-29 07:26:08"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":56}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:26:08"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":46.922533,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 56...","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 56 \r\nAND active = 1","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 4","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":200.028896,"method":"GET","operation":"database_query","rowCount":4,"success":true},"timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (249ms)","timestamp":"2025-10-29 07:26:08"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":56}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:26:08"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":43.450701,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 56...","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 56\r\nORDER BY class, ordr","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":103.782907,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (150ms)","timestamp":"2025-10-29 07:26:08"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":59}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:26:08"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":49.222567,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 59...","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 59 \r\nAND active = 1","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":232.014483,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (283ms)","timestamp":"2025-10-29 07:26:09"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":59}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:26:09"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":46.174697,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 59...","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 59\r\nORDER BY class, ordr","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":118.212751,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (167ms)","timestamp":"2025-10-29 07:26:09"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":63}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:26:09"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.874598,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 63...","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 63 \r\nAND active = 1","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":178.193399,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (223ms)","timestamp":"2025-10-29 07:26:09"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":63}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:26:09"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":50.113148,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 63...","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 63\r\nORDER BY class, ordr","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":248.700641,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (302ms)","timestamp":"2025-10-29 07:26:09"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 07:26:09"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":45.465872,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:09"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 1","timestamp":"2025-10-29 07:26:09"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 200 (47ms)","timestamp":"2025-10-29 07:26:09"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 07:26:14"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 07:26:14"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:14"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:14"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:14"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":129.259152,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:14"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:14"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 1","timestamp":"2025-10-29 07:26:14"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (131ms)","timestamp":"2025-10-29 07:26:14"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 07:26:14"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 07:26:14"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:26:14"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:26:14"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 07:26:14"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":138.648185,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 07:26:14"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:26:14"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 1","timestamp":"2025-10-29 07:26:14"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (142ms)","timestamp":"2025-10-29 07:26:14"}
{"body":{"eventSQLId":"triggerSelect","params":{"xref_id":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 07:54:59"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 07:54:59"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: triggerSelect","timestamp":"2025-10-29 07:54:59"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 07:54:59"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 07:54:59"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 07:55:00"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":237.046848,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 07:55:00"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 07:55:00"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 404 (239ms)","timestamp":"2025-10-29 07:55:00"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":238.722178,"method":"POST","operation":"http_request","path":"/api/execEventType","status":404},"timestamp":"2025-10-29 07:55:00"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-29 08:11:54"}
{"body":{"eventSQLId":"studio-eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:17"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventTypeList","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:17"}
{"body":{"eventSQLId":"studio-eventSqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:17"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventSqlList","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:17"}
{"body":{"eventSQLId":"studio-triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:17"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-triggerList","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:17"}
{"body":{"eventSQLId":"studio-pageRegistry","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:17"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-pageRegistry","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":67.921327,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":217.282442,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":216.842502,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-triggerList (ID: 16)","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":306.392885,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  api_wf.page_registry pr \r\norder by appName, pageName","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 33","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":293.81517,"method":"GET","operation":"database_query","rowCount":33,"success":true},"timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (363ms)","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":219.237777,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (442ms)","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":214.812771,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-triggerList (ID: 16)","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (436ms)","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 17","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":161.827611,"method":"GET","operation":"database_query","rowCount":17,"success":true},"timestamp":"2025-10-29 08:26:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 08:26:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (470ms)","timestamp":"2025-10-29 08:26:17"}
{"body":{"values":{"0":{"paramName":"appID","paramVal":"templates"},"1":{"paramName":"appName","paramVal":"templates"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:26:23"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:26:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":63.183881,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:23"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:26:23"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:26:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":384.042026,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:26:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:23"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:26:23"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:26:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":303.671605,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:26:24"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:24"}
{"level":"debug","message":"[setVals.js] Set 2 values for pc7900@gmail.com","timestamp":"2025-10-29 08:26:24"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (754ms)","timestamp":"2025-10-29 08:26:24"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":754.40871,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 08:26:24"}
{"body":{"values":{"0":{"paramName":"pageID","paramVal":"11"},"1":{"paramName":"pageName","paramVal":"CRUD Template"},"2":{"paramName":"xrefID","paramVal":"11"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:26:26"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:26:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":205.775105,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:26"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:26:26"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:26:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":180.716759,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:26:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:26"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:26:26"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:26:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":225.952523,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:26:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:26"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:26:26"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:26:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":384.276923,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[setVals.js] Set 3 values for pc7900@gmail.com","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (1002ms)","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1002.162541,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 08:26:27"}
{"body":{"eventSQLId":"studio-xrefHierarchy","params":{"pageID":"11"}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:27"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefHierarchy","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":71.032268,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":61.42833,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[execEventType.js] Resolved from context :xrefID → 11","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[execEventType.js] Executing SQL: CALL api_wf.sp_hier_structure(11)","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":169.330952,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (305ms)","timestamp":"2025-10-29 08:26:27"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:27"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":96.286184,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 65 \r\nAND active = 1","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":116.151324,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (215ms)","timestamp":"2025-10-29 08:26:27"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:27"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":39.770497,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 65\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":234.269405,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (277ms)","timestamp":"2025-10-29 08:26:27"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:27"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":151.695166,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 77 \r\nAND active = 1","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":241.278789,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (395ms)","timestamp":"2025-10-29 08:26:28"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:28"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":54.548373,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 77\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":139.919565,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (197ms)","timestamp":"2025-10-29 08:26:28"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:28"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":66.885971,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 66 \r\nAND active = 1","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":128.393133,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (197ms)","timestamp":"2025-10-29 08:26:28"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:28"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":41.43621,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 66\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:28"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":175.673781,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (219ms)","timestamp":"2025-10-29 08:26:29"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:29"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":57.528838,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 67 \r\nAND active = 1","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 4","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":116.978485,"method":"GET","operation":"database_query","rowCount":4,"success":true},"timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (177ms)","timestamp":"2025-10-29 08:26:29"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:29"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":40.587141,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 67\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":150.573196,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (193ms)","timestamp":"2025-10-29 08:26:29"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:29"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":51.995708,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 68 \r\nAND active = 1","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":142.491494,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (196ms)","timestamp":"2025-10-29 08:26:29"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:29"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":43.769538,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 68\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":156.828404,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (203ms)","timestamp":"2025-10-29 08:26:29"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:29"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":51.019387,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 69 \r\nAND active = 1","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:26:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":141.902369,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:30"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:26:30"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (196ms)","timestamp":"2025-10-29 08:26:30"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:26:30"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":56.536866,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 69\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 08:26:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":127.102978,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:30"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:26:30"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (186ms)","timestamp":"2025-10-29 08:26:30"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:26:30"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":51.41842,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:30"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:26:30"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 200 (54ms)","timestamp":"2025-10-29 08:26:30"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:26:46"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:26:46"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:46"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:46"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:46"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":221.602385,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:46"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:46"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:26:46"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (224ms)","timestamp":"2025-10-29 08:26:46"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:26:46"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:26:46"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:26:46"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:26:46"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:26:47"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":94.915365,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:26:47"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:26:47"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:26:47"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (96ms)","timestamp":"2025-10-29 08:26:47"}
{"body":{"data":{"change_type":"MODIFY","description":"Updated to use dynamic contextKey from page_registry instead of hardcoded selectedID\n- Line 43: Read pageRegistry.contextKey from context_store (was: selectedID)\n- Line 68: Set only contextKey after INSERT (removed selectedID)\n- Benefits: Template cloning works automatically, supports full ID names (ingredient_id, product_batch_id, etc.)","file_path":"apps/studio/src/rendering/WorkflowEngine/triggers/action/execDML.js","phase":"development","plan_id":51,"status":"completed","userID":"claude"},"method":"INSERT","table":"api_wf.plan_impacts"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 08:38:17"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 08:38:17"}
{"data":{"change_type":"MODIFY","description":"Updated to use dynamic contextKey from page_registry instead of hardcoded selectedID\n- Line 43: Read pageRegistry.contextKey from context_store (was: selectedID)\n- Line 68: Set only contextKey after INSERT (removed selectedID)\n- Benefits: Template cloning works automatically, supports full ID names (ingredient_id, product_batch_id, etc.)","file_path":"apps/studio/src/rendering/WorkflowEngine/triggers/action/execDML.js","phase":"development","plan_id":51,"status":"completed","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_impacts","timestamp":"2025-10-29 08:38:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:38:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:38:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:38:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":183.369396,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:38:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:38:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:38:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:38:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:38:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":68.207839,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:38:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:38:17"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_impacts (plan_id, file_path, change_type, phase, description, status, created_at, created_by) VALUES (51, 'apps/studio/src/rendering/WorkflowEngine/triggers/action/execDML.js', 'MODIFY', 'development', 'Updated to use dynamic contextKey from page_registry instead of hardcoded selectedID\n- Line 43: Read pageRegistry.contextKey from context_store (was: selectedID)\n- Line 68: Set only contextKey after INSERT (removed selectedID)\n- Benefits: Template cloning works automatically, supports full ID names (ingredient_id, product_batch_id, etc.)', 'completed', NOW(), 'Paul')","timestamp":"2025-10-29 08:38:17"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:38:17"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:38:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":260.353183,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:38:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:38:17"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_impacts","timestamp":"2025-10-29 08:38:17"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 08:38:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (516ms)","timestamp":"2025-10-29 08:38:17"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":515.621289,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-29 08:38:17"}
{"body":{"eventSQLId":"studio-eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:46:17"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventTypeList","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:46:17"}
{"body":{"eventSQLId":"studio-eventSqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:46:17"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventSqlList","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:46:17"}
{"body":{"eventSQLId":"studio-triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:46:17"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-triggerList","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:46:17"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:46:17"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:46:17"}
{"body":{"eventSQLId":"studio-pageRegistry","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:46:17"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-pageRegistry","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":43.676948,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (45ms)","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":60.659407,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-triggerList (ID: 16)","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":75.01759,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":89.253162,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":52.469069,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (144ms)","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 33","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":87.988317,"method":"GET","operation":"database_query","rowCount":33,"success":true},"timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (165ms)","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":110.201442,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-triggerList (ID: 16)","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (173ms)","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":299.149952,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  api_wf.page_registry pr \r\norder by appName, pageName","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:46:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:46:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 17","timestamp":"2025-10-29 08:46:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":66.159079,"method":"GET","operation":"database_query","rowCount":17,"success":true},"timestamp":"2025-10-29 08:46:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:46:18"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 08:46:18"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (367ms)","timestamp":"2025-10-29 08:46:18"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:47:14"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:47:14"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:14"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:14"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:47:14"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":40.380816,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:47:14"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:14"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:47:14"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (41ms)","timestamp":"2025-10-29 08:47:14"}
{"body":{"eventSQLId":"studio-eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:47:21"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventTypeList","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:21"}
{"body":{"eventSQLId":"studio-eventSqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:47:21"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventSqlList","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:21"}
{"body":{"eventSQLId":"studio-triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:47:21"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-triggerList","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:21"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:47:21"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:21"}
{"body":{"eventSQLId":"studio-pageRegistry","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:47:21"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-pageRegistry","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":33.126091,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (34ms)","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":68.03662,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":66.591767,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":73.209897,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-triggerList (ID: 16)","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":68.67953,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  api_wf.page_registry pr \r\norder by appName, pageName","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 33","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":31.318202,"method":"GET","operation":"database_query","rowCount":33,"success":true},"timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (99ms)","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.080409,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-triggerList (ID: 16)","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (108ms)","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":64.675454,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (136ms)","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 17","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":74.605017,"method":"GET","operation":"database_query","rowCount":17,"success":true},"timestamp":"2025-10-29 08:47:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 08:47:21"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (146ms)","timestamp":"2025-10-29 08:47:21"}
{"body":{"data":{"change_type":"MODIFY","description":"Moved all page metadata into props for consistent access pattern\n- Removed cluster attribute (unused)\n- Moved title and routePath into props\n- Added pageID and parentID to props\n- All page metadata now accessed via pageConfig.props.X","file_path":"apps/studio/src/utils/pageConfigBuilder/index.js","phase":"development","plan_id":51,"status":"completed","userID":"claude"},"method":"INSERT","table":"api_wf.plan_impacts"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 08:47:40"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 08:47:40"}
{"data":{"change_type":"MODIFY","description":"Moved all page metadata into props for consistent access pattern\n- Removed cluster attribute (unused)\n- Moved title and routePath into props\n- Added pageID and parentID to props\n- All page metadata now accessed via pageConfig.props.X","file_path":"apps/studio/src/utils/pageConfigBuilder/index.js","phase":"development","plan_id":51,"status":"completed","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_impacts","timestamp":"2025-10-29 08:47:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:47:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":86.358409,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:47:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:47:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":103.022934,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:47:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:41"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_impacts (plan_id, file_path, change_type, phase, description, status, created_at, created_by) VALUES (51, 'apps/studio/src/utils/pageConfigBuilder/index.js', 'MODIFY', 'development', 'Moved all page metadata into props for consistent access pattern\n- Removed cluster attribute (unused)\n- Moved title and routePath into props\n- Added pageID and parentID to props\n- All page metadata now accessed via pageConfig.props.X', 'completed', NOW(), 'Paul')","timestamp":"2025-10-29 08:47:41"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:47:41"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:47:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":306.200215,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:47:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:41"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_impacts","timestamp":"2025-10-29 08:47:41"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 08:47:41"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (498ms)","timestamp":"2025-10-29 08:47:41"}
{"body":{"data":{"change_type":"MODIFY","description":"Updated to use pageConfig.props.title instead of pageConfig.title","file_path":"apps/studio/src/components/PageFlowCanvas.jsx","phase":"development","plan_id":51,"status":"completed","userID":"claude"},"method":"INSERT","table":"api_wf.plan_impacts"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 08:47:41"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 08:47:41"}
{"data":{"change_type":"MODIFY","description":"Updated to use pageConfig.props.title instead of pageConfig.title","file_path":"apps/studio/src/components/PageFlowCanvas.jsx","phase":"development","plan_id":51,"status":"completed","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_impacts","timestamp":"2025-10-29 08:47:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:47:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":94.929347,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:47:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:47:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":87.425834,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:47:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:41"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_impacts (plan_id, file_path, change_type, phase, description, status, created_at, created_by) VALUES (51, 'apps/studio/src/components/PageFlowCanvas.jsx', 'MODIFY', 'development', 'Updated to use pageConfig.props.title instead of pageConfig.title', 'completed', NOW(), 'Paul')","timestamp":"2025-10-29 08:47:41"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:47:41"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:47:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":327.62325,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_impacts","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (513ms)","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":512.977098,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-29 08:47:42"}
{"body":{"data":{"change_type":"MODIFY","description":"Updated to use pageConfig.props.routePath instead of pageConfig.routePath","file_path":"apps/studio/src/components/PagePreviewPanel.jsx","phase":"development","plan_id":51,"status":"completed","userID":"claude"},"method":"INSERT","table":"api_wf.plan_impacts"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 08:47:42"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 08:47:42"}
{"data":{"change_type":"MODIFY","description":"Updated to use pageConfig.props.routePath instead of pageConfig.routePath","file_path":"apps/studio/src/components/PagePreviewPanel.jsx","phase":"development","plan_id":51,"status":"completed","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_impacts","timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":129.105215,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":33.079828,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_impacts (plan_id, file_path, change_type, phase, description, status, created_at, created_by) VALUES (51, 'apps/studio/src/components/PagePreviewPanel.jsx', 'MODIFY', 'development', 'Updated to use pageConfig.props.routePath instead of pageConfig.routePath', 'completed', NOW(), 'Paul')","timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":239.194888,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_impacts","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (403ms)","timestamp":"2025-10-29 08:47:42"}
{"body":{"data":{"change_type":"MODIFY","description":"Updated to use pageConfig.props.title instead of pageConfig.title","file_path":"apps/studio/src/utils/pageConfigBuilder/genMermaid.js","phase":"development","plan_id":51,"status":"completed","userID":"claude"},"method":"INSERT","table":"api_wf.plan_impacts"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 08:47:42"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 08:47:42"}
{"data":{"change_type":"MODIFY","description":"Updated to use pageConfig.props.title instead of pageConfig.title","file_path":"apps/studio/src/utils/pageConfigBuilder/genMermaid.js","phase":"development","plan_id":51,"status":"completed","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_impacts","timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":151.769701,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.351542,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_impacts (plan_id, file_path, change_type, phase, description, status, created_at, created_by) VALUES (51, 'apps/studio/src/utils/pageConfigBuilder/genMermaid.js', 'MODIFY', 'development', 'Updated to use pageConfig.props.title instead of pageConfig.title', 'completed', NOW(), 'Paul')","timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:47:42"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:47:42"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":164.957046,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:47:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:47:43"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_impacts","timestamp":"2025-10-29 08:47:43"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 08:47:43"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (351ms)","timestamp":"2025-10-29 08:47:43"}
{"body":{"eventSQLId":"studio-eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:23"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventTypeList","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:23"}
{"body":{"eventSQLId":"studio-eventSqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:23"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventSqlList","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:23"}
{"body":{"eventSQLId":"studio-triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:23"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-triggerList","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":38.940926,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":47.457061,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":51.589882,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-triggerList (ID: 16)","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:23"}
{"body":{"eventSQLId":"studio-pageRegistry","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:23"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-pageRegistry","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":33.289012,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-triggerList (ID: 16)","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (89ms)","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":35.87497,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  api_wf.page_registry pr \r\norder by appName, pageName","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 33","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":63.741812,"method":"GET","operation":"database_query","rowCount":33,"success":true},"timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (105ms)","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":67.695341,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (118ms)","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 17","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":44.071493,"method":"GET","operation":"database_query","rowCount":17,"success":true},"timestamp":"2025-10-29 08:48:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 08:48:23"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (81ms)","timestamp":"2025-10-29 08:48:23"}
{"body":{"values":{"0":{"paramName":"appID","paramVal":"templates"},"1":{"paramName":"appName","paramVal":"templates"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:48:28"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:48:28"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:28"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":41.923082,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:28"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:48:28"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:48:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":438.806433,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:48:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:28"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:48:28"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:48:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":488.473186,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:48:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:29"}
{"level":"debug","message":"[setVals.js] Set 2 values for pc7900@gmail.com","timestamp":"2025-10-29 08:48:29"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (972ms)","timestamp":"2025-10-29 08:48:29"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":971.926719,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 08:48:29"}
{"body":{"values":{"0":{"paramName":"pageID","paramVal":"11"},"1":{"paramName":"pageName","paramVal":"CRUD Template"},"2":{"paramName":"xrefID","paramVal":"11"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:48:30"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:48:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":167.302264,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:30"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:48:30"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:48:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":373.350006,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:48:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":490.657373,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:48:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":194.734549,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[setVals.js] Set 3 values for pc7900@gmail.com","timestamp":"2025-10-29 08:48:31"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (1232ms)","timestamp":"2025-10-29 08:48:31"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1231.529832,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 08:48:31"}
{"body":{"eventSQLId":"studio-xrefHierarchy","params":{"pageID":"11"}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:31"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefHierarchy","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":43.580372,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":95.680395,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[execEventType.js] Resolved from context :xrefID → 11","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[execEventType.js] Executing SQL: CALL api_wf.sp_hier_structure(11)","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":158.391588,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (300ms)","timestamp":"2025-10-29 08:48:32"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:32"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":139.403987,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 65 \r\nAND active = 1","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":56.555498,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (198ms)","timestamp":"2025-10-29 08:48:32"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:32"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":341.67615,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 65\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":51.120708,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (395ms)","timestamp":"2025-10-29 08:48:32"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:32"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":140.621254,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 77 \r\nAND active = 1","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":248.048049,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (390ms)","timestamp":"2025-10-29 08:48:33"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:33"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":324.142478,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 77\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":58.106678,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (384ms)","timestamp":"2025-10-29 08:48:33"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:33"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":68.083934,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 66 \r\nAND active = 1","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":109.604678,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (180ms)","timestamp":"2025-10-29 08:48:33"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:33"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":55.318043,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 66\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":230.115399,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (287ms)","timestamp":"2025-10-29 08:48:33"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:33"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:33"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:33"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":47.85886,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 67 \r\nAND active = 1","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 4","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":157.580573,"method":"GET","operation":"database_query","rowCount":4,"success":true},"timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (208ms)","timestamp":"2025-10-29 08:48:34"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:34"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":182.643833,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 67\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":157.142509,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (343ms)","timestamp":"2025-10-29 08:48:34"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:34"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.920459,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 68 \r\nAND active = 1","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":89.515039,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (134ms)","timestamp":"2025-10-29 08:48:34"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:34"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":197.925613,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 68\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:34"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:34"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":204.278022,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (405ms)","timestamp":"2025-10-29 08:48:35"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:35"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":50.64043,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 69 \r\nAND active = 1","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":234.894341,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (288ms)","timestamp":"2025-10-29 08:48:35"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:48:35"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":202.399302,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 69\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":101.583082,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (306ms)","timestamp":"2025-10-29 08:48:35"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:48:35"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":190.535998,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:35"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:48:35"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (192ms)","timestamp":"2025-10-29 08:48:35"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:48:40"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:48:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":69.613031,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:40"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:48:40"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (72ms)","timestamp":"2025-10-29 08:48:40"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:48:40"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:48:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:48:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:48:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:48:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":92.66288,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:48:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:48:40"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:48:40"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (95ms)","timestamp":"2025-10-29 08:48:40"}
{"body":{"values":{"0":{"paramName":"appID","paramVal":"whatsfresh"},"1":{"paramName":"appName","paramVal":"whatsfresh"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:49:11"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:49:11"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:11"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:11"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:11"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":85.860608,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:11"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:11"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:49:11"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:49:11"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":412.527912,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:49:12"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:12"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:49:12"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:49:12"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":274.892597,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:49:12"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:12"}
{"level":"debug","message":"[setVals.js] Set 2 values for pc7900@gmail.com","timestamp":"2025-10-29 08:49:12"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (776ms)","timestamp":"2025-10-29 08:49:12"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":775.911132,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 08:49:12"}
{"body":{"values":{"0":{"paramName":"pageID","paramVal":"1"},"1":{"paramName":"pageName","paramVal":"Ingredient Types"},"2":{"paramName":"xrefID","paramVal":"1"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:49:14"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:49:14"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:14"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:14"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:14"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":137.256599,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:14"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:14"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:49:14"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:49:14"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":407.956633,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:49:15"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:15"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:49:15"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:49:15"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":408.452137,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:49:15"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:15"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:49:15"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:49:15"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":507.337911,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:49:15"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:15"}
{"level":"debug","message":"[setVals.js] Set 3 values for pc7900@gmail.com","timestamp":"2025-10-29 08:49:15"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (1465ms)","timestamp":"2025-10-29 08:49:15"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1464.5737589999999,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 08:49:15"}
{"body":{"eventSQLId":"studio-xrefHierarchy","params":{"pageID":"1"}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:49:15"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:49:15"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefHierarchy","timestamp":"2025-10-29 08:49:15"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:15"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:15"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":193.146631,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":57.801721,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[execEventType.js] Resolved from context :xrefID → 1","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[execEventType.js] Executing SQL: CALL api_wf.sp_hier_structure(1)","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":147.906224,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (402ms)","timestamp":"2025-10-29 08:49:16"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":60}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:49:16"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":113.282336,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 60...","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 60 \r\nAND active = 1","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":379.762971,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (495ms)","timestamp":"2025-10-29 08:49:16"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":60}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:49:16"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":40.625403,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 60...","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 60\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":259.327489,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (302ms)","timestamp":"2025-10-29 08:49:17"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":56}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:49:17"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":47.290746,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 56...","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 56 \r\nAND active = 1","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 4","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":230.006567,"method":"GET","operation":"database_query","rowCount":4,"success":true},"timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (280ms)","timestamp":"2025-10-29 08:49:17"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":56}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:49:17"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":59.733682,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 56...","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 56\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":301.003104,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (363ms)","timestamp":"2025-10-29 08:49:17"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":59}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:49:17"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":33.795327,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 59...","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 59 \r\nAND active = 1","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":132.024406,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (168ms)","timestamp":"2025-10-29 08:49:18"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":59}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:49:18"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":49.656703,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 59...","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 59\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":188.372137,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (240ms)","timestamp":"2025-10-29 08:49:18"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":63}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:49:18"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":36.165585,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 63...","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 63 \r\nAND active = 1","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":176.66912,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (215ms)","timestamp":"2025-10-29 08:49:18"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":63}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:49:18"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":65.594692,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 63...","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 63\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":124.105574,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (192ms)","timestamp":"2025-10-29 08:49:18"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:49:18"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":43.093194,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:18"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 1","timestamp":"2025-10-29 08:49:18"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 200 (45ms)","timestamp":"2025-10-29 08:49:18"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:49:25"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:49:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":613.878909,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:25"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 1","timestamp":"2025-10-29 08:49:25"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (615ms)","timestamp":"2025-10-29 08:49:25"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":615.387808,"method":"GET","operation":"http_request","path":"/api/getVal","status":304},"timestamp":"2025-10-29 08:49:25"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:49:25"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:49:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:49:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:49:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:49:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":296.809283,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:49:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:49:26"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 1","timestamp":"2025-10-29 08:49:26"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (300ms)","timestamp":"2025-10-29 08:49:26"}
{"body":{"eventSQLId":"studio-eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:18"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventTypeList","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:18"}
{"body":{"eventSQLId":"studio-eventSqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:18"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventSqlList","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:18"}
{"body":{"eventSQLId":"studio-triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:18"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-triggerList","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":38.27386,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":35.29569,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":38.89539,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-triggerList (ID: 16)","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:18"}
{"body":{"eventSQLId":"studio-pageRegistry","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:18"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-pageRegistry","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 33","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":36.163531,"method":"GET","operation":"database_query","rowCount":33,"success":true},"timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (74ms)","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.854877,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-triggerList (ID: 16)","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (75ms)","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":71.630719,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (112ms)","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":37.724723,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  api_wf.page_registry pr \r\norder by appName, pageName","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 17","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":163.619754,"method":"GET","operation":"database_query","rowCount":17,"success":true},"timestamp":"2025-10-29 08:53:18"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 08:53:18"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (203ms)","timestamp":"2025-10-29 08:53:18"}
{"body":{"values":{"0":{"paramName":"appID","paramVal":"templates"},"1":{"paramName":"appName","paramVal":"templates"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:53:25"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:53:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":173.745352,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:25"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:53:25"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:53:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":226.183267,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:53:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:25"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:53:25"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:53:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":282.368979,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:53:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:26"}
{"level":"debug","message":"[setVals.js] Set 2 values for pc7900@gmail.com","timestamp":"2025-10-29 08:53:26"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (686ms)","timestamp":"2025-10-29 08:53:26"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":686.147063,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 08:53:26"}
{"body":{"values":{"0":{"paramName":"pageID","paramVal":"11"},"1":{"paramName":"pageName","paramVal":"CRUD Template"},"2":{"paramName":"xrefID","paramVal":"11"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:53:28"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:53:28"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:28"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":91.083093,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:28"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:53:28"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:53:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":409.519019,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:53:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:28"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:53:28"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:53:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":307.125566,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:53:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:28"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:53:28"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:53:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":500.177897,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[setVals.js] Set 3 values for pc7900@gmail.com","timestamp":"2025-10-29 08:53:29"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (1312ms)","timestamp":"2025-10-29 08:53:29"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1311.744993,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 08:53:29"}
{"body":{"eventSQLId":"studio-xrefHierarchy","params":{"pageID":"11"}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:29"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefHierarchy","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":95.256997,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":129.680377,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[execEventType.js] Resolved from context :xrefID → 11","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[execEventType.js] Executing SQL: CALL api_wf.sp_hier_structure(11)","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:53:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":61.7422,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:29"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 08:53:29"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (289ms)","timestamp":"2025-10-29 08:53:29"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:29"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":38.551997,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 65 \r\nAND active = 1","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":163.203193,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (204ms)","timestamp":"2025-10-29 08:53:30"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:30"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":45.463734,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 65\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":151.501212,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (199ms)","timestamp":"2025-10-29 08:53:30"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:30"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":50.955869,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 77 \r\nAND active = 1","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":457.143442,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (511ms)","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":510.532215,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-29 08:53:30"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:30"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":80.821257,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 77\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":140.560215,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (223ms)","timestamp":"2025-10-29 08:53:30"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:30"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":44.095729,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 66 \r\nAND active = 1","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":197.171911,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (243ms)","timestamp":"2025-10-29 08:53:31"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:31"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.620732,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 66\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":56.244041,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (91ms)","timestamp":"2025-10-29 08:53:31"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:31"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.554337,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 67 \r\nAND active = 1","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 4","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":168.780988,"method":"GET","operation":"database_query","rowCount":4,"success":true},"timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (205ms)","timestamp":"2025-10-29 08:53:31"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:31"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":188.779774,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 67\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":111.579116,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (303ms)","timestamp":"2025-10-29 08:53:31"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:31"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":86.920746,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 68 \r\nAND active = 1","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:31"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:31"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":203.987936,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (294ms)","timestamp":"2025-10-29 08:53:32"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:32"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.5782,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 68\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":147.250669,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (192ms)","timestamp":"2025-10-29 08:53:32"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:32"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":33.49807,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 69 \r\nAND active = 1","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":156.253987,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (191ms)","timestamp":"2025-10-29 08:53:32"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:53:32"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":61.793384,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 69\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":44.154696,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (108ms)","timestamp":"2025-10-29 08:53:32"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:53:32"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":47.013397,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:32"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:53:32"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 200 (49ms)","timestamp":"2025-10-29 08:53:32"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:53:34"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:53:34"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:34"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:34"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":78.111966,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:34"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:53:34"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (81ms)","timestamp":"2025-10-29 08:53:34"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:53:34"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:53:34"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:53:34"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:53:34"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:53:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":69.814714,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:53:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:53:34"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:53:34"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (74ms)","timestamp":"2025-10-29 08:53:34"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/eventTypes","timestamp":"2025-10-29 08:54:22"}
{"level":"http","message":"[getEventTypes.js] GET /api/eventTypes","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[getEventTypes.js] Fetching all active eventTypes","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":287.871958,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:54:22"}
{"level":"warn","message":"[getEventTypes.js] Invalid JSON in style for Modal: Bad control character in string literal in JSON at position 300 (line 12 column 21)","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"[getEventTypes.js] Fetched 25 eventTypes","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"[app.js]  Response: GET /api/eventTypes 200 (292ms)","timestamp":"2025-10-29 08:54:22"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/eventTypes","timestamp":"2025-10-29 08:54:22"}
{"level":"http","message":"[getEventTypes.js] GET /api/eventTypes","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[getEventTypes.js] Fetching all active eventTypes","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:54:22"}
{"body":{"values":{"0":{"paramName":"tableName","paramVal":"whatsfresh.ingridient_types"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:54:22"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:54:22"}
{"body":{"values":{"0":{"paramName":"tableName","paramVal":"whatsfresh.ingridient_types"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:54:22"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":45.506955,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":49.082596,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":149.74376,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:54:22"}
{"level":"warn","message":"[getEventTypes.js] Invalid JSON in style for Modal: Bad control character in string literal in JSON at position 300 (line 12 column 21)","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"[getEventTypes.js] Fetched 25 eventTypes","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"[app.js]  Response: GET /api/eventTypes 304 (152ms)","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":272.979741,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (321ms)","timestamp":"2025-10-29 08:54:22"}
{"body":{"eventSQLId":"{pageName}List","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:54:22"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}List","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":304.953252,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (355ms)","timestamp":"2025-10-29 08:54:22"}
{"body":{"eventSQLId":"{pageName}List","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:54:22"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}List","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":88.741226,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}List (ID: 22)","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:54:22"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:54:22"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:54:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":131.608377,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}List (ID: 22)","timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:54:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:54:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":96.997105,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[execEventType.js] Resolved from context :account_id → 3","timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id,\r\n name,\r\n description,\r\n account_id\r\nFROM whatsfresh.ingredient_types\r\nWHERE account_id = 3\r\n ","timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:54:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:54:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":96.544895,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[execEventType.js] Resolved from context :account_id → 3","timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id,\r\n name,\r\n description,\r\n account_id\r\nFROM whatsfresh.ingredient_types\r\nWHERE account_id = 3\r\n ","timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:54:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 9","timestamp":"2025-10-29 08:54:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":122.083819,"method":"GET","operation":"database_query","rowCount":9,"success":true},"timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:54:23"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}List (ID: 22)","timestamp":"2025-10-29 08:54:23"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (310ms)","timestamp":"2025-10-29 08:54:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 9","timestamp":"2025-10-29 08:54:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":118.953731,"method":"GET","operation":"database_query","rowCount":9,"success":true},"timestamp":"2025-10-29 08:54:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:54:23"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}List (ID: 22)","timestamp":"2025-10-29 08:54:23"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (349ms)","timestamp":"2025-10-29 08:54:23"}
{"body":{"eventSQLId":"studio-eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:16"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventTypeList","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:16"}
{"body":{"eventSQLId":"studio-eventSqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:16"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventSqlList","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:16"}
{"body":{"eventSQLId":"studio-triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:16"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-triggerList","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":58.295525,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":62.608335,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:16"}
{"body":{"eventSQLId":"studio-pageRegistry","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:16"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-pageRegistry","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":111.711654,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-triggerList (ID: 16)","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":56.024661,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (121ms)","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.131481,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  api_wf.page_registry pr \r\norder by appName, pageName","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 33","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":97.522203,"method":"GET","operation":"database_query","rowCount":33,"success":true},"timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (158ms)","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":43.633336,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-triggerList (ID: 16)","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (158ms)","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 17","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":53.027895,"method":"GET","operation":"database_query","rowCount":17,"success":true},"timestamp":"2025-10-29 08:56:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 08:56:16"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (91ms)","timestamp":"2025-10-29 08:56:16"}
{"body":{"values":{"0":{"paramName":"appID","paramVal":"templates"},"1":{"paramName":"appName","paramVal":"templates"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:56:21"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:56:21"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:21"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:21"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":37.607713,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:21"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:56:21"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:56:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":421.203128,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:56:21"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:21"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:56:21"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:56:21"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":280.055358,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:56:22"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:22"}
{"level":"debug","message":"[setVals.js] Set 2 values for pc7900@gmail.com","timestamp":"2025-10-29 08:56:22"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (742ms)","timestamp":"2025-10-29 08:56:22"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":742.061184,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 08:56:22"}
{"body":{"values":{"0":{"paramName":"pageID","paramVal":"11"},"1":{"paramName":"pageName","paramVal":"CRUD Template"},"2":{"paramName":"xrefID","paramVal":"11"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:56:23"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:56:23"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:23"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:23"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":75.401801,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:23"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:56:23"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:56:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":392.270085,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:56:23"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:23"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:56:23"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:56:23"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":203.905236,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:56:24"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":415.021295,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[setVals.js] Set 3 values for pc7900@gmail.com","timestamp":"2025-10-29 08:56:24"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (1090ms)","timestamp":"2025-10-29 08:56:24"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1090.369801,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 08:56:24"}
{"body":{"eventSQLId":"studio-xrefHierarchy","params":{"pageID":"11"}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:24"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefHierarchy","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:24"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:24"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.3393,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:24"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:24"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":135.047596,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[execEventType.js] Resolved from context :xrefID → 11","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[execEventType.js] Executing SQL: CALL api_wf.sp_hier_structure(11)","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:24"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:56:24"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":205.363907,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:24"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 08:56:24"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (385ms)","timestamp":"2025-10-29 08:56:24"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:24"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:24"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:24"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":92.899005,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 65 \r\nAND active = 1","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":100.64401,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (196ms)","timestamp":"2025-10-29 08:56:25"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:25"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":93.383329,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 65\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":98.925414,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (195ms)","timestamp":"2025-10-29 08:56:25"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:25"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":90.04639,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 77 \r\nAND active = 1","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":61.359784,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (153ms)","timestamp":"2025-10-29 08:56:25"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:25"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":133.830115,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 77\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":100.839393,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (237ms)","timestamp":"2025-10-29 08:56:25"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:25"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":92.015581,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 66 \r\nAND active = 1","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":101.523161,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (196ms)","timestamp":"2025-10-29 08:56:25"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:25"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:25"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:25"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":91.698625,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 66\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":103.035357,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (197ms)","timestamp":"2025-10-29 08:56:26"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:26"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":48.604373,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 67 \r\nAND active = 1","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 4","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":77.450115,"method":"GET","operation":"database_query","rowCount":4,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (128ms)","timestamp":"2025-10-29 08:56:26"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:26"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.871328,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 67\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.509796,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (66ms)","timestamp":"2025-10-29 08:56:26"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:26"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":76.399601,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 68 \r\nAND active = 1","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":65.11458,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (143ms)","timestamp":"2025-10-29 08:56:26"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:26"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.139125,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 68\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":95.55762,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (139ms)","timestamp":"2025-10-29 08:56:26"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:26"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":31.277718,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 69 \r\nAND active = 1","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.668444,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (65ms)","timestamp":"2025-10-29 08:56:26"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:26"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":31.46351,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 69\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.489747,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (65ms)","timestamp":"2025-10-29 08:56:26"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:56:26"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":38.713571,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:26"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:56:26"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (40ms)","timestamp":"2025-10-29 08:56:26"}
{"body":{"values":{"0":{"paramName":"xrefID","paramVal":77}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:56:29"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.762917,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:56:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":371.256404,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 08:56:29"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (407ms)","timestamp":"2025-10-29 08:56:29"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:29"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:29"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:29"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":46.38958,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 77 \r\nAND active = 1","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:29"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.821228,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 77\r\nORDER BY class, ordr","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":147.274637,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:30"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 08:56:30"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (196ms)","timestamp":"2025-10-29 08:56:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 08:56:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":252.706504,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 08:56:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:30"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 08:56:30"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (297ms)","timestamp":"2025-10-29 08:56:30"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:56:43"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:56:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":144.5376,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:43"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:56:43"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (146ms)","timestamp":"2025-10-29 08:56:43"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 08:56:43"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 08:56:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":41.872014,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:43"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 08:56:43"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (43ms)","timestamp":"2025-10-29 08:56:43"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/eventTypes","timestamp":"2025-10-29 08:56:55"}
{"level":"http","message":"[getEventTypes.js] GET /api/eventTypes","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[getEventTypes.js] Fetching all active eventTypes","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:55"}
{"body":{"values":{"0":{"paramName":"tableName","paramVal":"whatsfresh.ingridient_types"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:56:55"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:55"}
{"body":{"values":{"0":{"paramName":"tableName","paramVal":"whatsfresh.ingridient_types"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 08:56:55"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":49.267728,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":50.553153,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":251.729814,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:55"}
{"level":"warn","message":"[getEventTypes.js] Invalid JSON in style for Modal: Bad control character in string literal in JSON at position 300 (line 12 column 21)","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"[getEventTypes.js] Fetched 25 eventTypes","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"[app.js]  Response: GET /api/eventTypes 304 (254ms)","timestamp":"2025-10-29 08:56:55"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/eventTypes","timestamp":"2025-10-29 08:56:55"}
{"level":"http","message":"[getEventTypes.js] GET /api/eventTypes","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[getEventTypes.js] Fetching all active eventTypes","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":267.450888,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (321ms)","timestamp":"2025-10-29 08:56:55"}
{"body":{"eventSQLId":"{pageName}List","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:55"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}List","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":307.199565,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (357ms)","timestamp":"2025-10-29 08:56:55"}
{"body":{"eventSQLId":"{pageName}List","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 08:56:55"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}List","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":149.543543,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:55"}
{"level":"warn","message":"[getEventTypes.js] Invalid JSON in style for Modal: Bad control character in string literal in JSON at position 300 (line 12 column 21)","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"[getEventTypes.js] Fetched 25 eventTypes","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"[app.js]  Response: GET /api/eventTypes 304 (151ms)","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.161038,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}List (ID: 22)","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":65.538579,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}List (ID: 22)","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":51.745934,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[execEventType.js] Resolved from context :account_id → 3","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id,\r\n name,\r\n description,\r\n account_id\r\nFROM whatsfresh.ingredient_types\r\nWHERE account_id = 3\r\n ","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:55"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:55"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 9","timestamp":"2025-10-29 08:56:56"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":85.504719,"method":"GET","operation":"database_query","rowCount":9,"success":true},"timestamp":"2025-10-29 08:56:56"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:56"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}List (ID: 22)","timestamp":"2025-10-29 08:56:56"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (204ms)","timestamp":"2025-10-29 08:56:56"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 08:56:56"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":141.514821,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 08:56:56"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:56"}
{"level":"debug","message":"[execEventType.js] Resolved from context :account_id → 3","timestamp":"2025-10-29 08:56:56"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id,\r\n name,\r\n description,\r\n account_id\r\nFROM whatsfresh.ingredient_types\r\nWHERE account_id = 3\r\n ","timestamp":"2025-10-29 08:56:56"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 08:56:56"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 08:56:56"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 9","timestamp":"2025-10-29 08:56:56"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":283.953005,"method":"GET","operation":"database_query","rowCount":9,"success":true},"timestamp":"2025-10-29 08:56:56"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 08:56:56"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}List (ID: 22)","timestamp":"2025-10-29 08:56:56"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (461ms)","timestamp":"2025-10-29 08:56:56"}
{"body":{"eventSQLId":"studio-eventTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:27"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventTypeList","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:27"}
{"body":{"eventSQLId":"studio-eventSqlList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:27"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-eventSqlList","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:27"}
{"body":{"eventSQLId":"studio-triggerList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:27"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-triggerList","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":45.774861,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, name, category, title, style\r\nFROM api_wf.eventType\r\nORDER BY Hier, name","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":40.928514,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, qryName, qrySQL, description\r\nFROM api_wf.eventSQL\r\nWHERE active = 1\r\nORDER BY qryName","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:27"}
{"body":{"eventSQLId":"studio-pageRegistry","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:27"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-pageRegistry","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":77.045235,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 09:05:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventTypeList (ID: 9)","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (126ms)","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":111.10324,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:28"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-triggerList (ID: 16)","timestamp":"2025-10-29 09:05:28"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select a.id, a.trigType, content_type, a.is_dom_event, a.name, \r\na.description, a.example \r\nfrom    api_wf.triggers a \r\norder by a.trigType, name","timestamp":"2025-10-29 09:05:28"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:28"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 33","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":78.599259,"method":"GET","operation":"database_query","rowCount":33,"success":true},"timestamp":"2025-10-29 09:05:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-eventSqlList (ID: 17)","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (123ms)","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":67.187703,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:28"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 09:05:28"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, appName, pageName, pageTitle, \r\ntableName, tableID, pr.contextKey, pr.routePath\r\nfrom  api_wf.page_registry pr \r\norder by appName, pageName","timestamp":"2025-10-29 09:05:28"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:28"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 17","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":44.433896,"method":"GET","operation":"database_query","rowCount":17,"success":true},"timestamp":"2025-10-29 09:05:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-pageRegistry (ID: 32)","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (114ms)","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 23","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":203.155391,"method":"GET","operation":"database_query","rowCount":23,"success":true},"timestamp":"2025-10-29 09:05:28"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-triggerList (ID: 16)","timestamp":"2025-10-29 09:05:28"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (317ms)","timestamp":"2025-10-29 09:05:28"}
{"body":{"values":{"0":{"paramName":"appID","paramVal":"templates"},"1":{"paramName":"appName","paramVal":"templates"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:05:34"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:05:34"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:34"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:34"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":100.701836,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:34"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:05:34"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:05:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":313.547361,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:05:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:34"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:05:34"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:05:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":299.709695,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:05:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:34"}
{"level":"debug","message":"[setVals.js] Set 2 values for pc7900@gmail.com","timestamp":"2025-10-29 09:05:34"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (717ms)","timestamp":"2025-10-29 09:05:34"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":717.034927,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 09:05:34"}
{"body":{"values":{"0":{"paramName":"pageID","paramVal":"11"},"1":{"paramName":"pageName","paramVal":"CRUD Template"},"2":{"paramName":"xrefID","paramVal":"11"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:05:37"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:05:37"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:37"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:37"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:37"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":37.240505,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:37"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:37"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:05:37"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:05:37"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":210.829778,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":179.760844,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":143.487996,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[setVals.js] Set 3 values for pc7900@gmail.com","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (575ms)","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":574.855556,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 09:05:38"}
{"body":{"eventSQLId":"studio-xrefHierarchy","params":{"pageID":"11"}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:38"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefHierarchy","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":43.060979,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":148.600558,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[execEventType.js] Resolved from context :xrefID → 11","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[execEventType.js] Executing SQL: CALL api_wf.sp_hier_structure(11)","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":68.652148,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (262ms)","timestamp":"2025-10-29 09:05:38"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:38"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":82.376809,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 65 \r\nAND active = 1","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":201.677177,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (286ms)","timestamp":"2025-10-29 09:05:39"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:39"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.365839,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 65\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":158.179904,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (201ms)","timestamp":"2025-10-29 09:05:39"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:39"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":51.914022,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 77 \r\nAND active = 1","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":145.144562,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (199ms)","timestamp":"2025-10-29 09:05:39"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:39"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":36.128701,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 77\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":154.405068,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (192ms)","timestamp":"2025-10-29 09:05:39"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:39"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":51.326746,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 66 \r\nAND active = 1","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":145.500903,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (200ms)","timestamp":"2025-10-29 09:05:39"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:39"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":91.622053,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 66\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":100.357818,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (194ms)","timestamp":"2025-10-29 09:05:40"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:40"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":92.230748,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 67 \r\nAND active = 1","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 4","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":203.605476,"method":"GET","operation":"database_query","rowCount":4,"success":true},"timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (298ms)","timestamp":"2025-10-29 09:05:40"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:40"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":43.140584,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 67\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":63.571247,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (108ms)","timestamp":"2025-10-29 09:05:40"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:40"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":71.60157,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 68 \r\nAND active = 1","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":110.368948,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (184ms)","timestamp":"2025-10-29 09:05:40"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:40"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":40.597676,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 68\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":299.630144,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (342ms)","timestamp":"2025-10-29 09:05:41"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:41"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.323518,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 69 \r\nAND active = 1","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":136.756363,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (173ms)","timestamp":"2025-10-29 09:05:41"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:41"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":76.584617,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 69\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":172.126758,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (250ms)","timestamp":"2025-10-29 09:05:41"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 09:05:41"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":47.895318,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:41"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 09:05:41"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (49ms)","timestamp":"2025-10-29 09:05:41"}
{"body":{"values":{"0":{"paramName":"xrefID","paramVal":77}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:05:44"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":136.02237,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":379.64062,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (518ms)","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":518.114518,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 09:05:44"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:44"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:44"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:05:44"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":46.623267,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 77\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":53.902741,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 77 \r\nAND active = 1","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":65.191966,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (114ms)","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":63.011357,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:05:44"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (120ms)","timestamp":"2025-10-29 09:05:44"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-29 09:11:54"}
{"body":{"data":{"paramName":"text","paramVal":"{pageConfig.props.title}","xref_id":77},"method":"INSERT","table":"api_wf.eventProps"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 09:14:04"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 09:14:04"}
{"data":{"paramName":"text","paramVal":"{pageConfig.props.title}","xref_id":77},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.eventProps","timestamp":"2025-10-29 09:14:04"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:14:04"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:14:04"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:14:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":127.719751,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:14:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:04"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:14:04"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:14:04"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:14:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":41.435894,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:14:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:04"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.eventProps (xref_id, paramName, paramVal, created_at, created_by) VALUES (77, 'text', '{pageConfig.props.title}', NOW(), 'Paul')","timestamp":"2025-10-29 09:14:04"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:14:04"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:14:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":338.496603,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:14:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:04"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.eventProps","timestamp":"2025-10-29 09:14:04"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 09:14:04"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (510ms)","timestamp":"2025-10-29 09:14:04"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":510.31891,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-29 09:14:04"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 09:14:15"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 09:14:15"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:14:15"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:14:15"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:14:15"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":82.535958,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:14:15"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:15"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 09:14:15"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (84ms)","timestamp":"2025-10-29 09:14:15"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 09:14:15"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 09:14:15"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:14:15"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:14:15"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:14:15"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":89.873403,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:14:15"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:15"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 09:14:15"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (92ms)","timestamp":"2025-10-29 09:14:15"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/eventTypes","timestamp":"2025-10-29 09:14:29"}
{"level":"http","message":"[getEventTypes.js] GET /api/eventTypes","timestamp":"2025-10-29 09:14:29"}
{"level":"debug","message":"[getEventTypes.js] Fetching all active eventTypes","timestamp":"2025-10-29 09:14:29"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:14:29"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:14:29"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":244.048163,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:30"}
{"level":"warn","message":"[getEventTypes.js] Invalid JSON in style for Modal: Bad control character in string literal in JSON at position 300 (line 12 column 21)","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[getEventTypes.js] Fetched 25 eventTypes","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[app.js]  Response: GET /api/eventTypes 200 (248ms)","timestamp":"2025-10-29 09:14:30"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/eventTypes","timestamp":"2025-10-29 09:14:30"}
{"level":"http","message":"[getEventTypes.js] GET /api/eventTypes","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[getEventTypes.js] Fetching all active eventTypes","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:14:30"}
{"body":{"values":{"0":{"paramName":"tableName","paramVal":"whatsfresh.ingridient_types"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:14:30"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:14:30"}
{"body":{"values":{"0":{"paramName":"tableName","paramVal":"whatsfresh.ingridient_types"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:14:30"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":105.650892,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":171.950576,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:30"}
{"level":"warn","message":"[getEventTypes.js] Invalid JSON in style for Modal: Bad control character in string literal in JSON at position 300 (line 12 column 21)","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[getEventTypes.js] Fetched 25 eventTypes","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[app.js]  Response: GET /api/eventTypes 304 (174ms)","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":115.585647,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":245.368258,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (352ms)","timestamp":"2025-10-29 09:14:30"}
{"body":{"eventSQLId":"{pageName}List","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:14:30"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}List","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":268.260237,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (385ms)","timestamp":"2025-10-29 09:14:30"}
{"body":{"eventSQLId":"{pageName}List","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:14:30"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}List","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":33.283724,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}List (ID: 22)","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":35.19546,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[execEventType.js] Resolved from context :account_id → 3","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id,\r\n name,\r\n description,\r\n account_id\r\nFROM whatsfresh.ingredient_types\r\nWHERE account_id = 3\r\n ","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":73.169281,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}List (ID: 22)","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 9","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":30.219454,"method":"GET","operation":"database_query","rowCount":9,"success":true},"timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}List (ID: 22)","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (100ms)","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":72.234553,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[execEventType.js] Resolved from context :account_id → 3","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id,\r\n name,\r\n description,\r\n account_id\r\nFROM whatsfresh.ingredient_types\r\nWHERE account_id = 3\r\n ","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 9","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":69.847212,"method":"GET","operation":"database_query","rowCount":9,"success":true},"timestamp":"2025-10-29 09:14:30"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}List (ID: 22)","timestamp":"2025-10-29 09:14:30"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (217ms)","timestamp":"2025-10-29 09:14:30"}
{"body":{"data":{"id":67,"paramName":"text","paramVal":"{{pageConfig.props.title}}","xref_id":77},"method":"UPDATE","primaryKey":"id","table":"api_wf.eventProps"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 09:15:17"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 09:15:17"}
{"data":{"id":67,"paramName":"text","paramVal":"{{pageConfig.props.title}}","xref_id":77},"level":"debug","message":"[dmlProcessor.js] Processing UPDATE on api_wf.eventProps","primaryKey":"id","timestamp":"2025-10-29 09:15:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:15:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:15:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:15:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":83.938392,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:15:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:15:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:15:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:15:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":79.519863,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:15:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:17"}
{"level":"info","message":"[dmlProcessor.js] Executing UPDATE SQL:","sql":"UPDATE api_wf.eventProps SET xref_id = 77, paramName = 'text', paramVal = '{{pageConfig.props.title}}', updated_at = NOW(), updated_by = 'Paul' WHERE id = 67","timestamp":"2025-10-29 09:15:17"}
{"level":"debug","message":"[dbUtils.js] Executing PATCH query: ********","timestamp":"2025-10-29 09:15:17"}
{"level":"debug","message":"[dbUtils.js] Handling PATCH-specific logic","timestamp":"2025-10-29 09:15:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":226.610777,"method":"PATCH","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:15:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:17"}
{"level":"info","message":"[dmlProcessor.js] UPDATE executed successfully on api_wf.eventProps","timestamp":"2025-10-29 09:15:17"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 09:15:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (394ms)","timestamp":"2025-10-29 09:15:17"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 09:15:34"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 09:15:34"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:15:34"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:15:34"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:15:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":40.586285,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:15:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:34"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 09:15:34"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (43ms)","timestamp":"2025-10-29 09:15:34"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 09:15:34"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 09:15:34"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:15:34"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:15:34"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:15:34"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":65.916261,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:15:34"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:34"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 09:15:34"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (67ms)","timestamp":"2025-10-29 09:15:34"}
{"body":{"values":{"0":{"paramName":"tableName","paramVal":"whatsfresh.ingridient_types"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:15:36"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:15:36"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/eventTypes","timestamp":"2025-10-29 09:15:36"}
{"level":"http","message":"[getEventTypes.js] GET /api/eventTypes","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[getEventTypes.js] Fetching all active eventTypes","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:15:36"}
{"body":{"values":{"0":{"paramName":"tableName","paramVal":"whatsfresh.ingridient_types"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:15:36"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":103.642564,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":99.097396,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":150.271705,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:36"}
{"level":"warn","message":"[getEventTypes.js] Invalid JSON in style for Modal: Bad control character in string literal in JSON at position 300 (line 12 column 21)","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"[getEventTypes.js] Fetched 25 eventTypes","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"[app.js]  Response: GET /api/eventTypes 304 (153ms)","timestamp":"2025-10-29 09:15:36"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/eventTypes","timestamp":"2025-10-29 09:15:36"}
{"level":"http","message":"[getEventTypes.js] GET /api/eventTypes","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[getEventTypes.js] Fetching all active eventTypes","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":115.261631,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (216ms)","timestamp":"2025-10-29 09:15:36"}
{"body":{"eventSQLId":"{pageName}List","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:15:36"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}List","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":66.343976,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:36"}
{"level":"warn","message":"[getEventTypes.js] Invalid JSON in style for Modal: Bad control character in string literal in JSON at position 300 (line 12 column 21)","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"[getEventTypes.js] Fetched 25 eventTypes","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"[app.js]  Response: GET /api/eventTypes 304 (68ms)","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":147.46718,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (253ms)","timestamp":"2025-10-29 09:15:36"}
{"body":{"eventSQLId":"{pageName}List","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:15:36"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}List","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":57.367923,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}List (ID: 22)","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":35.082661,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}List (ID: 22)","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:15:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:15:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:15:37"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":76.248248,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:15:37"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:37"}
{"level":"debug","message":"[execEventType.js] Resolved from context :account_id → 3","timestamp":"2025-10-29 09:15:37"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id,\r\n name,\r\n description,\r\n account_id\r\nFROM whatsfresh.ingredient_types\r\nWHERE account_id = 3\r\n ","timestamp":"2025-10-29 09:15:37"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:15:37"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:15:37"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:15:37"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":69.701904,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:15:37"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:37"}
{"level":"debug","message":"[execEventType.js] Resolved from context :account_id → 3","timestamp":"2025-10-29 09:15:37"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id,\r\n name,\r\n description,\r\n account_id\r\nFROM whatsfresh.ingredient_types\r\nWHERE account_id = 3\r\n ","timestamp":"2025-10-29 09:15:37"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:15:37"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:15:37"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 9","timestamp":"2025-10-29 09:15:37"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":40.379069,"method":"GET","operation":"database_query","rowCount":9,"success":true},"timestamp":"2025-10-29 09:15:37"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:37"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}List (ID: 22)","timestamp":"2025-10-29 09:15:37"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (147ms)","timestamp":"2025-10-29 09:15:37"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 9","timestamp":"2025-10-29 09:15:37"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":43.594718,"method":"GET","operation":"database_query","rowCount":9,"success":true},"timestamp":"2025-10-29 09:15:37"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:15:37"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}List (ID: 22)","timestamp":"2025-10-29 09:15:37"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (180ms)","timestamp":"2025-10-29 09:15:37"}
{"body":{"values":{"0":{"paramName":"appID","paramVal":"whatsfresh"},"1":{"paramName":"appName","paramVal":"whatsfresh"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:16:04"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:16:04"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:04"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:04"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":92.591912,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:04"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:04"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":408.723001,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:04"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:04"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":240.669202,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:05"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:05"}
{"level":"debug","message":"[setVals.js] Set 2 values for pc7900@gmail.com","timestamp":"2025-10-29 09:16:05"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (744ms)","timestamp":"2025-10-29 09:16:05"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":743.56392,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 09:16:05"}
{"body":{"values":{"0":{"paramName":"pageID","paramVal":"1"},"1":{"paramName":"pageName","paramVal":"Ingredient Types"},"2":{"paramName":"xrefID","paramVal":"1"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:16:07"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:16:07"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:07"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:07"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:07"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":163.329197,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:07"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:07"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:07"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:07"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":307.285018,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:07"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:07"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:07"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:07"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":400.171951,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":408.286549,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[setVals.js] Set 3 values for pc7900@gmail.com","timestamp":"2025-10-29 09:16:08"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (1282ms)","timestamp":"2025-10-29 09:16:08"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1281.9699110000001,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 09:16:08"}
{"body":{"eventSQLId":"studio-xrefHierarchy","params":{"pageID":"1"}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:08"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefHierarchy","timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":39.869306,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:08"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":154.753862,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[execEventType.js] Resolved from context :xrefID → 1","timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[execEventType.js] Executing SQL: CALL api_wf.sp_hier_structure(1)","timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:08"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:08"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":157.387311,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (354ms)","timestamp":"2025-10-29 09:16:09"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":60}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:09"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":131.740111,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 60...","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 60 \r\nAND active = 1","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":204.294052,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (337ms)","timestamp":"2025-10-29 09:16:09"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":60}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:09"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":54.988977,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 60...","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 60\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":144.360202,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (201ms)","timestamp":"2025-10-29 09:16:09"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":56}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:09"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":87.684246,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 56...","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 56 \r\nAND active = 1","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:09"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:09"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 4","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":203.343749,"method":"GET","operation":"database_query","rowCount":4,"success":true},"timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (293ms)","timestamp":"2025-10-29 09:16:10"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":56}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:10"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":54.667952,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 56...","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 56\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":243.007862,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (300ms)","timestamp":"2025-10-29 09:16:10"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":59}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:10"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":46.787578,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 59...","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 59 \r\nAND active = 1","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":248.093773,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (297ms)","timestamp":"2025-10-29 09:16:10"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":59}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:10"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":31.185086,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 59...","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 59\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":163.718344,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (197ms)","timestamp":"2025-10-29 09:16:10"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":63}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:10"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.253938,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 63...","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 63 \r\nAND active = 1","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:10"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:10"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 09:16:11"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":140.527609,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:11"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:11"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (185ms)","timestamp":"2025-10-29 09:16:11"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":63}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:11"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:11"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:11"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":35.686637,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 63...","timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 63\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:11"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 09:16:11"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":141.738146,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:11"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:11"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (179ms)","timestamp":"2025-10-29 09:16:11"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 09:16:11"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:11"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:11"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":50.862564,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:11"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 1","timestamp":"2025-10-29 09:16:11"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 200 (52ms)","timestamp":"2025-10-29 09:16:11"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 09:16:12"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 09:16:12"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:12"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:12"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:13"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":88.143322,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:13"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:13"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 1","timestamp":"2025-10-29 09:16:13"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (91ms)","timestamp":"2025-10-29 09:16:13"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 09:16:13"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 09:16:13"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:13"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:13"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:13"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":43.531933,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:13"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:13"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 1","timestamp":"2025-10-29 09:16:13"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (45ms)","timestamp":"2025-10-29 09:16:13"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/eventTypes","timestamp":"2025-10-29 09:16:14"}
{"level":"http","message":"[getEventTypes.js] GET /api/eventTypes","timestamp":"2025-10-29 09:16:14"}
{"level":"debug","message":"[getEventTypes.js] Fetching all active eventTypes","timestamp":"2025-10-29 09:16:14"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:14"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:14"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":184.56024,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:15"}
{"level":"warn","message":"[getEventTypes.js] Invalid JSON in style for Modal: Bad control character in string literal in JSON at position 300 (line 12 column 21)","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"[getEventTypes.js] Fetched 25 eventTypes","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"[app.js]  Response: GET /api/eventTypes 304 (187ms)","timestamp":"2025-10-29 09:16:15"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/eventTypes","timestamp":"2025-10-29 09:16:15"}
{"level":"http","message":"[getEventTypes.js] GET /api/eventTypes","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[getEventTypes.js] Fetching all active eventTypes","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:15"}
{"body":{"paramNames":{"0":"ingredient_type_id","1":"ingredient_id","2":"ingredient_batch_id"}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/clearVals","timestamp":"2025-10-29 09:16:15"}
{"level":"http","message":"[clearVals.js] POST /api/clearVals","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:15"}
{"body":{"paramNames":{"0":"ingredient_type_id","1":"ingredient_id","2":"ingredient_batch_id"}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/clearVals","timestamp":"2025-10-29 09:16:15"}
{"level":"http","message":"[clearVals.js] POST /api/clearVals","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":148.513099,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:15"}
{"level":"warn","message":"[getEventTypes.js] Invalid JSON in style for Modal: Bad control character in string literal in JSON at position 300 (line 12 column 21)","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"[getEventTypes.js] Fetched 25 eventTypes","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"[app.js]  Response: GET /api/eventTypes 304 (152ms)","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":39.709695,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":36.317674,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":428.451171,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":483.558106,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":283.515134,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":274.463616,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:15"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:15"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":303.790644,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[clearVals.js] Cleared 3 values for pc7900@gmail.com","timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"[app.js]  Response: POST /api/clearVals 200 (1060ms)","timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1059.858916,"method":"POST","operation":"http_request","path":"/api/clearVals","status":200},"timestamp":"2025-10-29 09:16:16"}
{"body":{"eventSQLId":"ingrTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:16"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: ingrTypeList","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":592.752052,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[clearVals.js] Cleared 3 values for pc7900@gmail.com","timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"[app.js]  Response: POST /api/clearVals 200 (1389ms)","timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":1389.454987,"method":"POST","operation":"http_request","path":"/api/clearVals","status":200},"timestamp":"2025-10-29 09:16:16"}
{"body":{"eventSQLId":"ingrTypeList","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:16"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: ingrTypeList","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":357.865533,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: ingrTypeList (ID: 11)","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":92.852615,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[execEventType.js] Resolved from context :account_id → 3","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, name, account_id\r\nfrom whatsfresh.ingredient_types\r\nwhere account_id = 3","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 9","timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":89.194188,"method":"GET","operation":"database_query","rowCount":9,"success":true},"timestamp":"2025-10-29 09:16:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: ingrTypeList (ID: 11)","timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (542ms)","timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":541.845409,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-29 09:16:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":504.555565,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:17"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: ingrTypeList (ID: 11)","timestamp":"2025-10-29 09:16:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":64.186516,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:17"}
{"level":"debug","message":"[execEventType.js] Resolved from context :account_id → 3","timestamp":"2025-10-29 09:16:17"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select id, name, account_id\r\nfrom whatsfresh.ingredient_types\r\nwhere account_id = 3","timestamp":"2025-10-29 09:16:17"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:17"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:17"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 9","timestamp":"2025-10-29 09:16:17"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":139.180414,"method":"GET","operation":"database_query","rowCount":9,"success":true},"timestamp":"2025-10-29 09:16:17"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:17"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: ingrTypeList (ID: 11)","timestamp":"2025-10-29 09:16:17"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (710ms)","timestamp":"2025-10-29 09:16:17"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":709.86009,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-29 09:16:17"}
{"body":{"values":{"0":{"paramName":"appID","paramVal":"templates"},"1":{"paramName":"appName","paramVal":"templates"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:16:32"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:16:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:33"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":164.152875,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:33"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:33"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:33"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:33"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":204.95367,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:33"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:33"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:33"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:33"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":204.250861,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:33"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:33"}
{"level":"debug","message":"[setVals.js] Set 2 values for pc7900@gmail.com","timestamp":"2025-10-29 09:16:33"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (576ms)","timestamp":"2025-10-29 09:16:33"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":575.999277,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 09:16:33"}
{"body":{"values":{"0":{"paramName":"pageID","paramVal":"11"},"1":{"paramName":"pageName","paramVal":"CRUD Template"},"2":{"paramName":"xrefID","paramVal":"11"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:16:35"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:35"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":189.054338,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":161.536172,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":351.122578,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":241.690991,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[setVals.js] Set 3 values for pc7900@gmail.com","timestamp":"2025-10-29 09:16:35"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (947ms)","timestamp":"2025-10-29 09:16:35"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":946.651522,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 09:16:35"}
{"body":{"eventSQLId":"studio-xrefHierarchy","params":{"pageID":"11"}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:35"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefHierarchy","timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:35"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:35"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":47.839882,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":104.834203,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Resolved from context :xrefID → 11","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Executing SQL: CALL api_wf.sp_hier_structure(11)","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":103.570122,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefHierarchy (ID: 3)","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (259ms)","timestamp":"2025-10-29 09:16:36"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:36"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.89761,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 65 \r\nAND active = 1","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":144.990424,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (189ms)","timestamp":"2025-10-29 09:16:36"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":65}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:36"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":101.538925,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 65...","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 65\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":153.106766,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (257ms)","timestamp":"2025-10-29 09:16:36"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:36"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":45.567675,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 77 \r\nAND active = 1","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":53.685912,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (101ms)","timestamp":"2025-10-29 09:16:36"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:36"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":132.829296,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 77\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":100.971603,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (235ms)","timestamp":"2025-10-29 09:16:37"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:37"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":191.192704,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 66 \r\nAND active = 1","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":36.801357,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (230ms)","timestamp":"2025-10-29 09:16:37"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:37"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":149.088267,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 66\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":147.015818,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (297ms)","timestamp":"2025-10-29 09:16:37"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:37"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":61.977246,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 67 \r\nAND active = 1","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 4","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":201.782666,"method":"GET","operation":"database_query","rowCount":4,"success":true},"timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (265ms)","timestamp":"2025-10-29 09:16:37"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":67}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:37"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":44.894325,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 67...","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 67\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:37"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:37"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":253.569614,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (300ms)","timestamp":"2025-10-29 09:16:38"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:38"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":47.527433,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 68 \r\nAND active = 1","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":58.936082,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (108ms)","timestamp":"2025-10-29 09:16:38"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":68}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:38"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":36.371613,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 68...","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 68\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":133.957113,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (172ms)","timestamp":"2025-10-29 09:16:38"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:38"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":103.134393,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 69 \r\nAND active = 1","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":102.10006,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (208ms)","timestamp":"2025-10-29 09:16:38"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:38"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":91.533222,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 69\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":203.130692,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (297ms)","timestamp":"2025-10-29 09:16:38"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 09:16:38"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:38"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:38"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":309.986248,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:39"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 09:16:39"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 200 (311ms)","timestamp":"2025-10-29 09:16:39"}
{"body":{"values":{"0":{"paramName":"xrefID","paramVal":77}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:16:48"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":105.31274,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":204.740665,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (312ms)","timestamp":"2025-10-29 09:16:48"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:48"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:48"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:16:48"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.692003,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 77 \r\nAND active = 1","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":39.002179,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 77\r\nORDER BY class, ordr","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":30.853827,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (71ms)","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":159.338227,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:16:48"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 09:16:48"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (196ms)","timestamp":"2025-10-29 09:16:48"}
{"body":{"data":{"id":67,"paramName":"text","paramVal":"{{pageConfig.props.title}}","xref_id":77},"method":"UPDATE","primaryKey":"id","table":"api_wf.eventProps"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 09:17:35"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 09:17:35"}
{"data":{"id":67,"paramName":"text","paramVal":"{{pageConfig.props.title}}","xref_id":77},"level":"debug","message":"[dmlProcessor.js] Processing UPDATE on api_wf.eventProps","primaryKey":"id","timestamp":"2025-10-29 09:17:35"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:17:35"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:17:35"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:17:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":91.658816,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:17:35"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:35"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:17:35"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:17:35"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:17:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":101.007495,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:17:35"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:35"}
{"level":"info","message":"[dmlProcessor.js] Executing UPDATE SQL:","sql":"UPDATE api_wf.eventProps SET xref_id = 77, paramName = 'text', paramVal = '{{pageConfig.props.title}}', updated_at = NOW(), updated_by = 'Paul' WHERE id = 67","timestamp":"2025-10-29 09:17:35"}
{"level":"debug","message":"[dbUtils.js] Executing PATCH query: ********","timestamp":"2025-10-29 09:17:35"}
{"level":"debug","message":"[dbUtils.js] Handling PATCH-specific logic","timestamp":"2025-10-29 09:17:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":614.389971,"method":"PATCH","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:17:35"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:35"}
{"level":"info","message":"[dmlProcessor.js] UPDATE executed successfully on api_wf.eventProps","timestamp":"2025-10-29 09:17:35"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 09:17:35"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (810ms)","timestamp":"2025-10-29 09:17:35"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":810.083068,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-29 09:17:35"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 09:17:50"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 09:17:50"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:17:50"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:17:50"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:17:51"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":144.790471,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:17:51"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:51"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 09:17:51"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (147ms)","timestamp":"2025-10-29 09:17:51"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 09:17:51"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 09:17:51"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:17:51"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:17:51"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:17:51"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.691442,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:17:51"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:51"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 09:17:51"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (34ms)","timestamp":"2025-10-29 09:17:51"}
{"body":{"values":{"0":{"paramName":"tableName","paramVal":"whatsfresh.ingridient_types"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:17:53"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:17:53"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/eventTypes","timestamp":"2025-10-29 09:17:53"}
{"level":"http","message":"[getEventTypes.js] GET /api/eventTypes","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[getEventTypes.js] Fetching all active eventTypes","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:17:53"}
{"body":{"values":{"0":{"paramName":"tableName","paramVal":"whatsfresh.ingridient_types"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:17:53"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":47.233664,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":60.403677,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":87.771733,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:53"}
{"level":"warn","message":"[getEventTypes.js] Invalid JSON in style for Modal: Bad control character in string literal in JSON at position 300 (line 12 column 21)","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[getEventTypes.js] Fetched 25 eventTypes","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[app.js]  Response: GET /api/eventTypes 304 (89ms)","timestamp":"2025-10-29 09:17:53"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/eventTypes","timestamp":"2025-10-29 09:17:53"}
{"level":"http","message":"[getEventTypes.js] GET /api/eventTypes","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[getEventTypes.js] Fetching all active eventTypes","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":108.853518,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (158ms)","timestamp":"2025-10-29 09:17:53"}
{"body":{"eventSQLId":"{pageName}List","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:17:53"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}List","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":127.161282,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (191ms)","timestamp":"2025-10-29 09:17:53"}
{"body":{"eventSQLId":"{pageName}List","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:17:53"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}List","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 25","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":108.509226,"method":"GET","operation":"database_query","rowCount":25,"success":true},"timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:53"}
{"level":"warn","message":"[getEventTypes.js] Invalid JSON in style for Modal: Bad control character in string literal in JSON at position 300 (line 12 column 21)","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[getEventTypes.js] Fetched 25 eventTypes","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[app.js]  Response: GET /api/eventTypes 304 (111ms)","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":31.692639,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}List (ID: 22)","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":65.607777,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}List (ID: 22)","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":66.842747,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[execEventType.js] Resolved from context :account_id → 3","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id,\r\n name,\r\n description,\r\n account_id\r\nFROM whatsfresh.ingredient_types\r\nWHERE account_id = 3\r\n ","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":64.089041,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[execEventType.js] Resolved from context :account_id → 3","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id,\r\n name,\r\n description,\r\n account_id\r\nFROM whatsfresh.ingredient_types\r\nWHERE account_id = 3\r\n ","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 9","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":36.001835,"method":"GET","operation":"database_query","rowCount":9,"success":true},"timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}List (ID: 22)","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (168ms)","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 9","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":40.051791,"method":"GET","operation":"database_query","rowCount":9,"success":true},"timestamp":"2025-10-29 09:17:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}List (ID: 22)","timestamp":"2025-10-29 09:17:53"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (141ms)","timestamp":"2025-10-29 09:17:53"}
{"body":{"values":{"0":{"paramName":"{contextKey}","paramVal":null}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:18:04"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:18:04"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:18:04"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:18:04"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:18:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.560263,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:18:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:18:04"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:18:04"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:18:04"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":429.843134,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:18:04"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:18:04"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 09:18:04"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (475ms)","timestamp":"2025-10-29 09:18:04"}
{"body":{"eventSQLId":"{pageName}Dtl","params":{"formData":null}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:18:04"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:18:04"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}Dtl","timestamp":"2025-10-29 09:18:04"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:18:04"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:18:04"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:18:05"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":182.637011,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:18:05"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:18:05"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}Dtl (ID: 23)","timestamp":"2025-10-29 09:18:05"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:18:05"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:18:05"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:18:05"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":204.502781,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:18:05"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:18:05"}
{"level":"debug","message":"[execEventType.js] Resolved from context :contextKey → 17","timestamp":"2025-10-29 09:18:05"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select \r\n\tid, \r\n\tname,\r\n\tdescription,\r\n\taccount_id\r\nfrom whatsfresh.ingredient_types\r\nwhere id = 17","timestamp":"2025-10-29 09:18:05"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:18:05"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:18:05"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:18:05"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":126.87405,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:18:05"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:18:05"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}Dtl (ID: 23)","timestamp":"2025-10-29 09:18:05"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (516ms)","timestamp":"2025-10-29 09:18:05"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":515.547884,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-29 09:18:05"}
{"body":{"values":{"0":{"paramName":"{contextKey}","paramVal":null}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 09:18:11"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 09:18:11"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:18:11"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:18:11"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:18:11"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":89.132002,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:18:11"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:18:11"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:18:11"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:18:11"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":260.801966,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 09:18:12"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (352ms)","timestamp":"2025-10-29 09:18:12"}
{"body":{"eventSQLId":"{pageName}Dtl","params":{"formData":null}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 09:18:12"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}Dtl","timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:18:12"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:18:12"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":44.769938,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}Dtl (ID: 23)","timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:18:12"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:18:12"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":148.934793,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[execEventType.js] Resolved from context :contextKey → 17","timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select \r\n\tid, \r\n\tname,\r\n\tdescription,\r\n\taccount_id\r\nfrom whatsfresh.ingredient_types\r\nwhere id = 17","timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:18:12"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:18:12"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.136656,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:18:12"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:18:12"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}Dtl (ID: 23)","timestamp":"2025-10-29 09:18:12"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (228ms)","timestamp":"2025-10-29 09:18:12"}
{"body":"{\n  \"method\": \"INSERT\",\n  \"table\": \"api_wf.plan_communications\",\n  \"data\": {\n    \"plan_id\": 51,\n    \"from_agent\": \"claude\",\n    \"to_agent\": \"Paul\",\n    \"type\": \"architecture\",\n    \"subject\": \"CRUD Template Cloning Workflow - Mermaid Diagram\",\n    \"message\": \"```mermaid\\nflowchart TD\\n    Start([User: Clone CRUD Template]) --> DefineTarget[Step 1: Define Target Page<br/>in page_registry]\\n    \\n    DefineTarget --> TargetData[\\\"User Inputs:<br/>• appName: whatsfresh<br/>• pageName: ingrType<br/>• pageTitle: Ingredient Types<br/>• tableName: whatsfresh.ingredient_types<br/>• contextKey: ingredient_type_id<br/>• parentID: [account_id]\\\"]\\n    \\n    TargetData --> InsertRegistry[\\\"INSERT into page_registry<br/>Returns: newPageID = 1\\\"]\\n    \\n    InsertRegistry --> Step2[Step 2: Clone Components]\\n    \\n    Step2 --> LoadTemplate[\\\"Load Template Components<br/>WHERE pageID = 11<br/>(CRUD template)\\\"]\\n    \\n    LoadTemplate --> TemplateComps[\\\"Components:<br/>65-Container (parent_id=65)<br/>77-Title (H3)<br/>66-AddNew (Button)<br/>67-Grid<br/>68-Form<br/>69-Submit (Button)\\\"]\\n    \\n    TemplateComps --> CloneLoop{For Each<br/>Component}\\n    \\n    CloneLoop --> GenerateID[Generate New xref_id<br/>newID = MAX(xref_id) + 1]\\n    \\n    GenerateID --> ReplaceTokens[\\\"Replace Template Tokens:<br/>• pageName → ingrType<br/>• pageTitle → Ingredient Types<br/>• {contextKey} → ingredient_type_id<br/>• {tableName} → ingredient_types\\\"]\\n    \\n    ReplaceTokens --> SetParent{Component<br/>Type?}\\n    \\n    SetParent -->|Container| SelfRef[\\\"parent_id = newID<br/>(self-reference)\\\"]\\n    SetParent -->|Other| ContainerRef[\\\"parent_id = new Container ID\\\"]\\n    \\n    SelfRef --> InsertComp[\\\"INSERT into eventComp_xref<br/>WITH pageID = newPageID\\\"]\\n    ContainerRef --> InsertComp\\n    \\n    InsertComp --> MapID[\\\"Store ID Mapping:<br/>oldID → newID<br/>65 → 100<br/>77 → 101<br/>etc.\\\"]\\n    \\n    MapID --> MoreComps{More<br/>Components?}\\n    MoreComps -->|Yes| CloneLoop\\n    MoreComps -->|No| Step3[Step 3: Clone Props]\\n    \\n    Step3 --> LoadProps[\\\"Load Template Props<br/>WHERE xref_id IN (65,66,67,68,69,77)\\\"]\\n    \\n    LoadProps --> PropsLoop{For Each<br/>Prop}\\n    \\n    PropsLoop --> MapPropID[\\\"Map xref_id:<br/>oldID → newID<br/>(using ID mapping)\\\"]\\n    \\n    MapPropID --> ReplacePropTokens[\\\"Replace Tokens in paramVal:<br/>• {contextKey} → ingredient_type_id<br/>• {pageName} → ingrType<br/>• {{pageConfig.props.title}} stays\\\"]\\n    \\n    ReplacePropTokens --> InsertProp[\\\"INSERT into eventProps<br/>WITH new xref_id\\\"]\\n    \\n    InsertProp --> MoreProps{More<br/>Props?}\\n    MoreProps -->|Yes| PropsLoop\\n    MoreProps -->|No| Step4[Step 4: Clone Triggers]\\n    \\n    Step4 --> LoadTriggers[\\\"Load Template Triggers<br/>WHERE xref_id IN (65,66,67,68,69)\\\"]\\n    \\n    LoadTriggers --> TriggerLoop{For Each<br/>Trigger}\\n    \\n    TriggerLoop --> MapTriggerID[\\\"Map xref_id:<br/>oldID → newID\\\"]\\n    \\n    MapTriggerID --> ReplaceTriggerTokens[\\\"Replace Component References:<br/>• Grid → ingrTypeGrid<br/>• Form → ingrTypeForm<br/>• {contextKey} → ingredient_type_id\\\"]\\n    \\n    ReplaceTriggerTokens --> InsertTrigger[\\\"INSERT into eventTriggers<br/>WITH new xref_id\\\"]\\n    \\n    InsertTrigger --> MoreTriggers{More<br/>Triggers?}\\n    MoreTriggers -->|Yes| TriggerLoop\\n    MoreTriggers -->|No| Step5[Step 5: Create EventSQL Stubs]\\n    \\n    Step5 --> CreateList[\\\"INSERT into eventSQL:<br/>qryName: ingrTypeList<br/>qrySQL: NULL<br/>(developer fills later)\\\"]\\n    \\n    CreateList --> CreateDtl[\\\"INSERT into eventSQL:<br/>qryName: ingrTypeDtl<br/>qrySQL: NULL<br/>(developer fills later)\\\"]\\n    \\n    CreateDtl --> Complete([Clone Complete\\!<br/>Navigate to new page])\\n    \\n    Complete --> DevWork[\\\"Developer Next Steps:<br/>1. Populate ingrTypeList SQL<br/>2. Populate ingrTypeDtl SQL<br/>3. Generate fields in Studio<br/>4. Test CRUD operations\\\"]\\n    \\n    style Start fill:#10b981\\n    style Complete fill:#10b981\\n    style DefineTarget fill:#3b82f6\\n    style Step2 fill:#3b82f6\\n    style Step3 fill:#3b82f6\\n    style Step4 fill:#3b82f6\\n    style Step5 fill:#3b82f6\\n    style DevWork fill:#f59e0b\\n```\\n\\n## Key Implementation Notes\\n\\n### ID Mapping Strategy\\n```javascript\\nconst idMapping = {};\\n// oldID → newID\\nidMapping[65] = 100; // Container\\nidMapping[77] = 101; // Title\\n```\\n\\n### Parent ID Logic\\n```javascript\\nif (component.comp_type === \\\"Container\\\") {\\n  parent_id = xref_id; // Self-reference\\n} else {\\n  parent_id = idMapping[templateContainerID];\\n}\\n```\\n\\n### Token Replacement Patterns\\n- **{contextKey}** → ingredient_type_id\\n- **{tableName}** → whatsfresh.ingredient_types\\n- **{pageName}** → ingrType\\n- **{{pageConfig.props.X}}** → Keep (runtime resolution)\\n\\n## Open Questions\\n1. Component naming: Keep simple (Grid) or prefix (ingrTypeGrid)?\\n2. Deep token search in nested JSON (rowActions)?\\n3. Validation: Check pageName/route conflicts?\\n4. Error handling: Rollback on failure?\",\n    \"userID\": \"claude\"\n  }\n}","expose":true,"level":"error","message":"[app.js]  JSON parsing error: Bad escaped character in JSON at position 3694 (line 10 column 3452)","stack":"SyntaxError: Bad escaped character in JSON at position 3694 (line 10 column 3452)\n    at JSON.parse (<anonymous>)\n    at parse (/home/paul/wf-monorepo-new/node_modules/body-parser/lib/types/json.js:77:19)\n    at /home/paul/wf-monorepo-new/node_modules/body-parser/lib/read.js:123:18\n    at AsyncResource.runInAsyncScope (node:async_hooks:214:14)\n    at invokeCallback (/home/paul/wf-monorepo-new/node_modules/raw-body/index.js:238:16)\n    at done (/home/paul/wf-monorepo-new/node_modules/raw-body/index.js:227:7)\n    at IncomingMessage.onEnd (/home/paul/wf-monorepo-new/node_modules/raw-body/index.js:287:7)\n    at IncomingMessage.emit (node:events:518:28)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)","status":400,"statusCode":400,"timestamp":"2025-10-29 09:33:09","type":"entity.parse.failed"}
{"body":{"data":{"from_agent":"claude","message":"```mermaid\nflowchart TD\n    Start([User: Clone CRUD Template]) --> DefineTarget[Step 1: Define Target Page<br/>in page_registry]\n    \n    DefineTarget --> TargetData[\"User Inputs:<br/>• appName: whatsfresh<br/>• pageName: ingrType<br/>• pageTitle: Ingredient Types<br/>• tableName: whatsfresh.ingredient_types<br/>• contextKey: ingredient_type_id<br/>• parentID: [account_id]\"]\n    \n    TargetData --> InsertRegistry[\"INSERT into page_registry<br/>Returns: newPageID = 1\"]\n    \n    InsertRegistry --> Step2[Step 2: Clone Components]\n    \n    Step2 --> LoadTemplate[\"Load Template Components<br/>WHERE pageID = 11<br/>(CRUD template)\"]\n    \n    LoadTemplate --> TemplateComps[\"Components:<br/>65-Container<br/>77-Title<br/>66-AddNew<br/>67-Grid<br/>68-Form<br/>69-Submit\"]\n    \n    TemplateComps --> CloneLoop{For Each<br/>Component}\n    \n    CloneLoop --> GenerateID[Generate New xref_id]\n    \n    GenerateID --> ReplaceTokens[\"Replace Tokens:<br/>{contextKey} → ingredient_type_id<br/>{tableName} → ingredient_types\"]\n    \n    ReplaceTokens --> SetParent{Container?}\n    \n    SetParent -->|Yes| SelfRef[\"parent_id = self\"]\n    SetParent -->|No| ContainerRef[\"parent_id = Container\"]\n    \n    SelfRef --> InsertComp[\"INSERT eventComp_xref\"]\n    ContainerRef --> InsertComp\n    \n    InsertComp --> MapID[\"Map oldID → newID\"]\n    \n    MapID --> MoreComps{More?}\n    MoreComps -->|Yes| CloneLoop\n    MoreComps -->|No| Step3[Step 3: Clone Props]\n    \n    Step3 --> LoadProps[\"Load Template Props\"]\n    \n    LoadProps --> PropsLoop{For Each Prop}\n    \n    PropsLoop --> MapPropID[\"Map xref_id\"]\n    \n    MapPropID --> ReplacePropTokens[\"Replace Tokens\"]\n    \n    ReplacePropTokens --> InsertProp[\"INSERT eventProps\"]\n    \n    InsertProp --> MoreProps{More?}\n    MoreProps -->|Yes| PropsLoop\n    MoreProps -->|No| Step4[Step 4: Clone Triggers]\n    \n    Step4 --> LoadTriggers[\"Load Template Triggers\"]\n    \n    LoadTriggers --> TriggerLoop{For Each Trigger}\n    \n    TriggerLoop --> MapTriggerID[\"Map xref_id\"]\n    \n    MapTriggerID --> ReplaceTriggerTokens[\"Replace Tokens\"]\n    \n    ReplaceTriggerTokens --> InsertTrigger[\"INSERT eventTriggers\"]\n    \n    InsertTrigger --> MoreTriggers{More?}\n    MoreTriggers -->|Yes| TriggerLoop\n    MoreTriggers -->|No| Step5[Step 5: EventSQL Stubs]\n    \n    Step5 --> CreateList[\"INSERT ingrTypeList\"]\n    \n    CreateList --> CreateDtl[\"INSERT ingrTypeDtl\"]\n    \n    CreateDtl --> Complete([Complete!])\n    \n    style Start fill:#10b981\n    style Complete fill:#10b981\n    style DefineTarget fill:#3b82f6\n    style Step2 fill:#3b82f6\n    style Step3 fill:#3b82f6\n    style Step4 fill:#3b82f6\n    style Step5 fill:#3b82f6\n```\n\n## Implementation Notes\n\nID Mapping: oldID → newID preserved across components, props, triggers\nParent Logic: Container self-references, others point to Container\nToken Patterns: {contextKey}, {tableName}, {pageName} replaced\nEventSQL Stubs: Created with NULL qrySQL for developer\n\n## Open Questions\n1. Component naming strategy?\n2. Deep token search in nested JSON?\n3. Validation checks?\n","plan_id":51,"subject":"CRUD Template Cloning Workflow - Mermaid Diagram","to_agent":"Paul","type":"architecture","userID":"claude"},"method":"INSERT","table":"api_wf.plan_communications"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 09:34:12"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 09:34:12"}
{"data":{"from_agent":"claude","message":"```mermaid\nflowchart TD\n    Start([User: Clone CRUD Template]) --> DefineTarget[Step 1: Define Target Page<br/>in page_registry]\n    \n    DefineTarget --> TargetData[\"User Inputs:<br/>• appName: whatsfresh<br/>• pageName: ingrType<br/>• pageTitle: Ingredient Types<br/>• tableName: whatsfresh.ingredient_types<br/>• contextKey: ingredient_type_id<br/>• parentID: [account_id]\"]\n    \n    TargetData --> InsertRegistry[\"INSERT into page_registry<br/>Returns: newPageID = 1\"]\n    \n    InsertRegistry --> Step2[Step 2: Clone Components]\n    \n    Step2 --> LoadTemplate[\"Load Template Components<br/>WHERE pageID = 11<br/>(CRUD template)\"]\n    \n    LoadTemplate --> TemplateComps[\"Components:<br/>65-Container<br/>77-Title<br/>66-AddNew<br/>67-Grid<br/>68-Form<br/>69-Submit\"]\n    \n    TemplateComps --> CloneLoop{For Each<br/>Component}\n    \n    CloneLoop --> GenerateID[Generate New xref_id]\n    \n    GenerateID --> ReplaceTokens[\"Replace Tokens:<br/>{contextKey} → ingredient_type_id<br/>{tableName} → ingredient_types\"]\n    \n    ReplaceTokens --> SetParent{Container?}\n    \n    SetParent -->|Yes| SelfRef[\"parent_id = self\"]\n    SetParent -->|No| ContainerRef[\"parent_id = Container\"]\n    \n    SelfRef --> InsertComp[\"INSERT eventComp_xref\"]\n    ContainerRef --> InsertComp\n    \n    InsertComp --> MapID[\"Map oldID → newID\"]\n    \n    MapID --> MoreComps{More?}\n    MoreComps -->|Yes| CloneLoop\n    MoreComps -->|No| Step3[Step 3: Clone Props]\n    \n    Step3 --> LoadProps[\"Load Template Props\"]\n    \n    LoadProps --> PropsLoop{For Each Prop}\n    \n    PropsLoop --> MapPropID[\"Map xref_id\"]\n    \n    MapPropID --> ReplacePropTokens[\"Replace Tokens\"]\n    \n    ReplacePropTokens --> InsertProp[\"INSERT eventProps\"]\n    \n    InsertProp --> MoreProps{More?}\n    MoreProps -->|Yes| PropsLoop\n    MoreProps -->|No| Step4[Step 4: Clone Triggers]\n    \n    Step4 --> LoadTriggers[\"Load Template Triggers\"]\n    \n    LoadTriggers --> TriggerLoop{For Each Trigger}\n    \n    TriggerLoop --> MapTriggerID[\"Map xref_id\"]\n    \n    MapTriggerID --> ReplaceTriggerTokens[\"Replace Tokens\"]\n    \n    ReplaceTriggerTokens --> InsertTrigger[\"INSERT eventTriggers\"]\n    \n    InsertTrigger --> MoreTriggers{More?}\n    MoreTriggers -->|Yes| TriggerLoop\n    MoreTriggers -->|No| Step5[Step 5: EventSQL Stubs]\n    \n    Step5 --> CreateList[\"INSERT ingrTypeList\"]\n    \n    CreateList --> CreateDtl[\"INSERT ingrTypeDtl\"]\n    \n    CreateDtl --> Complete([Complete!])\n    \n    style Start fill:#10b981\n    style Complete fill:#10b981\n    style DefineTarget fill:#3b82f6\n    style Step2 fill:#3b82f6\n    style Step3 fill:#3b82f6\n    style Step4 fill:#3b82f6\n    style Step5 fill:#3b82f6\n```\n\n## Implementation Notes\n\nID Mapping: oldID → newID preserved across components, props, triggers\nParent Logic: Container self-references, others point to Container\nToken Patterns: {contextKey}, {tableName}, {pageName} replaced\nEventSQL Stubs: Created with NULL qrySQL for developer\n\n## Open Questions\n1. Component naming strategy?\n2. Deep token search in nested JSON?\n3. Validation checks?\n","plan_id":51,"subject":"CRUD Template Cloning Workflow - Mermaid Diagram","to_agent":"Paul","type":"architecture","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_communications","timestamp":"2025-10-29 09:34:12"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:34:12"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:34:12"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:34:13"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":81.203785,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:34:13"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:34:13"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:34:13"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:34:13"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:34:13"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":33.598852,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:34:13"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:34:13"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_communications (plan_id, from_agent, to_agent, type, subject, message, created_at, created_by) VALUES (51, 'claude', 'Paul', 'architecture', 'CRUD Template Cloning Workflow - Mermaid Diagram', '```mermaid\nflowchart TD\n    Start([User: Clone CRUD Template]) --> DefineTarget[Step 1: Define Target Page<br/>in page_registry]\n    \n    DefineTarget --> TargetData[\"User Inputs:<br/>• appName: whatsfresh<br/>• pageName: ingrType<br/>• pageTitle: Ingredient Types<br/>• tableName: whatsfresh.ingredient_types<br/>• contextKey: ingredient_type_id<br/>• parentID: [account_id]\"]\n    \n    TargetData --> InsertRegistry[\"INSERT into page_registry<br/>Returns: newPageID = 1\"]\n    \n    InsertRegistry --> Step2[Step 2: Clone Components]\n    \n    Step2 --> LoadTemplate[\"Load Template Components<br/>WHERE pageID = 11<br/>(CRUD template)\"]\n    \n    LoadTemplate --> TemplateComps[\"Components:<br/>65-Container<br/>77-Title<br/>66-AddNew<br/>67-Grid<br/>68-Form<br/>69-Submit\"]\n    \n    TemplateComps --> CloneLoop{For Each<br/>Component}\n    \n    CloneLoop --> GenerateID[Generate New xref_id]\n    \n    GenerateID --> ReplaceTokens[\"Replace Tokens:<br/>{contextKey} → ingredient_type_id<br/>{tableName} → ingredient_types\"]\n    \n    ReplaceTokens --> SetParent{Container?}\n    \n    SetParent -->|Yes| SelfRef[\"parent_id = self\"]\n    SetParent -->|No| ContainerRef[\"parent_id = Container\"]\n    \n    SelfRef --> InsertComp[\"INSERT eventComp_xref\"]\n    ContainerRef --> InsertComp\n    \n    InsertComp --> MapID[\"Map oldID → newID\"]\n    \n    MapID --> MoreComps{More?}\n    MoreComps -->|Yes| CloneLoop\n    MoreComps -->|No| Step3[Step 3: Clone Props]\n    \n    Step3 --> LoadProps[\"Load Template Props\"]\n    \n    LoadProps --> PropsLoop{For Each Prop}\n    \n    PropsLoop --> MapPropID[\"Map xref_id\"]\n    \n    MapPropID --> ReplacePropTokens[\"Replace Tokens\"]\n    \n    ReplacePropTokens --> InsertProp[\"INSERT eventProps\"]\n    \n    InsertProp --> MoreProps{More?}\n    MoreProps -->|Yes| PropsLoop\n    MoreProps -->|No| Step4[Step 4: Clone Triggers]\n    \n    Step4 --> LoadTriggers[\"Load Template Triggers\"]\n    \n    LoadTriggers --> TriggerLoop{For Each Trigger}\n    \n    TriggerLoop --> MapTriggerID[\"Map xref_id\"]\n    \n    MapTriggerID --> ReplaceTriggerTokens[\"Replace Tokens\"]\n    \n    ReplaceTriggerTokens --> InsertTrigger[\"INSERT eventTriggers\"]\n    \n    InsertTrigger --> MoreTriggers{More?}\n    MoreTriggers -->|Yes| TriggerLoop\n    MoreTriggers -->|No| Step5[Step 5: EventSQL Stubs]\n    \n    Step5 --> CreateList[\"INSERT ingrTypeList\"]\n    \n    CreateList --> CreateDtl[\"INSERT ingrTypeDtl\"]\n    \n    CreateDtl --> Complete([Complete!])\n    \n    style Start fill:#10b981\n    style Complete fill:#10b981\n    style DefineTarget fill:#3b82f6\n    style Step2 fill:#3b82f6\n    style Step3 fill:#3b82f6\n    style Step4 fill:#3b82f6\n    style Step5 fill:#3b82f6\n```\n\n## Implementation Notes\n\nID Mapping: oldID → newID preserved across components, props, triggers\nParent Logic: Container self-references, others point to Container\nToken Patterns: {contextKey}, {tableName}, {pageName} replaced\nEventSQL Stubs: Created with NULL qrySQL for developer\n\n## Open Questions\n1. Component naming strategy?\n2. Deep token search in nested JSON?\n3. Validation checks?\n', NOW(), 'Paul')","timestamp":"2025-10-29 09:34:13"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 09:34:13"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 09:34:13"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":474.875093,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:34:13"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:34:13"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_communications","timestamp":"2025-10-29 09:34:13"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 09:34:13"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (592ms)","timestamp":"2025-10-29 09:34:13"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":592.019082,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-29 09:34:13"}
{"body":{"data":{"id":69,"message":"```mermaid\nflowchart TD\n    Start([Clone Template API Called]) --> Input[\"Input Parameters:<br/>templatePageID<br/>targetPageID\"]\n    \n    Input --> ValidateInput{Validate<br/>Input}\n    \n    ValidateInput -->|Invalid| ErrorInvalidInput[Error: Invalid parameters]\n    ValidateInput -->|Valid| LoadTemplate[Load Template Page<br/>FROM page_registry<br/>WHERE id = templatePageID]\n    \n    LoadTemplate --> CheckTemplate{Template<br/>Exists?}\n    CheckTemplate -->|No| ErrorNoTemplate[Error: Template not found]\n    CheckTemplate -->|Yes| LoadTarget[Load Target Page<br/>FROM page_registry<br/>WHERE id = targetPageID]\n    \n    LoadTarget --> CheckTarget{Target<br/>Exists?}\n    CheckTarget -->|No| ErrorNoTarget[Error: Target page not found]\n    CheckTarget -->|Yes| InitMapping[\"Initialize ID Mapping:<br/>idMap = {}\"]\n    \n    InitMapping --> LoadComponents[\"Load All Template Components<br/>SELECT * FROM eventComp_xref<br/>WHERE pageID = templatePageID<br/>ORDER BY level ASC\"]\n    \n    LoadComponents --> ComponentLoop{For Each<br/>Component}\n    \n    ComponentLoop --> GenNewID[\"Generate New ID:<br/>newID = MAX(xref_id) + 1\"]\n    \n    GenNewID --> CloneComponent[\"Clone Component Record:<br/>• xref_id = newID<br/>• pageID = targetPageID<br/>• pageName = target.pageName\"]\n    \n    CloneComponent --> SetParentID{comp_type =<br/>Container?}\n    \n    SetParentID -->|Yes| SetSelfRef[\"parent_id = newID<br/>(self-reference)\"]\n    SetParentID -->|No| MapParentID[\"parent_id = idMap[old_parent_id]\"]\n    \n    SetSelfRef --> InsertComponent[INSERT into eventComp_xref]\n    MapParentID --> InsertComponent\n    \n    InsertComponent --> StoreMapping[\"Store Mapping:<br/>idMap[oldID] = newID\"]\n    \n    StoreMapping --> MoreComponents{More<br/>Components?}\n    MoreComponents -->|Yes| ComponentLoop\n    MoreComponents -->|No| LoadProps[\"Load All Template Props<br/>SELECT * FROM eventProps<br/>WHERE xref_id IN (templateIDs)\"]\n    \n    LoadProps --> PropLoop{For Each<br/>Prop}\n    \n    PropLoop --> CloneProp[\"Clone Prop Record:<br/>• xref_id = idMap[old_xref_id]\"]\n    \n    CloneProp --> ReplaceTokensProp[\"Replace Tokens in paramVal:<br/>• {contextKey} → target.contextKey<br/>• {tableName} → target.tableName<br/>• {pageName} → target.pageName\"]\n    \n    ReplaceTokensProp --> InsertProp[INSERT into eventProps]\n    \n    InsertProp --> MoreProps{More<br/>Props?}\n    MoreProps -->|Yes| PropLoop\n    MoreProps -->|No| LoadTriggers[\"Load All Template Triggers<br/>SELECT * FROM eventTriggers<br/>WHERE xref_id IN (templateIDs)\"]\n    \n    LoadTriggers --> TriggerLoop{For Each<br/>Trigger}\n    \n    TriggerLoop --> CloneTrigger[\"Clone Trigger Record:<br/>• xref_id = idMap[old_xref_id]\"]\n    \n    CloneTrigger --> ReplaceTokensTrigger[\"Replace Tokens in content:<br/>• {contextKey} → target.contextKey<br/>• Component refs stay simple\"]\n    \n    ReplaceTokensTrigger --> InsertTrigger[INSERT into eventTriggers]\n    \n    InsertTrigger --> MoreTriggers{More<br/>Triggers?}\n    MoreTriggers -->|Yes| TriggerLoop\n    MoreTriggers -->|No| CreateEventSQL[Create EventSQL Stubs]\n    \n    CreateEventSQL --> InsertListSQL[\"INSERT into eventSQL:<br/>qryName = {pageName}List<br/>qrySQL = NULL\"]\n    \n    InsertListSQL --> InsertDtlSQL[\"INSERT into eventSQL:<br/>qryName = {pageName}Dtl<br/>qrySQL = NULL\"]\n    \n    InsertDtlSQL --> Success[\"Return Success:<br/>• componentCount<br/>• propCount<br/>• triggerCount<br/>• idMapping\"]\n    \n    Success --> End([Complete])\n    \n    ErrorInvalidInput --> End\n    ErrorNoTemplate --> End\n    ErrorNoTarget --> End\n    \n    style Start fill:#10b981\n    style End fill:#10b981\n    style Success fill:#10b981\n    style ErrorInvalidInput fill:#ef4444\n    style ErrorNoTemplate fill:#ef4444\n    style ErrorNoTarget fill:#ef4444\n    style LoadTemplate fill:#3b82f6\n    style LoadTarget fill:#3b82f6\n    style LoadComponents fill:#3b82f6\n    style LoadProps fill:#3b82f6\n    style LoadTriggers fill:#3b82f6\n    style CreateEventSQL fill:#f59e0b\n```\n\n## Implementation Function Signature\n\n```javascript\nasync function cloneTemplate(templatePageID, targetPageID) {\n  // Returns: { success, componentCount, propCount, triggerCount, idMapping }\n}\n```\n\n## Key Design Principles\n\n1. **Assume page_registry pre-populated** - User creates target page record in DBeaver first\n2. **ID Mapping preserved** - oldID → newID stored throughout process\n3. **Parent references resolved** - Using idMap for all parent_id assignments\n4. **Token replacement selective** - Only replace {contextKey}, {tableName}, {pageName}\n5. **Simple component names** - Keep Grid, Form, Submit (not prefixed)\n6. **EventSQL stubs created** - Developer populates SQL later\n\n## Error Handling\n\n- Validate both template and target exist\n- Rollback transaction on any failure\n- Return detailed error messages\n- Log all cloning operations for audit\n\n## Usage Example\n\n```sql\n-- 1. User creates target page in DBeaver\nINSERT INTO page_registry (appName, pageName, pageTitle, tableName, contextKey, ...) \nVALUES ('whatsfresh', 'ingrType', 'Ingredient Types', 'whatsfresh.ingredient_types', 'ingredient_type_id', ...);\n-- Returns newPageID = 18\n\n-- 2. Call cloning API\nPOST /api/cloneTemplate\n{\n  \"templatePageID\": 11,  // CRUD template\n  \"targetPageID\": 18     // ingrType page\n}\n\n-- 3. Result\n{\n  \"success\": true,\n  \"componentCount\": 6,\n  \"propCount\": 12,\n  \"triggerCount\": 8,\n  \"idMapping\": { 65: 103, 66: 104, 67: 105, ... }\n}\n```\n","subject":"CRUD Template Cloning Workflow - Generic Implementation","userID":"claude"},"method":"UPDATE","primaryKey":"id","table":"api_wf.plan_communications"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 09:44:13"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 09:44:13"}
{"data":{"id":69,"message":"```mermaid\nflowchart TD\n    Start([Clone Template API Called]) --> Input[\"Input Parameters:<br/>templatePageID<br/>targetPageID\"]\n    \n    Input --> ValidateInput{Validate<br/>Input}\n    \n    ValidateInput -->|Invalid| ErrorInvalidInput[Error: Invalid parameters]\n    ValidateInput -->|Valid| LoadTemplate[Load Template Page<br/>FROM page_registry<br/>WHERE id = templatePageID]\n    \n    LoadTemplate --> CheckTemplate{Template<br/>Exists?}\n    CheckTemplate -->|No| ErrorNoTemplate[Error: Template not found]\n    CheckTemplate -->|Yes| LoadTarget[Load Target Page<br/>FROM page_registry<br/>WHERE id = targetPageID]\n    \n    LoadTarget --> CheckTarget{Target<br/>Exists?}\n    CheckTarget -->|No| ErrorNoTarget[Error: Target page not found]\n    CheckTarget -->|Yes| InitMapping[\"Initialize ID Mapping:<br/>idMap = {}\"]\n    \n    InitMapping --> LoadComponents[\"Load All Template Components<br/>SELECT * FROM eventComp_xref<br/>WHERE pageID = templatePageID<br/>ORDER BY level ASC\"]\n    \n    LoadComponents --> ComponentLoop{For Each<br/>Component}\n    \n    ComponentLoop --> GenNewID[\"Generate New ID:<br/>newID = MAX(xref_id) + 1\"]\n    \n    GenNewID --> CloneComponent[\"Clone Component Record:<br/>• xref_id = newID<br/>• pageID = targetPageID<br/>• pageName = target.pageName\"]\n    \n    CloneComponent --> SetParentID{comp_type =<br/>Container?}\n    \n    SetParentID -->|Yes| SetSelfRef[\"parent_id = newID<br/>(self-reference)\"]\n    SetParentID -->|No| MapParentID[\"parent_id = idMap[old_parent_id]\"]\n    \n    SetSelfRef --> InsertComponent[INSERT into eventComp_xref]\n    MapParentID --> InsertComponent\n    \n    InsertComponent --> StoreMapping[\"Store Mapping:<br/>idMap[oldID] = newID\"]\n    \n    StoreMapping --> MoreComponents{More<br/>Components?}\n    MoreComponents -->|Yes| ComponentLoop\n    MoreComponents -->|No| LoadProps[\"Load All Template Props<br/>SELECT * FROM eventProps<br/>WHERE xref_id IN (templateIDs)\"]\n    \n    LoadProps --> PropLoop{For Each<br/>Prop}\n    \n    PropLoop --> CloneProp[\"Clone Prop Record:<br/>• xref_id = idMap[old_xref_id]\"]\n    \n    CloneProp --> ReplaceTokensProp[\"Replace Tokens in paramVal:<br/>• {contextKey} → target.contextKey<br/>• {tableName} → target.tableName<br/>• {pageName} → target.pageName\"]\n    \n    ReplaceTokensProp --> InsertProp[INSERT into eventProps]\n    \n    InsertProp --> MoreProps{More<br/>Props?}\n    MoreProps -->|Yes| PropLoop\n    MoreProps -->|No| LoadTriggers[\"Load All Template Triggers<br/>SELECT * FROM eventTriggers<br/>WHERE xref_id IN (templateIDs)\"]\n    \n    LoadTriggers --> TriggerLoop{For Each<br/>Trigger}\n    \n    TriggerLoop --> CloneTrigger[\"Clone Trigger Record:<br/>• xref_id = idMap[old_xref_id]\"]\n    \n    CloneTrigger --> ReplaceTokensTrigger[\"Replace Tokens in content:<br/>• {contextKey} → target.contextKey<br/>• Component refs stay simple\"]\n    \n    ReplaceTokensTrigger --> InsertTrigger[INSERT into eventTriggers]\n    \n    InsertTrigger --> MoreTriggers{More<br/>Triggers?}\n    MoreTriggers -->|Yes| TriggerLoop\n    MoreTriggers -->|No| CreateEventSQL[Create EventSQL Stubs]\n    \n    CreateEventSQL --> InsertListSQL[\"INSERT into eventSQL:<br/>qryName = {pageName}List<br/>qrySQL = NULL\"]\n    \n    InsertListSQL --> InsertDtlSQL[\"INSERT into eventSQL:<br/>qryName = {pageName}Dtl<br/>qrySQL = NULL\"]\n    \n    InsertDtlSQL --> Success[\"Return Success:<br/>• componentCount<br/>• propCount<br/>• triggerCount<br/>• idMapping\"]\n    \n    Success --> End([Complete])\n    \n    ErrorInvalidInput --> End\n    ErrorNoTemplate --> End\n    ErrorNoTarget --> End\n    \n    style Start fill:#10b981\n    style End fill:#10b981\n    style Success fill:#10b981\n    style ErrorInvalidInput fill:#ef4444\n    style ErrorNoTemplate fill:#ef4444\n    style ErrorNoTarget fill:#ef4444\n    style LoadTemplate fill:#3b82f6\n    style LoadTarget fill:#3b82f6\n    style LoadComponents fill:#3b82f6\n    style LoadProps fill:#3b82f6\n    style LoadTriggers fill:#3b82f6\n    style CreateEventSQL fill:#f59e0b\n```\n\n## Implementation Function Signature\n\n```javascript\nasync function cloneTemplate(templatePageID, targetPageID) {\n  // Returns: { success, componentCount, propCount, triggerCount, idMapping }\n}\n```\n\n## Key Design Principles\n\n1. **Assume page_registry pre-populated** - User creates target page record in DBeaver first\n2. **ID Mapping preserved** - oldID → newID stored throughout process\n3. **Parent references resolved** - Using idMap for all parent_id assignments\n4. **Token replacement selective** - Only replace {contextKey}, {tableName}, {pageName}\n5. **Simple component names** - Keep Grid, Form, Submit (not prefixed)\n6. **EventSQL stubs created** - Developer populates SQL later\n\n## Error Handling\n\n- Validate both template and target exist\n- Rollback transaction on any failure\n- Return detailed error messages\n- Log all cloning operations for audit\n\n## Usage Example\n\n```sql\n-- 1. User creates target page in DBeaver\nINSERT INTO page_registry (appName, pageName, pageTitle, tableName, contextKey, ...) \nVALUES ('whatsfresh', 'ingrType', 'Ingredient Types', 'whatsfresh.ingredient_types', 'ingredient_type_id', ...);\n-- Returns newPageID = 18\n\n-- 2. Call cloning API\nPOST /api/cloneTemplate\n{\n  \"templatePageID\": 11,  // CRUD template\n  \"targetPageID\": 18     // ingrType page\n}\n\n-- 3. Result\n{\n  \"success\": true,\n  \"componentCount\": 6,\n  \"propCount\": 12,\n  \"triggerCount\": 8,\n  \"idMapping\": { 65: 103, 66: 104, 67: 105, ... }\n}\n```\n","subject":"CRUD Template Cloning Workflow - Generic Implementation","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing UPDATE on api_wf.plan_communications","primaryKey":"id","timestamp":"2025-10-29 09:44:13"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:44:13"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:44:13"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:44:13"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":43.661411,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:44:13"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:44:13"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 09:44:13"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 09:44:13"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 09:44:13"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":134.106452,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 09:44:13"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:44:13"}
{"level":"info","message":"[dmlProcessor.js] Executing UPDATE SQL:","sql":"UPDATE api_wf.plan_communications SET message = '```mermaid\nflowchart TD\n    Start([Clone Template API Called]) --> Input[\"Input Parameters:<br/>templatePageID<br/>targetPageID\"]\n    \n    Input --> ValidateInput{Validate<br/>Input}\n    \n    ValidateInput -->|Invalid| ErrorInvalidInput[Error: Invalid parameters]\n    ValidateInput -->|Valid| LoadTemplate[Load Template Page<br/>FROM page_registry<br/>WHERE id = templatePageID]\n    \n    LoadTemplate --> CheckTemplate{Template<br/>Exists?}\n    CheckTemplate -->|No| ErrorNoTemplate[Error: Template not found]\n    CheckTemplate -->|Yes| LoadTarget[Load Target Page<br/>FROM page_registry<br/>WHERE id = targetPageID]\n    \n    LoadTarget --> CheckTarget{Target<br/>Exists?}\n    CheckTarget -->|No| ErrorNoTarget[Error: Target page not found]\n    CheckTarget -->|Yes| InitMapping[\"Initialize ID Mapping:<br/>idMap = {}\"]\n    \n    InitMapping --> LoadComponents[\"Load All Template Components<br/>SELECT * FROM eventComp_xref<br/>WHERE pageID = templatePageID<br/>ORDER BY level ASC\"]\n    \n    LoadComponents --> ComponentLoop{For Each<br/>Component}\n    \n    ComponentLoop --> GenNewID[\"Generate New ID:<br/>newID = MAX(xref_id) + 1\"]\n    \n    GenNewID --> CloneComponent[\"Clone Component Record:<br/>• xref_id = newID<br/>• pageID = targetPageID<br/>• pageName = target.pageName\"]\n    \n    CloneComponent --> SetParentID{comp_type =<br/>Container?}\n    \n    SetParentID -->|Yes| SetSelfRef[\"parent_id = newID<br/>(self-reference)\"]\n    SetParentID -->|No| MapParentID[\"parent_id = idMap[old_parent_id]\"]\n    \n    SetSelfRef --> InsertComponent[INSERT into eventComp_xref]\n    MapParentID --> InsertComponent\n    \n    InsertComponent --> StoreMapping[\"Store Mapping:<br/>idMap[oldID] = newID\"]\n    \n    StoreMapping --> MoreComponents{More<br/>Components?}\n    MoreComponents -->|Yes| ComponentLoop\n    MoreComponents -->|No| LoadProps[\"Load All Template Props<br/>SELECT * FROM eventProps<br/>WHERE xref_id IN (templateIDs)\"]\n    \n    LoadProps --> PropLoop{For Each<br/>Prop}\n    \n    PropLoop --> CloneProp[\"Clone Prop Record:<br/>• xref_id = idMap[old_xref_id]\"]\n    \n    CloneProp --> ReplaceTokensProp[\"Replace Tokens in paramVal:<br/>• {contextKey} → target.contextKey<br/>• {tableName} → target.tableName<br/>• {pageName} → target.pageName\"]\n    \n    ReplaceTokensProp --> InsertProp[INSERT into eventProps]\n    \n    InsertProp --> MoreProps{More<br/>Props?}\n    MoreProps -->|Yes| PropLoop\n    MoreProps -->|No| LoadTriggers[\"Load All Template Triggers<br/>SELECT * FROM eventTriggers<br/>WHERE xref_id IN (templateIDs)\"]\n    \n    LoadTriggers --> TriggerLoop{For Each<br/>Trigger}\n    \n    TriggerLoop --> CloneTrigger[\"Clone Trigger Record:<br/>• xref_id = idMap[old_xref_id]\"]\n    \n    CloneTrigger --> ReplaceTokensTrigger[\"Replace Tokens in content:<br/>• {contextKey} → target.contextKey<br/>• Component refs stay simple\"]\n    \n    ReplaceTokensTrigger --> InsertTrigger[INSERT into eventTriggers]\n    \n    InsertTrigger --> MoreTriggers{More<br/>Triggers?}\n    MoreTriggers -->|Yes| TriggerLoop\n    MoreTriggers -->|No| CreateEventSQL[Create EventSQL Stubs]\n    \n    CreateEventSQL --> InsertListSQL[\"INSERT into eventSQL:<br/>qryName = {pageName}List<br/>qrySQL = NULL\"]\n    \n    InsertListSQL --> InsertDtlSQL[\"INSERT into eventSQL:<br/>qryName = {pageName}Dtl<br/>qrySQL = NULL\"]\n    \n    InsertDtlSQL --> Success[\"Return Success:<br/>• componentCount<br/>• propCount<br/>• triggerCount<br/>• idMapping\"]\n    \n    Success --> End([Complete])\n    \n    ErrorInvalidInput --> End\n    ErrorNoTemplate --> End\n    ErrorNoTarget --> End\n    \n    style Start fill:#10b981\n    style End fill:#10b981\n    style Success fill:#10b981\n    style ErrorInvalidInput fill:#ef4444\n    style ErrorNoTemplate fill:#ef4444\n    style ErrorNoTarget fill:#ef4444\n    style LoadTemplate fill:#3b82f6\n    style LoadTarget fill:#3b82f6\n    style LoadComponents fill:#3b82f6\n    style LoadProps fill:#3b82f6\n    style LoadTriggers fill:#3b82f6\n    style CreateEventSQL fill:#f59e0b\n```\n\n## Implementation Function Signature\n\n```javascript\nasync function cloneTemplate(templatePageID, targetPageID) {\n  // Returns: { success, componentCount, propCount, triggerCount, idMapping }\n}\n```\n\n## Key Design Principles\n\n1. **Assume page_registry pre-populated** - User creates target page record in DBeaver first\n2. **ID Mapping preserved** - oldID → newID stored throughout process\n3. **Parent references resolved** - Using idMap for all parent_id assignments\n4. **Token replacement selective** - Only replace {contextKey}, {tableName}, {pageName}\n5. **Simple component names** - Keep Grid, Form, Submit (not prefixed)\n6. **EventSQL stubs created** - Developer populates SQL later\n\n## Error Handling\n\n- Validate both template and target exist\n- Rollback transaction on any failure\n- Return detailed error messages\n- Log all cloning operations for audit\n\n## Usage Example\n\n```sql\n-- 1. User creates target page in DBeaver\nINSERT INTO page_registry (appName, pageName, pageTitle, tableName, contextKey, ...) \nVALUES (''whatsfresh'', ''ingrType'', ''Ingredient Types'', ''whatsfresh.ingredient_types'', ''ingredient_type_id'', ...);\n-- Returns newPageID = 18\n\n-- 2. Call cloning API\nPOST /api/cloneTemplate\n{\n  \"templatePageID\": 11,  // CRUD template\n  \"targetPageID\": 18     // ingrType page\n}\n\n-- 3. Result\n{\n  \"success\": true,\n  \"componentCount\": 6,\n  \"propCount\": 12,\n  \"triggerCount\": 8,\n  \"idMapping\": { 65: 103, 66: 104, 67: 105, ... }\n}\n```\n', subject = 'CRUD Template Cloning Workflow - Generic Implementation', updated_at = NOW(), updated_by = 'Paul' WHERE id = 69","timestamp":"2025-10-29 09:44:13"}
{"level":"debug","message":"[dbUtils.js] Executing PATCH query: ********","timestamp":"2025-10-29 09:44:13"}
{"level":"debug","message":"[dbUtils.js] Handling PATCH-specific logic","timestamp":"2025-10-29 09:44:13"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":405.791486,"method":"PATCH","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 09:44:13"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 09:44:13"}
{"level":"info","message":"[dmlProcessor.js] UPDATE executed successfully on api_wf.plan_communications","timestamp":"2025-10-29 09:44:13"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 09:44:13"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (586ms)","timestamp":"2025-10-29 09:44:13"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":585.970636,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-29 09:44:13"}
{"body":{"data":{"id":69,"message":"```mermaid\nflowchart TD\n    Start([Clone Template Workflow]) --> Init[Initialize Session<br/>templatePageID + targetPageID]\n    \n    Init --> LoadHier[Load Template Hierarchy<br/>execEvent: studio-xrefHierarchy]\n    \n    LoadHier --> Step1[Step 1: Clone Components<br/>6 components with level ordering]\n    \n    Step1 --> Inspect1{Inspect<br/>Results?}\n    \n    Inspect1 -->|Issues Found| Rollback1[Rollback Components]\n    Inspect1 -->|Looks Good| Step2[Step 2: Clone Props<br/>Map xref_ids, replace tokens]\n    \n    Rollback1 --> End\n    \n    Step2 --> Inspect2{Inspect<br/>Results?}\n    \n    Inspect2 -->|Issues Found| Rollback2[Rollback to Step 1]\n    Inspect2 -->|Looks Good| Step3[Step 3: Clone Triggers<br/>Map xref_ids, replace tokens]\n    \n    Rollback2 --> Step1\n    \n    Step3 --> Inspect3{Inspect<br/>Results?}\n    \n    Inspect3 -->|Issues Found| Rollback3[Rollback to Step 2]\n    Inspect3 -->|Looks Good| Step4[Step 4: Create EventSQL Stubs<br/>List + Dtl queries]\n    \n    Rollback3 --> Step2\n    \n    Step4 --> Complete[Clone Complete<br/>Navigate to new page]\n    \n    Complete --> DevNext[Developer: Populate SQL<br/>Generate fields in Studio]\n    \n    DevNext --> End([Done])\n    \n    style Start fill:#10b981\n    style End fill:#10b981\n    style Complete fill:#10b981\n    style Step1 fill:#3b82f6\n    style Step2 fill:#3b82f6\n    style Step3 fill:#3b82f6\n    style Step4 fill:#3b82f6\n    style Rollback1 fill:#ef4444\n    style Rollback2 fill:#ef4444\n    style Rollback3 fill:#ef4444\n    style DevNext fill:#f59e0b\n```\n\n## High-Level Steps\n\n### Step 1: Clone Components\n- Load hierarchy with levels from `execEvent('studio-xrefHierarchy')`\n- Clone in level order (Container first)\n- Handle parent_id mapping (self-ref for Container)\n- **Inspect:** View new eventComp_xref records\n\n### Step 2: Clone Props\n- Use ID mapping from Step 1\n- Replace tokens: `{contextKey}`, `{tableName}`, `{pageName}`\n- Deep search in JSON props (rowActions, etc.)\n- **Inspect:** View new eventProps records\n\n### Step 3: Clone Triggers  \n- Use ID mapping from Step 1\n- Replace tokens in content/params\n- Preserve trigger ordering\n- **Inspect:** View new eventTriggers records\n\n### Step 4: Create EventSQL Stubs\n- Create `{pageName}List` (qrySQL = NULL)\n- Create `{pageName}Dtl` (qrySQL = NULL)\n- **Inspect:** View new eventSQL records\n\n## React Flow Implementation\n\nEach Mermaid step = React Flow step node with:\n- ▶ Run button\n- 👁 Inspect panel (shows created records)\n- ↶ Rollback button\n- ✓ Success / ✗ Error status\n\n## Session State Tracked\n\n```javascript\n{\n  sessionID: \"clone-xyz\",\n  templatePageID: 11,\n  targetPageID: 18,\n  hierarchy: [...],        // From studio-xrefHierarchy\n  idMapping: {...},        // Built in Step 1\n  completedSteps: [],\n  currentStep: \"components\"\n}\n```\n\n## Next: Implement Step-by-Step\n\n1. Create `/studio/clone-template` page\n2. Build StepNode component\n3. Implement backend `/api/cloneStep` endpoint\n4. Add inspection panels for each step\n5. Handle rollback logic\n\nMuch cleaner! Devilish details live in React Flow implementation.\n","subject":"CRUD Template Cloning - High-Level Workflow (React Flow Orchestrated)","userID":"claude"},"method":"UPDATE","primaryKey":"id","table":"api_wf.plan_communications"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 10:01:03"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 10:01:03"}
{"data":{"id":69,"message":"```mermaid\nflowchart TD\n    Start([Clone Template Workflow]) --> Init[Initialize Session<br/>templatePageID + targetPageID]\n    \n    Init --> LoadHier[Load Template Hierarchy<br/>execEvent: studio-xrefHierarchy]\n    \n    LoadHier --> Step1[Step 1: Clone Components<br/>6 components with level ordering]\n    \n    Step1 --> Inspect1{Inspect<br/>Results?}\n    \n    Inspect1 -->|Issues Found| Rollback1[Rollback Components]\n    Inspect1 -->|Looks Good| Step2[Step 2: Clone Props<br/>Map xref_ids, replace tokens]\n    \n    Rollback1 --> End\n    \n    Step2 --> Inspect2{Inspect<br/>Results?}\n    \n    Inspect2 -->|Issues Found| Rollback2[Rollback to Step 1]\n    Inspect2 -->|Looks Good| Step3[Step 3: Clone Triggers<br/>Map xref_ids, replace tokens]\n    \n    Rollback2 --> Step1\n    \n    Step3 --> Inspect3{Inspect<br/>Results?}\n    \n    Inspect3 -->|Issues Found| Rollback3[Rollback to Step 2]\n    Inspect3 -->|Looks Good| Step4[Step 4: Create EventSQL Stubs<br/>List + Dtl queries]\n    \n    Rollback3 --> Step2\n    \n    Step4 --> Complete[Clone Complete<br/>Navigate to new page]\n    \n    Complete --> DevNext[Developer: Populate SQL<br/>Generate fields in Studio]\n    \n    DevNext --> End([Done])\n    \n    style Start fill:#10b981\n    style End fill:#10b981\n    style Complete fill:#10b981\n    style Step1 fill:#3b82f6\n    style Step2 fill:#3b82f6\n    style Step3 fill:#3b82f6\n    style Step4 fill:#3b82f6\n    style Rollback1 fill:#ef4444\n    style Rollback2 fill:#ef4444\n    style Rollback3 fill:#ef4444\n    style DevNext fill:#f59e0b\n```\n\n## High-Level Steps\n\n### Step 1: Clone Components\n- Load hierarchy with levels from `execEvent('studio-xrefHierarchy')`\n- Clone in level order (Container first)\n- Handle parent_id mapping (self-ref for Container)\n- **Inspect:** View new eventComp_xref records\n\n### Step 2: Clone Props\n- Use ID mapping from Step 1\n- Replace tokens: `{contextKey}`, `{tableName}`, `{pageName}`\n- Deep search in JSON props (rowActions, etc.)\n- **Inspect:** View new eventProps records\n\n### Step 3: Clone Triggers  \n- Use ID mapping from Step 1\n- Replace tokens in content/params\n- Preserve trigger ordering\n- **Inspect:** View new eventTriggers records\n\n### Step 4: Create EventSQL Stubs\n- Create `{pageName}List` (qrySQL = NULL)\n- Create `{pageName}Dtl` (qrySQL = NULL)\n- **Inspect:** View new eventSQL records\n\n## React Flow Implementation\n\nEach Mermaid step = React Flow step node with:\n- ▶ Run button\n- 👁 Inspect panel (shows created records)\n- ↶ Rollback button\n- ✓ Success / ✗ Error status\n\n## Session State Tracked\n\n```javascript\n{\n  sessionID: \"clone-xyz\",\n  templatePageID: 11,\n  targetPageID: 18,\n  hierarchy: [...],        // From studio-xrefHierarchy\n  idMapping: {...},        // Built in Step 1\n  completedSteps: [],\n  currentStep: \"components\"\n}\n```\n\n## Next: Implement Step-by-Step\n\n1. Create `/studio/clone-template` page\n2. Build StepNode component\n3. Implement backend `/api/cloneStep` endpoint\n4. Add inspection panels for each step\n5. Handle rollback logic\n\nMuch cleaner! Devilish details live in React Flow implementation.\n","subject":"CRUD Template Cloning - High-Level Workflow (React Flow Orchestrated)","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing UPDATE on api_wf.plan_communications","primaryKey":"id","timestamp":"2025-10-29 10:01:03"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 10:01:03"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 10:01:03"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 10:01:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":70.419999,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 10:01:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 10:01:03"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 10:01:03"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 10:01:03"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 10:01:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":68.801378,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 10:01:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 10:01:03"}
{"level":"info","message":"[dmlProcessor.js] Executing UPDATE SQL:","sql":"UPDATE api_wf.plan_communications SET message = '```mermaid\nflowchart TD\n    Start([Clone Template Workflow]) --> Init[Initialize Session<br/>templatePageID + targetPageID]\n    \n    Init --> LoadHier[Load Template Hierarchy<br/>execEvent: studio-xrefHierarchy]\n    \n    LoadHier --> Step1[Step 1: Clone Components<br/>6 components with level ordering]\n    \n    Step1 --> Inspect1{Inspect<br/>Results?}\n    \n    Inspect1 -->|Issues Found| Rollback1[Rollback Components]\n    Inspect1 -->|Looks Good| Step2[Step 2: Clone Props<br/>Map xref_ids, replace tokens]\n    \n    Rollback1 --> End\n    \n    Step2 --> Inspect2{Inspect<br/>Results?}\n    \n    Inspect2 -->|Issues Found| Rollback2[Rollback to Step 1]\n    Inspect2 -->|Looks Good| Step3[Step 3: Clone Triggers<br/>Map xref_ids, replace tokens]\n    \n    Rollback2 --> Step1\n    \n    Step3 --> Inspect3{Inspect<br/>Results?}\n    \n    Inspect3 -->|Issues Found| Rollback3[Rollback to Step 2]\n    Inspect3 -->|Looks Good| Step4[Step 4: Create EventSQL Stubs<br/>List + Dtl queries]\n    \n    Rollback3 --> Step2\n    \n    Step4 --> Complete[Clone Complete<br/>Navigate to new page]\n    \n    Complete --> DevNext[Developer: Populate SQL<br/>Generate fields in Studio]\n    \n    DevNext --> End([Done])\n    \n    style Start fill:#10b981\n    style End fill:#10b981\n    style Complete fill:#10b981\n    style Step1 fill:#3b82f6\n    style Step2 fill:#3b82f6\n    style Step3 fill:#3b82f6\n    style Step4 fill:#3b82f6\n    style Rollback1 fill:#ef4444\n    style Rollback2 fill:#ef4444\n    style Rollback3 fill:#ef4444\n    style DevNext fill:#f59e0b\n```\n\n## High-Level Steps\n\n### Step 1: Clone Components\n- Load hierarchy with levels from `execEvent(''studio-xrefHierarchy'')`\n- Clone in level order (Container first)\n- Handle parent_id mapping (self-ref for Container)\n- **Inspect:** View new eventComp_xref records\n\n### Step 2: Clone Props\n- Use ID mapping from Step 1\n- Replace tokens: `{contextKey}`, `{tableName}`, `{pageName}`\n- Deep search in JSON props (rowActions, etc.)\n- **Inspect:** View new eventProps records\n\n### Step 3: Clone Triggers  \n- Use ID mapping from Step 1\n- Replace tokens in content/params\n- Preserve trigger ordering\n- **Inspect:** View new eventTriggers records\n\n### Step 4: Create EventSQL Stubs\n- Create `{pageName}List` (qrySQL = NULL)\n- Create `{pageName}Dtl` (qrySQL = NULL)\n- **Inspect:** View new eventSQL records\n\n## React Flow Implementation\n\nEach Mermaid step = React Flow step node with:\n- ▶ Run button\n- 👁 Inspect panel (shows created records)\n- ↶ Rollback button\n- ✓ Success / ✗ Error status\n\n## Session State Tracked\n\n```javascript\n{\n  sessionID: \"clone-xyz\",\n  templatePageID: 11,\n  targetPageID: 18,\n  hierarchy: [...],        // From studio-xrefHierarchy\n  idMapping: {...},        // Built in Step 1\n  completedSteps: [],\n  currentStep: \"components\"\n}\n```\n\n## Next: Implement Step-by-Step\n\n1. Create `/studio/clone-template` page\n2. Build StepNode component\n3. Implement backend `/api/cloneStep` endpoint\n4. Add inspection panels for each step\n5. Handle rollback logic\n\nMuch cleaner! Devilish details live in React Flow implementation.\n', subject = 'CRUD Template Cloning - High-Level Workflow (React Flow Orchestrated)', updated_at = NOW(), updated_by = 'Paul' WHERE id = 69","timestamp":"2025-10-29 10:01:03"}
{"level":"debug","message":"[dbUtils.js] Executing PATCH query: ********","timestamp":"2025-10-29 10:01:03"}
{"level":"debug","message":"[dbUtils.js] Handling PATCH-specific logic","timestamp":"2025-10-29 10:01:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":327.309113,"method":"PATCH","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 10:01:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 10:01:03"}
{"level":"info","message":"[dmlProcessor.js] UPDATE executed successfully on api_wf.plan_communications","timestamp":"2025-10-29 10:01:03"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 10:01:03"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (470ms)","timestamp":"2025-10-29 10:01:03"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-29 10:11:54"}
{"body":{"data":{"from_agent":"claude","message":"# Future: Component Registry & Reusable Patterns\n\n## Concept\nSeparate registry for reusable, encapsulated components that can be dropped into any page.\n\n## Examples\n- **measureSelect** - Dropdown with eventSQL=measureList, standard config\n- **vendorSelect** - Dropdown with eventSQL=vendorList\n- **brandSelect** - Dropdown with eventSQL=brandList\n- **dateRangePicker** - Start/end date inputs\n- **fileUploader** - Upload button + preview + progress\n- **actionButtons** - Save/Cancel/Delete button group\n\n## Architecture (Not Built Yet)\n```sql\nCREATE TABLE component_registry (\n  id INT PRIMARY KEY,\n  component_name VARCHAR(100),\n  component_type VARCHAR(50),\n  eventSQL_id INT,\n  config JSON,\n  description TEXT\n);\n```\n\n## Usage Pattern (WhatsFresh v1 Approach)\n```javascript\n{\n  type: \"Select\",\n  eventSQL: \"measureList\",\n  config: {\n    label: \"Measure\",\n    valueField: \"id\",\n    displayField: \"name\"\n  }\n}\n```\n\n## Why Not Now?\n- Focus on page cloning first (Plan 51)\n- Get CRUD template working end-to-end\n- Extract patterns after we see what's common\n- Don't over-engineer before we have usage data\n\n## When to Revisit?\nAfter we've cloned 5-10 pages and see repeated patterns:\n- Same Select dropdowns across pages\n- Common button groups\n- Repeated form patterns\n\nThen we can extract to component_registry.\n\n## Key Insight\nDon't bastardize page_registry - keep it focused on pages.\nCreate separate registries (template_registry, component_registry) as needed.\n","plan_id":51,"subject":"Future: Component Registry & Reusable Patterns (Not Now)","to_agent":"future-paul","type":"architecture","userID":"claude"},"method":"INSERT","table":"api_wf.plan_communications"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 10:59:55"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 10:59:55"}
{"data":{"from_agent":"claude","message":"# Future: Component Registry & Reusable Patterns\n\n## Concept\nSeparate registry for reusable, encapsulated components that can be dropped into any page.\n\n## Examples\n- **measureSelect** - Dropdown with eventSQL=measureList, standard config\n- **vendorSelect** - Dropdown with eventSQL=vendorList\n- **brandSelect** - Dropdown with eventSQL=brandList\n- **dateRangePicker** - Start/end date inputs\n- **fileUploader** - Upload button + preview + progress\n- **actionButtons** - Save/Cancel/Delete button group\n\n## Architecture (Not Built Yet)\n```sql\nCREATE TABLE component_registry (\n  id INT PRIMARY KEY,\n  component_name VARCHAR(100),\n  component_type VARCHAR(50),\n  eventSQL_id INT,\n  config JSON,\n  description TEXT\n);\n```\n\n## Usage Pattern (WhatsFresh v1 Approach)\n```javascript\n{\n  type: \"Select\",\n  eventSQL: \"measureList\",\n  config: {\n    label: \"Measure\",\n    valueField: \"id\",\n    displayField: \"name\"\n  }\n}\n```\n\n## Why Not Now?\n- Focus on page cloning first (Plan 51)\n- Get CRUD template working end-to-end\n- Extract patterns after we see what's common\n- Don't over-engineer before we have usage data\n\n## When to Revisit?\nAfter we've cloned 5-10 pages and see repeated patterns:\n- Same Select dropdowns across pages\n- Common button groups\n- Repeated form patterns\n\nThen we can extract to component_registry.\n\n## Key Insight\nDon't bastardize page_registry - keep it focused on pages.\nCreate separate registries (template_registry, component_registry) as needed.\n","plan_id":51,"subject":"Future: Component Registry & Reusable Patterns (Not Now)","to_agent":"future-paul","type":"architecture","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_communications","timestamp":"2025-10-29 10:59:55"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 10:59:55"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 10:59:55"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 10:59:55"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":45.453915,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 10:59:55"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 10:59:55"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 10:59:55"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 10:59:55"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 10:59:55"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":135.454487,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 10:59:55"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 10:59:55"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_communications (plan_id, from_agent, to_agent, type, subject, message, created_at, created_by) VALUES (51, 'claude', 'future-paul', 'architecture', 'Future: Component Registry & Reusable Patterns (Not Now)', '# Future: Component Registry & Reusable Patterns\n\n## Concept\nSeparate registry for reusable, encapsulated components that can be dropped into any page.\n\n## Examples\n- **measureSelect** - Dropdown with eventSQL=measureList, standard config\n- **vendorSelect** - Dropdown with eventSQL=vendorList\n- **brandSelect** - Dropdown with eventSQL=brandList\n- **dateRangePicker** - Start/end date inputs\n- **fileUploader** - Upload button + preview + progress\n- **actionButtons** - Save/Cancel/Delete button group\n\n## Architecture (Not Built Yet)\n```sql\nCREATE TABLE component_registry (\n  id INT PRIMARY KEY,\n  component_name VARCHAR(100),\n  component_type VARCHAR(50),\n  eventSQL_id INT,\n  config JSON,\n  description TEXT\n);\n```\n\n## Usage Pattern (WhatsFresh v1 Approach)\n```javascript\n{\n  type: \"Select\",\n  eventSQL: \"measureList\",\n  config: {\n    label: \"Measure\",\n    valueField: \"id\",\n    displayField: \"name\"\n  }\n}\n```\n\n## Why Not Now?\n- Focus on page cloning first (Plan 51)\n- Get CRUD template working end-to-end\n- Extract patterns after we see what''s common\n- Don''t over-engineer before we have usage data\n\n## When to Revisit?\nAfter we''ve cloned 5-10 pages and see repeated patterns:\n- Same Select dropdowns across pages\n- Common button groups\n- Repeated form patterns\n\nThen we can extract to component_registry.\n\n## Key Insight\nDon''t bastardize page_registry - keep it focused on pages.\nCreate separate registries (template_registry, component_registry) as needed.\n', NOW(), 'Paul')","timestamp":"2025-10-29 10:59:55"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 10:59:55"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 10:59:55"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":203.897291,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 10:59:55"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 10:59:55"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_communications","timestamp":"2025-10-29 10:59:55"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 10:59:55"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (387ms)","timestamp":"2025-10-29 10:59:55"}
{"body":{"data":{"change_type":"CREATE","description":"Created session manager for clone template workflow\n- createSession, loadSession, updateSession functions\n- Manages clone_session table CRUD operations\n- Handles JSON column serialization\n- ES6 module with mysql2 pool","file_path":"apps/server/server/utils/cloneTemplate/sessionManager.js","phase":"development","plan_id":51,"status":"completed","userID":"claude"},"method":"INSERT","table":"api_wf.plan_impacts"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 11:10:12"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 11:10:12"}
{"data":{"change_type":"CREATE","description":"Created session manager for clone template workflow\n- createSession, loadSession, updateSession functions\n- Manages clone_session table CRUD operations\n- Handles JSON column serialization\n- ES6 module with mysql2 pool","file_path":"apps/server/server/utils/cloneTemplate/sessionManager.js","phase":"development","plan_id":51,"status":"completed","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_impacts","timestamp":"2025-10-29 11:10:12"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:10:12"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:10:12"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:10:12"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":147.903399,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:10:12"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:10:12"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:10:12"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:10:12"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:10:12"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":38.967576,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:10:12"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:10:12"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_impacts (plan_id, file_path, change_type, phase, description, status, created_at, created_by) VALUES (51, 'apps/server/server/utils/cloneTemplate/sessionManager.js', 'CREATE', 'development', 'Created session manager for clone template workflow\n- createSession, loadSession, updateSession functions\n- Manages clone_session table CRUD operations\n- Handles JSON column serialization\n- ES6 module with mysql2 pool', 'completed', NOW(), 'Paul')","timestamp":"2025-10-29 11:10:12"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 11:10:12"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 11:10:12"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":351.117514,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 11:10:12"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:10:12"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_impacts","timestamp":"2025-10-29 11:10:12"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 11:10:12"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (541ms)","timestamp":"2025-10-29 11:10:12"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":540.587868,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-29 11:10:12"}
{"body":{"data":{"change_type":"CREATE","description":"Created test script to populate clone_session table with mock cloning workflow\n- Successfully populates all JSON columns\n- Tests session CRUD operations\n- Demonstrates complete workflow from init to ready_to_commit","file_path":"apps/server/server/utils/cloneTemplate/testSession.js","phase":"development","plan_id":51,"status":"completed","userID":"claude"},"method":"INSERT","table":"api_wf.plan_impacts"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 11:10:19"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 11:10:19"}
{"data":{"change_type":"CREATE","description":"Created test script to populate clone_session table with mock cloning workflow\n- Successfully populates all JSON columns\n- Tests session CRUD operations\n- Demonstrates complete workflow from init to ready_to_commit","file_path":"apps/server/server/utils/cloneTemplate/testSession.js","phase":"development","plan_id":51,"status":"completed","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_impacts","timestamp":"2025-10-29 11:10:19"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:10:19"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:10:19"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:10:19"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":83.430472,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:10:19"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:10:19"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:10:19"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:10:19"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:10:19"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":35.225426,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:10:19"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:10:19"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_impacts (plan_id, file_path, change_type, phase, description, status, created_at, created_by) VALUES (51, 'apps/server/server/utils/cloneTemplate/testSession.js', 'CREATE', 'development', 'Created test script to populate clone_session table with mock cloning workflow\n- Successfully populates all JSON columns\n- Tests session CRUD operations\n- Demonstrates complete workflow from init to ready_to_commit', 'completed', NOW(), 'Paul')","timestamp":"2025-10-29 11:10:19"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 11:10:19"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 11:10:19"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":374.446297,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 11:10:20"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:10:20"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_impacts","timestamp":"2025-10-29 11:10:20"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 11:10:20"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (495ms)","timestamp":"2025-10-29 11:10:20"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-29 11:11:54"}
{"body":{"values":{"0":{"paramName":"contextKey","paramVal":"16"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 11:51:32"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":133.715182,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 11:51:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":155.954325,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 11:51:32"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (292ms)","timestamp":"2025-10-29 11:51:32"}
{"body":{"eventSQLId":"{pageName}Dtl","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 11:51:32"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}Dtl","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":158.094804,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}Dtl (ID: 23)","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":206.652516,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[execEventType.js] Resolved from context :contextKey → 16","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select \r\n\tid, \r\n\tname,\r\n\tdescription,\r\n\taccount_id\r\nfrom whatsfresh.ingredient_types\r\nwhere id = 16","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:33"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":303.867258,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:33"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:33"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}Dtl (ID: 23)","timestamp":"2025-10-29 11:51:33"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (671ms)","timestamp":"2025-10-29 11:51:33"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":671.038063,"method":"POST","operation":"http_request","path":"/api/execEventType","status":200},"timestamp":"2025-10-29 11:51:33"}
{"body":{"values":{"0":{"paramName":"contextKey","paramVal":"23"}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 11:51:35"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 11:51:35"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:35"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:35"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":133.612024,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:35"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:35"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 11:51:35"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 11:51:35"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":411.966928,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 11:51:36"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (548ms)","timestamp":"2025-10-29 11:51:36"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":547.605618,"method":"POST","operation":"http_request","path":"/api/setVals","status":200},"timestamp":"2025-10-29 11:51:36"}
{"body":{"eventSQLId":"{pageName}Dtl","params":{}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 11:51:36"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}Dtl","timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.786134,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}Dtl (ID: 23)","timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":268.796384,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[execEventType.js] Resolved from context :contextKey → 23","timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select \r\n\tid, \r\n\tname,\r\n\tdescription,\r\n\taccount_id\r\nfrom whatsfresh.ingredient_types\r\nwhere id = 23","timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:36"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:36"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":186.296925,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:36"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:36"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}Dtl (ID: 23)","timestamp":"2025-10-29 11:51:36"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (499ms)","timestamp":"2025-10-29 11:51:36"}
{"body":{"values":{"0":{"paramName":"{contextKey}","paramVal":null}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 11:51:39"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":162.794913,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 11:51:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":249.272218,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 11:51:39"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (414ms)","timestamp":"2025-10-29 11:51:39"}
{"body":{"eventSQLId":"{pageName}Dtl","params":{"formData":null}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 11:51:39"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}Dtl","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":57.941648,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}Dtl (ID: 23)","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":93.461448,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[execEventType.js] Resolved from context :contextKey → 23","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select \r\n\tid, \r\n\tname,\r\n\tdescription,\r\n\taccount_id\r\nfrom whatsfresh.ingredient_types\r\nwhere id = 23","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:39"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:39"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":103.579604,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:39"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:39"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}Dtl (ID: 23)","timestamp":"2025-10-29 11:51:39"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (258ms)","timestamp":"2025-10-29 11:51:39"}
{"body":{"values":{"0":{"paramName":"{contextKey}","paramVal":null}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 11:51:43"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":72.441627,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 11:51:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":352.092874,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 11:51:43"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (427ms)","timestamp":"2025-10-29 11:51:43"}
{"body":{"eventSQLId":"{pageName}Dtl","params":{"formData":null}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 11:51:43"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: {pageName}Dtl","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":40.312793,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: {pageName}Dtl (ID: 23)","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":92.441451,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[execEventType.js] Resolved from context :contextKey → 23","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[execEventType.js] Executing SQL: select \r\n\tid, \r\n\tname,\r\n\tdescription,\r\n\taccount_id\r\nfrom whatsfresh.ingredient_types\r\nwhere id = 23","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 11:51:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 11:51:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":98.876533,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 11:51:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 11:51:43"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: {pageName}Dtl (ID: 23)","timestamp":"2025-10-29 11:51:43"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (235ms)","timestamp":"2025-10-29 11:51:43"}
{"body":{"values":{"0":{"paramName":"xrefID","paramVal":77}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 12:03:41"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":149.198635,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":304.950292,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (456ms)","timestamp":"2025-10-29 12:03:41"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 12:03:41"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:41"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":77}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 12:03:41"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.782068,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 77 \r\nAND active = 1","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":41.553415,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 77...","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 77\r\nORDER BY class, ordr","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":148.362823,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (192ms)","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 2","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":152.292025,"method":"GET","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 12:03:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 12:03:41"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (197ms)","timestamp":"2025-10-29 12:03:41"}
{"body":{"values":{"0":{"paramName":"xrefID","paramVal":66}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 12:03:43"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:03:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":62.788371,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 12:03:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":364.84711,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 12:03:43"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (430ms)","timestamp":"2025-10-29 12:03:43"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 12:03:43"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:43"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 12:03:43"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:03:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":46.673405,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 66 \r\nAND active = 1","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:03:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":47.307519,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 66\r\nORDER BY class, ordr","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:03:43"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":93.590197,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:03:43"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:43"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 12:03:43"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (144ms)","timestamp":"2025-10-29 12:03:43"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 12:03:44"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":187.110182,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 12:03:44"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:44"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 12:03:44"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (236ms)","timestamp":"2025-10-29 12:03:44"}
{"body":{"values":{"0":{"paramName":"xrefID","paramVal":66}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 12:03:48"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":37.440444,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":136.847861,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (176ms)","timestamp":"2025-10-29 12:03:48"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 12:03:48"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:48"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":66}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 12:03:48"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.71012,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 66\r\nORDER BY class, ordr","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":36.288387,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 66...","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 66 \r\nAND active = 1","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":33.686458,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (69ms)","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":38.633131,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:03:48"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 12:03:48"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (77ms)","timestamp":"2025-10-29 12:03:48"}
{"body":{"values":{"0":{"paramName":"xrefID","paramVal":69}}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/setVals","timestamp":"2025-10-29 12:06:16"}
{"level":"http","message":"[setVals.js] POST /api/setVals","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":128.072916,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":355.620321,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[setVals.js] Set 1 values for pc7900@gmail.com","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"[app.js]  Response: POST /api/setVals 200 (486ms)","timestamp":"2025-10-29 12:06:16"}
{"body":{"eventSQLId":"studio-xrefProps","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 12:06:16"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefProps","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:06:16"}
{"body":{"eventSQLId":"studio-xrefTriggers","params":{"xrefID":69}},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 12:06:16"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: studio-xrefTriggers","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":41.503417,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, paramName, paramVal \r\nFROM api_wf.eventProps \r\nWHERE xref_id = 69 \r\nAND active = 1","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":38.274182,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[execEventType.js] Using passed param :xrefID → 69...","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT id, xref_id, class, action, ordr, content\r\nFROM api_wf.eventTrigger\r\nWHERE xref_id = 69\r\nORDER BY class, ordr","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 0","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":97.438591,"method":"GET","operation":"database_query","rowCount":0,"success":true},"timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefProps (ID: 7)","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (141ms)","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 3","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":198.410261,"method":"GET","operation":"database_query","rowCount":3,"success":true},"timestamp":"2025-10-29 12:06:16"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: studio-xrefTriggers (ID: 6)","timestamp":"2025-10-29 12:06:16"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (238ms)","timestamp":"2025-10-29 12:06:16"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 12:06:41"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 12:06:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:06:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:06:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:06:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":145.421021,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:06:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:06:41"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 12:06:41"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (147ms)","timestamp":"2025-10-29 12:06:41"}
{"level":"http","message":"[app.js]  Request","method":"GET","path":"/api/getVal","query":{"paramName":"pageID"},"timestamp":"2025-10-29 12:06:41"}
{"level":"http","message":"[getVal.js] GET /api/getVal?paramName=pageID","timestamp":"2025-10-29 12:06:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:06:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:06:41"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:06:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":189.966918,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:06:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:06:41"}
{"level":"debug","message":"[getVal.js] Retrieved value for pageID: 11","timestamp":"2025-10-29 12:06:41"}
{"level":"info","message":"[app.js]  Response: GET /api/getVal 304 (192ms)","timestamp":"2025-10-29 12:06:41"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-29 12:11:54"}
{"body":{"data":{"assigned_to":"","comments":"","description":"# Next Steps - Clone Template Implementation\n\n## Immediate (Priority: high)\n1. **Build /api/cloneStep endpoint** - Route handler that calls sessionManager functions\n2. **Implement Step 1: Load Hierarchy** - Use execEventType(\"studio-xrefHierarchy\") to get template components with levels\n3. **Implement Step 2: Clone Components** - Build component records with ID mapping and parent references\n4. **Test backend workflow** - Verify Steps 1-2 with curl/Postman before building UI\n\n## Short Term (Priority: medium)\n1. **Implement Step 3: Clone Props** - Token replacement logic for {contextKey}, {tableName}, {pageName}\n2. **Implement Step 4: Clone Triggers** - Map xref_ids and replace tokens in trigger content\n3. **Implement Step 5: Clone EventSQL** - Create stub records for List and Dtl queries\n4. **Build commit function** - Bulk INSERT staged records to real tables in transaction\n\n## Medium Term (Priority: medium)\n1. **Create React Flow page** - /studio/clone-template route with visual orchestrator\n2. **Build StepNode component** - Run, Inspect, Rollback buttons per step\n3. **Add inspection panels** - Show staged records after each step\n4. **Wire up API calls** - Connect React Flow to backend endpoints\n\n## Future (Priority: low)\n1. **Test full clone workflow** - CRUD template → ingrType page end-to-end\n2. **Clone remaining pages** - brnd, vndr, prod, prodType, etc.\n3. **Build template browser UI** - View all templates in page_registry\n4. **Add validation** - Check for duplicate pages, FK conflicts, etc.","name":"Clone Template Workflow - Backend API Implementation","priority":"see steps","status":"pending","userID":"claude"},"method":"INSERT","table":"api_wf.plans"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 12:58:46"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 12:58:46"}
{"data":{"assigned_to":"","comments":"","description":"# Next Steps - Clone Template Implementation\n\n## Immediate (Priority: high)\n1. **Build /api/cloneStep endpoint** - Route handler that calls sessionManager functions\n2. **Implement Step 1: Load Hierarchy** - Use execEventType(\"studio-xrefHierarchy\") to get template components with levels\n3. **Implement Step 2: Clone Components** - Build component records with ID mapping and parent references\n4. **Test backend workflow** - Verify Steps 1-2 with curl/Postman before building UI\n\n## Short Term (Priority: medium)\n1. **Implement Step 3: Clone Props** - Token replacement logic for {contextKey}, {tableName}, {pageName}\n2. **Implement Step 4: Clone Triggers** - Map xref_ids and replace tokens in trigger content\n3. **Implement Step 5: Clone EventSQL** - Create stub records for List and Dtl queries\n4. **Build commit function** - Bulk INSERT staged records to real tables in transaction\n\n## Medium Term (Priority: medium)\n1. **Create React Flow page** - /studio/clone-template route with visual orchestrator\n2. **Build StepNode component** - Run, Inspect, Rollback buttons per step\n3. **Add inspection panels** - Show staged records after each step\n4. **Wire up API calls** - Connect React Flow to backend endpoints\n\n## Future (Priority: low)\n1. **Test full clone workflow** - CRUD template → ingrType page end-to-end\n2. **Clone remaining pages** - brnd, vndr, prod, prodType, etc.\n3. **Build template browser UI** - View all templates in page_registry\n4. **Add validation** - Check for duplicate pages, FK conflicts, etc.","name":"Clone Template Workflow - Backend API Implementation","priority":"see steps","status":"pending","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plans","timestamp":"2025-10-29 12:58:46"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:58:46"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:58:46"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:58:46"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":33.539705,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:58:46"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:58:46"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:58:46"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:58:46"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:58:46"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":97.737037,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:58:46"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:58:46"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plans (name, status, priority, description, comments, assigned_to, created_at, created_by) VALUES ('Clone Template Workflow - Backend API Implementation', 'pending', 'see steps', '# Next Steps - Clone Template Implementation\n\n## Immediate (Priority: high)\n1. **Build /api/cloneStep endpoint** - Route handler that calls sessionManager functions\n2. **Implement Step 1: Load Hierarchy** - Use execEventType(\"studio-xrefHierarchy\") to get template components with levels\n3. **Implement Step 2: Clone Components** - Build component records with ID mapping and parent references\n4. **Test backend workflow** - Verify Steps 1-2 with curl/Postman before building UI\n\n## Short Term (Priority: medium)\n1. **Implement Step 3: Clone Props** - Token replacement logic for {contextKey}, {tableName}, {pageName}\n2. **Implement Step 4: Clone Triggers** - Map xref_ids and replace tokens in trigger content\n3. **Implement Step 5: Clone EventSQL** - Create stub records for List and Dtl queries\n4. **Build commit function** - Bulk INSERT staged records to real tables in transaction\n\n## Medium Term (Priority: medium)\n1. **Create React Flow page** - /studio/clone-template route with visual orchestrator\n2. **Build StepNode component** - Run, Inspect, Rollback buttons per step\n3. **Add inspection panels** - Show staged records after each step\n4. **Wire up API calls** - Connect React Flow to backend endpoints\n\n## Future (Priority: low)\n1. **Test full clone workflow** - CRUD template → ingrType page end-to-end\n2. **Clone remaining pages** - brnd, vndr, prod, prodType, etc.\n3. **Build template browser UI** - View all templates in page_registry\n4. **Add validation** - Check for duplicate pages, FK conflicts, etc.', '', '', NOW(), 'Paul')","timestamp":"2025-10-29 12:58:46"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 12:58:46"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 12:58:46"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":409.731322,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 12:58:46"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:58:46"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plans","timestamp":"2025-10-29 12:58:46"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 12:58:46"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (543ms)","timestamp":"2025-10-29 12:58:46"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":543.367657,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-29 12:58:46"}
{"body":{"data":{"from_agent":"claude","message":"# Claude Session Summary - 2025-10-29\n\n**Focus:** CRUD Template Architecture & Clone Workflow Infrastructure\n**Primary AI:** Claude\n\n---\n\n## ✅ Major Accomplishments\n\n### 1. execDML.js - Dynamic contextKey\n- Updated to use `pageRegistry.contextKey` instead of hardcoded `selectedID`\n- Supports full ID names (ingredient_id, product_batch_id)\n- File: apps/studio/src/rendering/WorkflowEngine/triggers/action/execDML.js\n\n### 2. pageConfig Structure Refactored\n- Moved all metadata into props (title, routePath, pageID, parentID)\n- Removed cluster attribute\n- Pattern: Everything via {{pageConfig.props.X}}\n- Files: pageConfigBuilder/index.js, PageFlowCanvas.jsx, PagePreviewPanel.jsx, genMermaid.js\n\n### 3. Clone Session Infrastructure\n- Created clone_session table with JSON staging columns\n- Built sessionManager.js (createSession, loadSession, updateSession)\n- Implemented testSession.js - populates real workflow data\n- Architecture: Server-side staging with transaction safety\n\n### 4. Template Cloning Workflow Design\n- High-level Mermaid diagram (4 steps + inspection)\n- React Flow orchestrator architecture\n- Session-based workflow with rollback\n- Communication: Plan 51 #69 (workflow), #70 (future ideas)\n\n### 5. DevNote Analysis\n- Confirmed Grid rowActions DELETE works\n- Verified Submit execDML should use empty {}\n- Documented Container onLoad tableName pattern\n- Validated eventSQL template token strategy\n\n---\n\n## 📊 Statistics\n\n- Files Created: 2\n- Files Modified: 5\n- Table Created: 1 (clone_session)\n- Plan Impacts: 8\n- Plan Communications: 3\n- Test Data: 1 complete session (6 components, 4 props, 4 triggers)\n\n---\n\n## 🚀 Next Steps\n\n### See Plan: 52\n\n---\n\n## 💡 Key Learnings\n\n### Staging Pattern Safety\nServer-side JSON staging beats direct insert:\n- Inspect before commit\n- Easy rollback\n- Atomic transactions\n\n### pageConfig Consistency\nAll metadata in props = simpler template resolution\n\n### React Flow for Complex Workflows\nVisual orchestration > batch process:\n- Step-by-step execution\n- Inspection points\n- Better debugging\n\n---\n\n**Status:** Foundation complete, ready for backend API implementation","plan_id":51,"subject":"CRUD Template Architecture & Clone Workflow Foundation","to_agent":"any","type":"summary","userID":"claude"},"method":"INSERT","table":"api_wf.plan_communications"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 12:59:10"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 12:59:10"}
{"data":{"from_agent":"claude","message":"# Claude Session Summary - 2025-10-29\n\n**Focus:** CRUD Template Architecture & Clone Workflow Infrastructure\n**Primary AI:** Claude\n\n---\n\n## ✅ Major Accomplishments\n\n### 1. execDML.js - Dynamic contextKey\n- Updated to use `pageRegistry.contextKey` instead of hardcoded `selectedID`\n- Supports full ID names (ingredient_id, product_batch_id)\n- File: apps/studio/src/rendering/WorkflowEngine/triggers/action/execDML.js\n\n### 2. pageConfig Structure Refactored\n- Moved all metadata into props (title, routePath, pageID, parentID)\n- Removed cluster attribute\n- Pattern: Everything via {{pageConfig.props.X}}\n- Files: pageConfigBuilder/index.js, PageFlowCanvas.jsx, PagePreviewPanel.jsx, genMermaid.js\n\n### 3. Clone Session Infrastructure\n- Created clone_session table with JSON staging columns\n- Built sessionManager.js (createSession, loadSession, updateSession)\n- Implemented testSession.js - populates real workflow data\n- Architecture: Server-side staging with transaction safety\n\n### 4. Template Cloning Workflow Design\n- High-level Mermaid diagram (4 steps + inspection)\n- React Flow orchestrator architecture\n- Session-based workflow with rollback\n- Communication: Plan 51 #69 (workflow), #70 (future ideas)\n\n### 5. DevNote Analysis\n- Confirmed Grid rowActions DELETE works\n- Verified Submit execDML should use empty {}\n- Documented Container onLoad tableName pattern\n- Validated eventSQL template token strategy\n\n---\n\n## 📊 Statistics\n\n- Files Created: 2\n- Files Modified: 5\n- Table Created: 1 (clone_session)\n- Plan Impacts: 8\n- Plan Communications: 3\n- Test Data: 1 complete session (6 components, 4 props, 4 triggers)\n\n---\n\n## 🚀 Next Steps\n\n### See Plan: 52\n\n---\n\n## 💡 Key Learnings\n\n### Staging Pattern Safety\nServer-side JSON staging beats direct insert:\n- Inspect before commit\n- Easy rollback\n- Atomic transactions\n\n### pageConfig Consistency\nAll metadata in props = simpler template resolution\n\n### React Flow for Complex Workflows\nVisual orchestration > batch process:\n- Step-by-step execution\n- Inspection points\n- Better debugging\n\n---\n\n**Status:** Foundation complete, ready for backend API implementation","plan_id":51,"subject":"CRUD Template Architecture & Clone Workflow Foundation","to_agent":"any","type":"summary","userID":"claude"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_communications","timestamp":"2025-10-29 12:59:10"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:59:10"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:59:10"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:59:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":97.17197,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:59:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:59:10"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 12:59:10"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 12:59:10"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 12:59:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":36.69789,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 12:59:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:59:10"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_communications (plan_id, from_agent, to_agent, type, subject, message, created_at, created_by) VALUES (51, 'claude', 'any', 'summary', 'CRUD Template Architecture & Clone Workflow Foundation', '# Claude Session Summary - 2025-10-29\n\n**Focus:** CRUD Template Architecture & Clone Workflow Infrastructure\n**Primary AI:** Claude\n\n---\n\n## ✅ Major Accomplishments\n\n### 1. execDML.js - Dynamic contextKey\n- Updated to use `pageRegistry.contextKey` instead of hardcoded `selectedID`\n- Supports full ID names (ingredient_id, product_batch_id)\n- File: apps/studio/src/rendering/WorkflowEngine/triggers/action/execDML.js\n\n### 2. pageConfig Structure Refactored\n- Moved all metadata into props (title, routePath, pageID, parentID)\n- Removed cluster attribute\n- Pattern: Everything via {{pageConfig.props.X}}\n- Files: pageConfigBuilder/index.js, PageFlowCanvas.jsx, PagePreviewPanel.jsx, genMermaid.js\n\n### 3. Clone Session Infrastructure\n- Created clone_session table with JSON staging columns\n- Built sessionManager.js (createSession, loadSession, updateSession)\n- Implemented testSession.js - populates real workflow data\n- Architecture: Server-side staging with transaction safety\n\n### 4. Template Cloning Workflow Design\n- High-level Mermaid diagram (4 steps + inspection)\n- React Flow orchestrator architecture\n- Session-based workflow with rollback\n- Communication: Plan 51 #69 (workflow), #70 (future ideas)\n\n### 5. DevNote Analysis\n- Confirmed Grid rowActions DELETE works\n- Verified Submit execDML should use empty {}\n- Documented Container onLoad tableName pattern\n- Validated eventSQL template token strategy\n\n---\n\n## 📊 Statistics\n\n- Files Created: 2\n- Files Modified: 5\n- Table Created: 1 (clone_session)\n- Plan Impacts: 8\n- Plan Communications: 3\n- Test Data: 1 complete session (6 components, 4 props, 4 triggers)\n\n---\n\n## 🚀 Next Steps\n\n### See Plan: 52\n\n---\n\n## 💡 Key Learnings\n\n### Staging Pattern Safety\nServer-side JSON staging beats direct insert:\n- Inspect before commit\n- Easy rollback\n- Atomic transactions\n\n### pageConfig Consistency\nAll metadata in props = simpler template resolution\n\n### React Flow for Complex Workflows\nVisual orchestration > batch process:\n- Step-by-step execution\n- Inspection points\n- Better debugging\n\n---\n\n**Status:** Foundation complete, ready for backend API implementation', NOW(), 'Paul')","timestamp":"2025-10-29 12:59:10"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 12:59:10"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 12:59:10"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":267.492003,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 12:59:10"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 12:59:10"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_communications","timestamp":"2025-10-29 12:59:10"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 12:59:10"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (405ms)","timestamp":"2025-10-29 12:59:10"}
{"body":{"data":{"from_agent":"system","message":"---\ndescription: \"Generate and store session accomplishments generate a New Plan document\"\nallowed-tools: []\n---\n\n# Session Summary Generator (Shared Claude/Kiro)\n\n1.  Generate a comprehensive session summary and store it in the plan_communications database for persistent AI coordination.\n2.  Generate a new entry in the plans table outlining probable Next Steps to be addressed.\n\n## Instructions\n\n### IMPORTANT: Execution Order\n\n1. **First: Create Next Steps Plan** - Generate and store the plan for the NEXT session\n2. **Second: Create Session Summary** - Summarize work done in the CURRENT session\n3. **Third: Log File Impacts** - Track files changed during the CURRENT session\n\nThe summary and impacts should reference the plan you WORKED ON (often plan_id: 0 for adhoc work), NOT the plan you just created for next steps.\n\n### Create a detailed markdown summary outlining the probable next steps and store it in the database:\n\n1. **Generate Plan** - Create markdown with the Plans for the Next Session\n2. **Store in Database** - Use execDML to insert into plans table\n3. **Capture plan_id** - Save this ID to reference in summary's \"Next Steps\" section\n4. **Output Confirmation** - Show the stored record ID and brief summary\n\n**Table**: `api_wf.plans`\n**Fields**:\n\n- `name`: Brief Name for the Plan's Next Steps (< 100 bytes)\n- `status`: \"pending\"\n- `priority`: \"see steps\" - include a priority spiel for each step.  'immediate', 'future', 'short term'\n- `description`: .md format of the Planned next steps\n- `comments`: \"\"\n- `assigned_to`: \"\"\n\n### Create a detailed markdown summary of the current session and store it in the database:\n\n1. **Generate Summary** - Create markdown with accomplishments, statistics, next steps, key learnings\n2. **Store in Database** - Use execDML to insert into plan_communications table\n3. **Output Confirmation** - Show the stored record ID and brief summary\n\n**Table**: `api_wf.plan_communications`\n**Fields**:\n\n- `plan_id`: 0 (for adhoc work) or the plan_id of the plan you WORKED ON (not the next steps plan)\n- `from_agent`: \"claude\" | \"kiro\"\n- `to_agent`: \"claude\" | \"kiro\" | \"any\"\n- `type`: \"summary\"\n- `subject`: Brief session topic\n- `message`: Full markdown summary\n- `status`: \"\" (empty)\n\n**Table**: `api_wf.plans`\n**Fields**:\n\n- `name`: Brief Name for the Plan's Next Steps (< 100 bytes)\n- `status`: \"pending\"\n- `priority`: \"see steps\" - include a priority spiel for each step.  'immediate', 'future', 'short term'\n- `description`: .md format of the Planned next steps\n- `comments`: \"\"\n- `assigned_to`: \"\"\n\n**Note:** DO NOT include `created_by` - it is auto-injected from userID by execDML\n\n## Summary Template\n\n````markdown\n# [AI Name] Session Summary - [Date YYYY-MM-DD]\n\n**Focus:** [One-line summary]\n**Primary AI:** Claude | Kiro\n\n---\n\n## 🤝 AI Coordination Check\n\n**Recent Summaries Query:**\n\n```sql\nSELECT id, from_agent, subject, created_at\nFROM api_wf.plan_communications\nWHERE type = 'summary' AND plan_id = 0\nORDER BY created_at DESC LIMIT 2\n```\n\n**Plan 45 Context Query:**\n\n```bash\n# Get Plan 45 architectural decisions and WhatsFresh page development context\ncurl -X POST http://localhost:3001/api/execEventType \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"eventSQLId\": \"sessionPlan45\"}'\n```\n\n**Note:** If session work relates to WhatsFresh app building, template architecture, or page development, reference Plan 45 in the summary and set `plan_id: 45` in plan_communications.\n````\n\n**Session Handoff:**\n\n- [ ] **For Claude:** [Architecture/analysis tasks]\n- [ ] **For Kiro:** [Implementation tasks]\n\n---\n\n## ✅ Major Accomplishments\n\n### 1. [Category]\n\n- Specific achievements with file paths/function names\n\n---\n\n## 📊 Statistics\n\n- Files created/modified: X\n- Functions added: Y\n- Bugs fixed: Z\n\n---\n\n## 🚀 Next Steps\n\n### See Plan: (id of Plan just created)\n\n1. [Next step Plan should be created before the Summary.  Refer to the Plans.id]\n\n\n## 💡 Key Learnings\n\n### [Concept/Pattern]\n\n- What was learned and why it matters\n\n---\n\n**Status:** [Current state and readiness]\n\n````\n\n## Implementation\n\n### For Both Claude and Kiro:\n1. Generate summary markdown following template above\n2. Execute curl command to create the Next Steps plan in plans table (Step 1)\n3. Capture the returned plan_id from Step 1\n4. Execute curl command to store summary in plan_communications table with plan_id (Step 2)\n5. Execute curl command to log file impacts\n6. Confirm storage and show record IDs\n\n## Step 1: Create Next Steps Plan in Database\n\n```bash\ncurl -X POST http://localhost:3001/api/execDML \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"method\": \"INSERT\",\n    \"table\": \"api_wf.plans\",\n    \"data\": {\n      \"name\": \"Session Next Steps - [Brief Topic]\",\n      \"status\": \"pending\",\n      \"priority\": \"medium\",\n      \"description\": \"# Next Steps\\n\\n## Immediate (Priority: high)\\n- Step 1\\n- Step 2\\n\\n## Short Term (Priority: medium)\\n- Step 3\\n\\n## Future (Priority: low)\\n- Step 4\",\n      \"comments\": \"\",\n      \"assigned_to\": \"\",\n      \"created_by\": \"claude\"\n    }\n  }'\n```\n\n**Capture the returned `id` from this response to use as `plan_id` in Step 2.**\n\n## Step 2: Store Summary in Database\n\n```bash\ncurl -X POST http://localhost:3001/api/execDML \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"method\": \"INSERT\",\n    \"table\": \"api_wf.plan_communications\",\n    \"data\": {\n      \"plan_id\": [ID_FROM_STEP_1],\n      \"from_agent\": \"claude\",\n      \"to_agent\": \"any\",\n      \"type\": \"summary\",\n      \"subject\": \"Brief session topic here\",\n      \"message\": \"# Full markdown summary here\\n\\nUse \\\\n for newlines in JSON string\",\n      \"created_by\": \"claude\"\n    }\n  }'\n```\n\n**Notes:**\n- Replace `from_agent` with \"kiro\" if Kiro is creating the summary\n- DO NOT include `created_by` - it is auto-injected from userID by execDML\n- Use `plan_id: 0` for general summaries not tied to a specific plan\n- Reference the plan_id from Step 1 in the summary's Next Steps section\n\n## Optional: Update Module Dependencies (when applicable)\n\nRun these commands if you created/deleted files or changed imports/exports:\n\n```bash\n# Generate dependency graph\nnpx madge . --json --webpack-config jsconfig.json > analysis-n-document/genDocs/output/monorepo/raw-madge.json\n\n# Enhance with metadata\nnode analysis-n-document/genDocs/enhance-madge.js\n\n# Create load files\nnode analysis-n-document/genDocs/create-load-files.js\n\n# Populate database\nnpm run analyze:populate-db\n```\n\n**When to run:**\n- Created or deleted files\n- Modified imports/exports significantly\n- Added/removed npm packages\n- Refactored module structure\n\n**When to skip:**\n- Only modified config/documentation\n- Changes didn't affect module dependencies\n- Pure bug fixes without structural changes\n\n## Logging File Impacts\n\nAfter completing work, log all file changes to `plan_impacts`:\n\n```bash\n# Template for multiple file modified/created/removed\ncurl -X POST http://localhost:3001/api/logImpact \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"impacts\": [\n      {\n        \"filePath\": \"file_path.js\",\n        \"changeType\": \"MODIFY\",\n        \"description\": \"Brief summary of modifications\\n- Specific change 1\\n- Specific change 2\\n- Specific change 3\",\n        \"affectedApps\": [\"appName\"],\n        \"createdBy\": \"AI agent\"\n      },\n      {\n        \"filePath\": \"file_path.js\",\n        \"changeType\": \"CREATE\",\n        \"description\": \"Created new module\\n- Purpose and functionality\\n- Key features added\",\n        \"affectedApps\": [\"appName\"],\n        \"createdBy\": \"AI agent\"\n      },\n\t  {\n        \"filePath\": \"file_path.js\",\n        \"changeType\": \"DELETE\",\n        \"description\": \"Removed obsolete module - reason for deletion\",\n        \"affectedApps\": [\"appName\"],\n        \"createdBy\": \"AI agent\"\n      }\n    ],\n    \"planId\": 0\n  }'\n```\n\n**Important:**\n- DO NOT include `batch_id` - it's a generated column\n- Valid `changeType`: CREATE, MODIFY, DELETE, ANALYZE, DISCOVER\n- Use `planId: 0` for adhoc operations\n- Field names are camelCase: `filePath`, `changeType`, `affectedApps`, `createdBy`, `planId`\n- **Description formatting**: Use markdown with newlines and bullets for multi-part changes (improves readability in views/queries)\n  - For complex changes: `\"Brief summary\\n- Point 1\\n- Point 2\"`\n  - For simple changes: Single line without bullets is fine\n\n## Benefits\n\n- **Persistent History**: All AI sessions stored and searchable\n- **Seamless Handoffs**: Next AI can query recent summaries\n- **No Manual Work**: Eliminates document creation overhead\n- **Coordination**: Prevents duplicate work between AIs\n- **Context Continuity**: Maintains session context across AI switches\n\n````\n\nThis creates a unified AI coordination system where both Claude and Kiro contribute to a shared knowledge base.\n","plan_id":0,"subject":"AI-summary","to_agent":"any","type":"instructions","userID":"Paul"},"method":"INSERT","table":"api_wf.plan_communications"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 13:05:47"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 13:05:47"}
{"data":{"from_agent":"system","message":"---\ndescription: \"Generate and store session accomplishments generate a New Plan document\"\nallowed-tools: []\n---\n\n# Session Summary Generator (Shared Claude/Kiro)\n\n1.  Generate a comprehensive session summary and store it in the plan_communications database for persistent AI coordination.\n2.  Generate a new entry in the plans table outlining probable Next Steps to be addressed.\n\n## Instructions\n\n### IMPORTANT: Execution Order\n\n1. **First: Create Next Steps Plan** - Generate and store the plan for the NEXT session\n2. **Second: Create Session Summary** - Summarize work done in the CURRENT session\n3. **Third: Log File Impacts** - Track files changed during the CURRENT session\n\nThe summary and impacts should reference the plan you WORKED ON (often plan_id: 0 for adhoc work), NOT the plan you just created for next steps.\n\n### Create a detailed markdown summary outlining the probable next steps and store it in the database:\n\n1. **Generate Plan** - Create markdown with the Plans for the Next Session\n2. **Store in Database** - Use execDML to insert into plans table\n3. **Capture plan_id** - Save this ID to reference in summary's \"Next Steps\" section\n4. **Output Confirmation** - Show the stored record ID and brief summary\n\n**Table**: `api_wf.plans`\n**Fields**:\n\n- `name`: Brief Name for the Plan's Next Steps (< 100 bytes)\n- `status`: \"pending\"\n- `priority`: \"see steps\" - include a priority spiel for each step.  'immediate', 'future', 'short term'\n- `description`: .md format of the Planned next steps\n- `comments`: \"\"\n- `assigned_to`: \"\"\n\n### Create a detailed markdown summary of the current session and store it in the database:\n\n1. **Generate Summary** - Create markdown with accomplishments, statistics, next steps, key learnings\n2. **Store in Database** - Use execDML to insert into plan_communications table\n3. **Output Confirmation** - Show the stored record ID and brief summary\n\n**Table**: `api_wf.plan_communications`\n**Fields**:\n\n- `plan_id`: 0 (for adhoc work) or the plan_id of the plan you WORKED ON (not the next steps plan)\n- `from_agent`: \"claude\" | \"kiro\"\n- `to_agent`: \"claude\" | \"kiro\" | \"any\"\n- `type`: \"summary\"\n- `subject`: Brief session topic\n- `message`: Full markdown summary\n- `status`: \"\" (empty)\n\n**Table**: `api_wf.plans`\n**Fields**:\n\n- `name`: Brief Name for the Plan's Next Steps (< 100 bytes)\n- `status`: \"pending\"\n- `priority`: \"see steps\" - include a priority spiel for each step.  'immediate', 'future', 'short term'\n- `description`: .md format of the Planned next steps\n- `comments`: \"\"\n- `assigned_to`: \"\"\n\n**Note:** DO NOT include `created_by` - it is auto-injected from userID by execDML\n\n## Summary Template\n\n````markdown\n# [AI Name] Session Summary - [Date YYYY-MM-DD]\n\n**Focus:** [One-line summary]\n**Primary AI:** Claude | Kiro\n\n---\n\n## 🤝 AI Coordination Check\n\n**Recent Summaries Query:**\n\n```sql\nSELECT id, from_agent, subject, created_at\nFROM api_wf.plan_communications\nWHERE type = 'summary' AND plan_id = 0\nORDER BY created_at DESC LIMIT 2\n```\n\n**Plan 45 Context Query:**\n\n```bash\n# Get Plan 45 architectural decisions and WhatsFresh page development context\ncurl -X POST http://localhost:3001/api/execEventType \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"eventSQLId\": \"sessionPlan45\"}'\n```\n\n**Note:** If session work relates to WhatsFresh app building, template architecture, or page development, reference Plan 45 in the summary and set `plan_id: 45` in plan_communications.\n````\n\n**Session Handoff:**\n\n- [ ] **For Claude:** [Architecture/analysis tasks]\n- [ ] **For Kiro:** [Implementation tasks]\n\n---\n\n## ✅ Major Accomplishments\n\n### 1. [Category]\n\n- Specific achievements with file paths/function names\n\n---\n\n## 📊 Statistics\n\n- Files created/modified: X\n- Functions added: Y\n- Bugs fixed: Z\n\n---\n\n## 🚀 Next Steps\n\n### See Plan: (id of Plan just created)\n\n1. [Next step Plan should be created before the Summary.  Refer to the Plans.id]\n\n\n## 💡 Key Learnings\n\n### [Concept/Pattern]\n\n- What was learned and why it matters\n\n---\n\n**Status:** [Current state and readiness]\n\n````\n\n## Implementation\n\n### For Both Claude and Kiro:\n1. Generate summary markdown following template above\n2. Execute curl command to create the Next Steps plan in plans table (Step 1)\n3. Capture the returned plan_id from Step 1\n4. Execute curl command to store summary in plan_communications table with plan_id (Step 2)\n5. Execute curl command to log file impacts\n6. Confirm storage and show record IDs\n\n## Step 1: Create Next Steps Plan in Database\n\n```bash\ncurl -X POST http://localhost:3001/api/execDML \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"method\": \"INSERT\",\n    \"table\": \"api_wf.plans\",\n    \"data\": {\n      \"name\": \"Session Next Steps - [Brief Topic]\",\n      \"status\": \"pending\",\n      \"priority\": \"medium\",\n      \"description\": \"# Next Steps\\n\\n## Immediate (Priority: high)\\n- Step 1\\n- Step 2\\n\\n## Short Term (Priority: medium)\\n- Step 3\\n\\n## Future (Priority: low)\\n- Step 4\",\n      \"comments\": \"\",\n      \"assigned_to\": \"\",\n      \"created_by\": \"claude\"\n    }\n  }'\n```\n\n**Capture the returned `id` from this response to use as `plan_id` in Step 2.**\n\n## Step 2: Store Summary in Database\n\n```bash\ncurl -X POST http://localhost:3001/api/execDML \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"method\": \"INSERT\",\n    \"table\": \"api_wf.plan_communications\",\n    \"data\": {\n      \"plan_id\": [ID_FROM_STEP_1],\n      \"from_agent\": \"claude\",\n      \"to_agent\": \"any\",\n      \"type\": \"summary\",\n      \"subject\": \"Brief session topic here\",\n      \"message\": \"# Full markdown summary here\\n\\nUse \\\\n for newlines in JSON string\",\n      \"created_by\": \"claude\"\n    }\n  }'\n```\n\n**Notes:**\n- Replace `from_agent` with \"kiro\" if Kiro is creating the summary\n- DO NOT include `created_by` - it is auto-injected from userID by execDML\n- Use `plan_id: 0` for general summaries not tied to a specific plan\n- Reference the plan_id from Step 1 in the summary's Next Steps section\n\n## Optional: Update Module Dependencies (when applicable)\n\nRun these commands if you created/deleted files or changed imports/exports:\n\n```bash\n# Generate dependency graph\nnpx madge . --json --webpack-config jsconfig.json > analysis-n-document/genDocs/output/monorepo/raw-madge.json\n\n# Enhance with metadata\nnode analysis-n-document/genDocs/enhance-madge.js\n\n# Create load files\nnode analysis-n-document/genDocs/create-load-files.js\n\n# Populate database\nnpm run analyze:populate-db\n```\n\n**When to run:**\n- Created or deleted files\n- Modified imports/exports significantly\n- Added/removed npm packages\n- Refactored module structure\n\n**When to skip:**\n- Only modified config/documentation\n- Changes didn't affect module dependencies\n- Pure bug fixes without structural changes\n\n## Logging File Impacts\n\nAfter completing work, log all file changes to `plan_impacts`:\n\n```bash\n# Template for multiple file modified/created/removed\ncurl -X POST http://localhost:3001/api/logImpact \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"impacts\": [\n      {\n        \"filePath\": \"file_path.js\",\n        \"changeType\": \"MODIFY\",\n        \"description\": \"Brief summary of modifications\\n- Specific change 1\\n- Specific change 2\\n- Specific change 3\",\n        \"affectedApps\": [\"appName\"],\n        \"createdBy\": \"AI agent\"\n      },\n      {\n        \"filePath\": \"file_path.js\",\n        \"changeType\": \"CREATE\",\n        \"description\": \"Created new module\\n- Purpose and functionality\\n- Key features added\",\n        \"affectedApps\": [\"appName\"],\n        \"createdBy\": \"AI agent\"\n      },\n\t  {\n        \"filePath\": \"file_path.js\",\n        \"changeType\": \"DELETE\",\n        \"description\": \"Removed obsolete module - reason for deletion\",\n        \"affectedApps\": [\"appName\"],\n        \"createdBy\": \"AI agent\"\n      }\n    ],\n    \"planId\": 0\n  }'\n```\n\n**Important:**\n- DO NOT include `batch_id` - it's a generated column\n- Valid `changeType`: CREATE, MODIFY, DELETE, ANALYZE, DISCOVER\n- Use `planId: 0` for adhoc operations\n- Field names are camelCase: `filePath`, `changeType`, `affectedApps`, `createdBy`, `planId`\n- **Description formatting**: Use markdown with newlines and bullets for multi-part changes (improves readability in views/queries)\n  - For complex changes: `\"Brief summary\\n- Point 1\\n- Point 2\"`\n  - For simple changes: Single line without bullets is fine\n\n## Benefits\n\n- **Persistent History**: All AI sessions stored and searchable\n- **Seamless Handoffs**: Next AI can query recent summaries\n- **No Manual Work**: Eliminates document creation overhead\n- **Coordination**: Prevents duplicate work between AIs\n- **Context Continuity**: Maintains session context across AI switches\n\n````\n\nThis creates a unified AI coordination system where both Claude and Kiro contribute to a shared knowledge base.\n","plan_id":0,"subject":"AI-summary","to_agent":"any","type":"instructions","userID":"Paul"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_communications","timestamp":"2025-10-29 13:05:47"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:05:47"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:05:47"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:05:47"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":41.133999,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:05:47"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:05:47"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:05:47"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:05:47"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:05:47"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":41.793606,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:05:47"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:05:47"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_communications (plan_id, from_agent, to_agent, type, subject, message, created_at, created_by) VALUES (0, 'system', 'any', 'instructions', 'AI-summary', '---\ndescription: \"Generate and store session accomplishments generate a New Plan document\"\nallowed-tools: []\n---\n\n# Session Summary Generator (Shared Claude/Kiro)\n\n1.  Generate a comprehensive session summary and store it in the plan_communications database for persistent AI coordination.\n2.  Generate a new entry in the plans table outlining probable Next Steps to be addressed.\n\n## Instructions\n\n### IMPORTANT: Execution Order\n\n1. **First: Create Next Steps Plan** - Generate and store the plan for the NEXT session\n2. **Second: Create Session Summary** - Summarize work done in the CURRENT session\n3. **Third: Log File Impacts** - Track files changed during the CURRENT session\n\nThe summary and impacts should reference the plan you WORKED ON (often plan_id: 0 for adhoc work), NOT the plan you just created for next steps.\n\n### Create a detailed markdown summary outlining the probable next steps and store it in the database:\n\n1. **Generate Plan** - Create markdown with the Plans for the Next Session\n2. **Store in Database** - Use execDML to insert into plans table\n3. **Capture plan_id** - Save this ID to reference in summary''s \"Next Steps\" section\n4. **Output Confirmation** - Show the stored record ID and brief summary\n\n**Table**: `api_wf.plans`\n**Fields**:\n\n- `name`: Brief Name for the Plan''s Next Steps (< 100 bytes)\n- `status`: \"pending\"\n- `priority`: \"see steps\" - include a priority spiel for each step.  ''immediate'', ''future'', ''short term''\n- `description`: .md format of the Planned next steps\n- `comments`: \"\"\n- `assigned_to`: \"\"\n\n### Create a detailed markdown summary of the current session and store it in the database:\n\n1. **Generate Summary** - Create markdown with accomplishments, statistics, next steps, key learnings\n2. **Store in Database** - Use execDML to insert into plan_communications table\n3. **Output Confirmation** - Show the stored record ID and brief summary\n\n**Table**: `api_wf.plan_communications`\n**Fields**:\n\n- `plan_id`: 0 (for adhoc work) or the plan_id of the plan you WORKED ON (not the next steps plan)\n- `from_agent`: \"claude\" | \"kiro\"\n- `to_agent`: \"claude\" | \"kiro\" | \"any\"\n- `type`: \"summary\"\n- `subject`: Brief session topic\n- `message`: Full markdown summary\n- `status`: \"\" (empty)\n\n**Table**: `api_wf.plans`\n**Fields**:\n\n- `name`: Brief Name for the Plan''s Next Steps (< 100 bytes)\n- `status`: \"pending\"\n- `priority`: \"see steps\" - include a priority spiel for each step.  ''immediate'', ''future'', ''short term''\n- `description`: .md format of the Planned next steps\n- `comments`: \"\"\n- `assigned_to`: \"\"\n\n**Note:** DO NOT include `created_by` - it is auto-injected from userID by execDML\n\n## Summary Template\n\n````markdown\n# [AI Name] Session Summary - [Date YYYY-MM-DD]\n\n**Focus:** [One-line summary]\n**Primary AI:** Claude | Kiro\n\n---\n\n## 🤝 AI Coordination Check\n\n**Recent Summaries Query:**\n\n```sql\nSELECT id, from_agent, subject, created_at\nFROM api_wf.plan_communications\nWHERE type = ''summary'' AND plan_id = 0\nORDER BY created_at DESC LIMIT 2\n```\n\n**Plan 45 Context Query:**\n\n```bash\n# Get Plan 45 architectural decisions and WhatsFresh page development context\ncurl -X POST http://localhost:3001/api/execEventType \\\n  -H \"Content-Type: application/json\" \\\n  -d ''{\"eventSQLId\": \"sessionPlan45\"}''\n```\n\n**Note:** If session work relates to WhatsFresh app building, template architecture, or page development, reference Plan 45 in the summary and set `plan_id: 45` in plan_communications.\n````\n\n**Session Handoff:**\n\n- [ ] **For Claude:** [Architecture/analysis tasks]\n- [ ] **For Kiro:** [Implementation tasks]\n\n---\n\n## ✅ Major Accomplishments\n\n### 1. [Category]\n\n- Specific achievements with file paths/function names\n\n---\n\n## 📊 Statistics\n\n- Files created/modified: X\n- Functions added: Y\n- Bugs fixed: Z\n\n---\n\n## 🚀 Next Steps\n\n### See Plan: (id of Plan just created)\n\n1. [Next step Plan should be created before the Summary.  Refer to the Plans.id]\n\n\n## 💡 Key Learnings\n\n### [Concept/Pattern]\n\n- What was learned and why it matters\n\n---\n\n**Status:** [Current state and readiness]\n\n````\n\n## Implementation\n\n### For Both Claude and Kiro:\n1. Generate summary markdown following template above\n2. Execute curl command to create the Next Steps plan in plans table (Step 1)\n3. Capture the returned plan_id from Step 1\n4. Execute curl command to store summary in plan_communications table with plan_id (Step 2)\n5. Execute curl command to log file impacts\n6. Confirm storage and show record IDs\n\n## Step 1: Create Next Steps Plan in Database\n\n```bash\ncurl -X POST http://localhost:3001/api/execDML \\\n  -H \"Content-Type: application/json\" \\\n  -d ''{\n    \"method\": \"INSERT\",\n    \"table\": \"api_wf.plans\",\n    \"data\": {\n      \"name\": \"Session Next Steps - [Brief Topic]\",\n      \"status\": \"pending\",\n      \"priority\": \"medium\",\n      \"description\": \"# Next Steps\\n\\n## Immediate (Priority: high)\\n- Step 1\\n- Step 2\\n\\n## Short Term (Priority: medium)\\n- Step 3\\n\\n## Future (Priority: low)\\n- Step 4\",\n      \"comments\": \"\",\n      \"assigned_to\": \"\",\n      \"created_by\": \"claude\"\n    }\n  }''\n```\n\n**Capture the returned `id` from this response to use as `plan_id` in Step 2.**\n\n## Step 2: Store Summary in Database\n\n```bash\ncurl -X POST http://localhost:3001/api/execDML \\\n  -H \"Content-Type: application/json\" \\\n  -d ''{\n    \"method\": \"INSERT\",\n    \"table\": \"api_wf.plan_communications\",\n    \"data\": {\n      \"plan_id\": [ID_FROM_STEP_1],\n      \"from_agent\": \"claude\",\n      \"to_agent\": \"any\",\n      \"type\": \"summary\",\n      \"subject\": \"Brief session topic here\",\n      \"message\": \"# Full markdown summary here\\n\\nUse \\\\n for newlines in JSON string\",\n      \"created_by\": \"claude\"\n    }\n  }''\n```\n\n**Notes:**\n- Replace `from_agent` with \"kiro\" if Kiro is creating the summary\n- DO NOT include `created_by` - it is auto-injected from userID by execDML\n- Use `plan_id: 0` for general summaries not tied to a specific plan\n- Reference the plan_id from Step 1 in the summary''s Next Steps section\n\n## Optional: Update Module Dependencies (when applicable)\n\nRun these commands if you created/deleted files or changed imports/exports:\n\n```bash\n# Generate dependency graph\nnpx madge . --json --webpack-config jsconfig.json > analysis-n-document/genDocs/output/monorepo/raw-madge.json\n\n# Enhance with metadata\nnode analysis-n-document/genDocs/enhance-madge.js\n\n# Create load files\nnode analysis-n-document/genDocs/create-load-files.js\n\n# Populate database\nnpm run analyze:populate-db\n```\n\n**When to run:**\n- Created or deleted files\n- Modified imports/exports significantly\n- Added/removed npm packages\n- Refactored module structure\n\n**When to skip:**\n- Only modified config/documentation\n- Changes didn''t affect module dependencies\n- Pure bug fixes without structural changes\n\n## Logging File Impacts\n\nAfter completing work, log all file changes to `plan_impacts`:\n\n```bash\n# Template for multiple file modified/created/removed\ncurl -X POST http://localhost:3001/api/logImpact \\\n  -H \"Content-Type: application/json\" \\\n  -d ''{\n    \"impacts\": [\n      {\n        \"filePath\": \"file_path.js\",\n        \"changeType\": \"MODIFY\",\n        \"description\": \"Brief summary of modifications\\n- Specific change 1\\n- Specific change 2\\n- Specific change 3\",\n        \"affectedApps\": [\"appName\"],\n        \"createdBy\": \"AI agent\"\n      },\n      {\n        \"filePath\": \"file_path.js\",\n        \"changeType\": \"CREATE\",\n        \"description\": \"Created new module\\n- Purpose and functionality\\n- Key features added\",\n        \"affectedApps\": [\"appName\"],\n        \"createdBy\": \"AI agent\"\n      },\n\t  {\n        \"filePath\": \"file_path.js\",\n        \"changeType\": \"DELETE\",\n        \"description\": \"Removed obsolete module - reason for deletion\",\n        \"affectedApps\": [\"appName\"],\n        \"createdBy\": \"AI agent\"\n      }\n    ],\n    \"planId\": 0\n  }''\n```\n\n**Important:**\n- DO NOT include `batch_id` - it''s a generated column\n- Valid `changeType`: CREATE, MODIFY, DELETE, ANALYZE, DISCOVER\n- Use `planId: 0` for adhoc operations\n- Field names are camelCase: `filePath`, `changeType`, `affectedApps`, `createdBy`, `planId`\n- **Description formatting**: Use markdown with newlines and bullets for multi-part changes (improves readability in views/queries)\n  - For complex changes: `\"Brief summary\\n- Point 1\\n- Point 2\"`\n  - For simple changes: Single line without bullets is fine\n\n## Benefits\n\n- **Persistent History**: All AI sessions stored and searchable\n- **Seamless Handoffs**: Next AI can query recent summaries\n- **No Manual Work**: Eliminates document creation overhead\n- **Coordination**: Prevents duplicate work between AIs\n- **Context Continuity**: Maintains session context across AI switches\n\n````\n\nThis creates a unified AI coordination system where both Claude and Kiro contribute to a shared knowledge base.\n', NOW(), 'Paul')","timestamp":"2025-10-29 13:05:47"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 13:05:47"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 13:05:47"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":161.049959,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 13:05:47"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:05:47"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_communications","timestamp":"2025-10-29 13:05:47"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 13:05:47"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (247ms)","timestamp":"2025-10-29 13:05:47"}
{"body":{"data":{"from_agent":"system","message":"---\ndescription: \"To get caught up with recent Accomplishments and Next Step at Session Start.\"\nallowed-tools: []\n---\n\n# Fetch Recent Summaries  (Shared Claude/Kiro)\n\nFetch the recent summaries and module impacts from AI sessions.\n\n## Instructions\n\nRun curl commands to fetch recent session context:\n\n```bash\n# Get last 2 AI summaries\ncurl -X POST http://localhost:3001/api/execEventType \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"eventSQLId\": \"sessionRecentList\"}'\n\n# Get recent plan impacts (last 30 impacts over last 7 days)\ncurl -X POST http://localhost:3001/api/execEventType \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"eventSQLId\": \"recentImpactList\"}'\n\n# Get Plan 45 architectural decisions and WhatsFresh page development context\ncurl -X POST http://localhost:3001/api/execEventType \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"eventSQLId\": \"sessionPlan45\"}'\n```\n\n## Context Notes\n\n**Plan 45** is the living architecture document for WhatsFresh development:\n- Architecture decisions (form layouts, navigation patterns, {pageName} template cloning)\n- Design patterns and component templates\n- Appsmith prototypes and UI mockups (AI/reference/ui-mockups/whatsfresh/)\n- Studio updates for page generation workflows\n- Data model updates and schema changes\n\nAll WhatsFresh page development work either:\n1. Tracks impacts directly to Plan 45 (architectural changes)\n2. Creates separate plans but cross-references Plan 45 via plan_communications\n\nThis creates a unified AI coordination system where both Claude and Kiro contribute to a shared knowledge base.\n","plan_id":0,"subject":"AI-startSession","to_agent":"any","type":"instructions","userID":"Paul"},"method":"INSERT","table":"api_wf.plan_communications"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 13:05:56"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 13:05:56"}
{"data":{"from_agent":"system","message":"---\ndescription: \"To get caught up with recent Accomplishments and Next Step at Session Start.\"\nallowed-tools: []\n---\n\n# Fetch Recent Summaries  (Shared Claude/Kiro)\n\nFetch the recent summaries and module impacts from AI sessions.\n\n## Instructions\n\nRun curl commands to fetch recent session context:\n\n```bash\n# Get last 2 AI summaries\ncurl -X POST http://localhost:3001/api/execEventType \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"eventSQLId\": \"sessionRecentList\"}'\n\n# Get recent plan impacts (last 30 impacts over last 7 days)\ncurl -X POST http://localhost:3001/api/execEventType \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"eventSQLId\": \"recentImpactList\"}'\n\n# Get Plan 45 architectural decisions and WhatsFresh page development context\ncurl -X POST http://localhost:3001/api/execEventType \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"eventSQLId\": \"sessionPlan45\"}'\n```\n\n## Context Notes\n\n**Plan 45** is the living architecture document for WhatsFresh development:\n- Architecture decisions (form layouts, navigation patterns, {pageName} template cloning)\n- Design patterns and component templates\n- Appsmith prototypes and UI mockups (AI/reference/ui-mockups/whatsfresh/)\n- Studio updates for page generation workflows\n- Data model updates and schema changes\n\nAll WhatsFresh page development work either:\n1. Tracks impacts directly to Plan 45 (architectural changes)\n2. Creates separate plans but cross-references Plan 45 via plan_communications\n\nThis creates a unified AI coordination system where both Claude and Kiro contribute to a shared knowledge base.\n","plan_id":0,"subject":"AI-startSession","to_agent":"any","type":"instructions","userID":"Paul"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.plan_communications","timestamp":"2025-10-29 13:05:56"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:05:56"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:05:56"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:05:56"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":85.436582,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:05:56"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:05:56"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:05:56"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:05:56"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:05:56"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":47.324852,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:05:56"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:05:56"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.plan_communications (plan_id, from_agent, to_agent, type, subject, message, created_at, created_by) VALUES (0, 'system', 'any', 'instructions', 'AI-startSession', '---\ndescription: \"To get caught up with recent Accomplishments and Next Step at Session Start.\"\nallowed-tools: []\n---\n\n# Fetch Recent Summaries  (Shared Claude/Kiro)\n\nFetch the recent summaries and module impacts from AI sessions.\n\n## Instructions\n\nRun curl commands to fetch recent session context:\n\n```bash\n# Get last 2 AI summaries\ncurl -X POST http://localhost:3001/api/execEventType \\\n  -H \"Content-Type: application/json\" \\\n  -d ''{\"eventSQLId\": \"sessionRecentList\"}''\n\n# Get recent plan impacts (last 30 impacts over last 7 days)\ncurl -X POST http://localhost:3001/api/execEventType \\\n  -H \"Content-Type: application/json\" \\\n  -d ''{\"eventSQLId\": \"recentImpactList\"}''\n\n# Get Plan 45 architectural decisions and WhatsFresh page development context\ncurl -X POST http://localhost:3001/api/execEventType \\\n  -H \"Content-Type: application/json\" \\\n  -d ''{\"eventSQLId\": \"sessionPlan45\"}''\n```\n\n## Context Notes\n\n**Plan 45** is the living architecture document for WhatsFresh development:\n- Architecture decisions (form layouts, navigation patterns, {pageName} template cloning)\n- Design patterns and component templates\n- Appsmith prototypes and UI mockups (AI/reference/ui-mockups/whatsfresh/)\n- Studio updates for page generation workflows\n- Data model updates and schema changes\n\nAll WhatsFresh page development work either:\n1. Tracks impacts directly to Plan 45 (architectural changes)\n2. Creates separate plans but cross-references Plan 45 via plan_communications\n\nThis creates a unified AI coordination system where both Claude and Kiro contribute to a shared knowledge base.\n', NOW(), 'Paul')","timestamp":"2025-10-29 13:05:56"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 13:05:56"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 13:05:56"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":261.50294,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 13:05:57"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:05:57"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.plan_communications","timestamp":"2025-10-29 13:05:57"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 13:05:57"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (396ms)","timestamp":"2025-10-29 13:05:57"}
{"body":{"data":{"description":"Fetch AI session summary instructions from database","qryName":"AI-summary","qrySQL":"SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = 'instructions' \n  AND subject = 'AI-summary'\n  AND active = 1\nORDER BY created_at DESC\nLIMIT 1","userID":"Paul"},"method":"INSERT","table":"api_wf.eventSQL"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 13:06:13"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 13:06:13"}
{"data":{"description":"Fetch AI session summary instructions from database","qryName":"AI-summary","qrySQL":"SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = 'instructions' \n  AND subject = 'AI-summary'\n  AND active = 1\nORDER BY created_at DESC\nLIMIT 1","userID":"Paul"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.eventSQL","timestamp":"2025-10-29 13:06:13"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:06:13"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:06:13"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:06:13"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":43.987047,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:06:13"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:06:13"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:06:13"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:06:13"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:06:13"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":42.812274,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:06:13"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:06:13"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.eventSQL (qryName, qrySQL, description, created_at, created_by) VALUES ('AI-summary', 'SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = ''instructions'' \n  AND subject = ''AI-summary''\n  AND active = 1\nORDER BY created_at DESC\nLIMIT 1', 'Fetch AI session summary instructions from database', NOW(), 'Paul')","timestamp":"2025-10-29 13:06:13"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 13:06:13"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 13:06:13"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":446.918574,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 13:06:14"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:06:14"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.eventSQL","timestamp":"2025-10-29 13:06:14"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 13:06:14"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (536ms)","timestamp":"2025-10-29 13:06:14"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":536.038628,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-29 13:06:14"}
{"body":{"data":{"description":"Fetch AI session startup instructions from database","qryName":"AI-startSession","qrySQL":"SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = 'instructions' \n  AND subject = 'AI-startSession'\n  AND active = 1\nORDER BY created_at DESC\nLIMIT 1","userID":"Paul"},"method":"INSERT","table":"api_wf.eventSQL"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 13:06:14"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 13:06:14"}
{"data":{"description":"Fetch AI session startup instructions from database","qryName":"AI-startSession","qrySQL":"SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = 'instructions' \n  AND subject = 'AI-startSession'\n  AND active = 1\nORDER BY created_at DESC\nLIMIT 1","userID":"Paul"},"level":"debug","message":"[dmlProcessor.js] Processing INSERT on api_wf.eventSQL","timestamp":"2025-10-29 13:06:14"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:06:14"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:06:14"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:06:14"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":48.530244,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:06:14"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:06:14"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:06:14"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:06:14"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:06:14"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":148.790978,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:06:14"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:06:14"}
{"level":"info","message":"[dmlProcessor.js] Executing INSERT SQL:","sql":"INSERT INTO api_wf.eventSQL (qryName, qrySQL, description, created_at, created_by) VALUES ('AI-startSession', 'SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = ''instructions'' \n  AND subject = ''AI-startSession''\n  AND active = 1\nORDER BY created_at DESC\nLIMIT 1', 'Fetch AI session startup instructions from database', NOW(), 'Paul')","timestamp":"2025-10-29 13:06:14"}
{"level":"debug","message":"[dbUtils.js] Executing POST query: ********","timestamp":"2025-10-29 13:06:14"}
{"level":"debug","message":"[dbUtils.js] Handling POST-specific logic","timestamp":"2025-10-29 13:06:14"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":408.34995,"method":"POST","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 13:06:14"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:06:14"}
{"level":"info","message":"[dmlProcessor.js] INSERT executed successfully on api_wf.eventSQL","timestamp":"2025-10-29 13:06:14"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 13:06:14"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (608ms)","timestamp":"2025-10-29 13:06:14"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":607.602248,"method":"POST","operation":"http_request","path":"/api/execDML","status":200},"timestamp":"2025-10-29 13:06:14"}
{"body":{"eventSQLId":"AI-summary"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 13:06:40"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 13:06:40"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: AI-summary","timestamp":"2025-10-29 13:06:40"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:06:40"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:06:40"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:06:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":281.403247,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:06:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:06:41"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: AI-summary (ID: 38)","timestamp":"2025-10-29 13:06:41"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = 'instructions' \n  AND subject = 'AI-summary'\n  AND active = 1\nORDER BY created_at DESC\nLIMIT 1","timestamp":"2025-10-29 13:06:41"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:06:41"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:06:41"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":52.107684,"errorCode":"ER_BAD_FIELD_ERROR","errorType":"Error","method":"GET","operation":"database_query","success":false},"timestamp":"2025-10-29 13:06:41"}
{"code":"ER_BAD_FIELD_ERROR","errno":1054,"level":"error","message":"Unknown column 'active' in 'where clause'","sql":"SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = 'instructions' \n  AND subject = 'AI-summary'\n  AND active = 1\nORDER BY created_at DESC\nLIMIT 1","sqlMessage":"Unknown column 'active' in 'where clause'","sqlState":"42S22","stack":"Error: Unknown column 'active' in 'where clause'\n    at PromisePoolConnection.execute (/home/paul/wf-monorepo-new/node_modules/mysql2/promise.js:111:22)\n    at executeQuery (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dbUtils.js:61:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async execEventType (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execEventType.js:118:20)","timestamp":"2025-10-29 13:06:41"}
{"level":"error","message":"[dbUtils.js] Query: ********","timestamp":"2025-10-29 13:06:41"}
{"level":"error","message":"[dbUtils.js] Stack trace: Error\n    at executeQuery (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dbUtils.js:92:50)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async execEventType (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execEventType.js:118:20)","timestamp":"2025-10-29 13:06:41"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:06:41"}
{"code":"ER_BAD_FIELD_ERROR","errno":1054,"level":"error","message":"Unknown column 'active' in 'where clause'","sql":"SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = 'instructions' \n  AND subject = 'AI-summary'\n  AND active = 1\nORDER BY created_at DESC\nLIMIT 1","sqlMessage":"Unknown column 'active' in 'where clause'","sqlState":"42S22","stack":"Error: Unknown column 'active' in 'where clause'\n    at PromisePoolConnection.execute (/home/paul/wf-monorepo-new/node_modules/mysql2/promise.js:111:22)\n    at executeQuery (file:///home/paul/wf-monorepo-new/apps/server/server/utils/dbUtils.js:61:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async execEventType (file:///home/paul/wf-monorepo-new/apps/server/server/controller/execEventType.js:118:20)","timestamp":"2025-10-29 13:06:41"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 500 (337ms)","timestamp":"2025-10-29 13:06:41"}
{"level":"info","message":"Performance measurement for http_request","performance":{"duration":336.819078,"method":"POST","operation":"http_request","path":"/api/execEventType","status":500},"timestamp":"2025-10-29 13:06:41"}
{"body":{"data":{"id":38,"qrySQL":"SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = 'instructions' \n  AND subject = 'AI-summary'\n  AND deleted_at IS NULL\nORDER BY created_at DESC\nLIMIT 1","userID":"Paul"},"method":"UPDATE","primaryKey":"id","table":"api_wf.eventSQL"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 13:06:53"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 13:06:53"}
{"data":{"id":38,"qrySQL":"SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = 'instructions' \n  AND subject = 'AI-summary'\n  AND deleted_at IS NULL\nORDER BY created_at DESC\nLIMIT 1","userID":"Paul"},"level":"debug","message":"[dmlProcessor.js] Processing UPDATE on api_wf.eventSQL","primaryKey":"id","timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.056807,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.435993,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"[dmlProcessor.js] Executing UPDATE SQL:","sql":"UPDATE api_wf.eventSQL SET qrySQL = 'SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = ''instructions'' \n  AND subject = ''AI-summary''\n  AND deleted_at IS NULL\nORDER BY created_at DESC\nLIMIT 1', updated_at = NOW(), updated_by = 'Paul' WHERE id = 38","timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Executing PATCH query: ********","timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Handling PATCH-specific logic","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":142.246,"method":"PATCH","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"[dmlProcessor.js] UPDATE executed successfully on api_wf.eventSQL","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (213ms)","timestamp":"2025-10-29 13:06:53"}
{"body":{"data":{"id":39,"qrySQL":"SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = 'instructions' \n  AND subject = 'AI-startSession'\n  AND deleted_at IS NULL\nORDER BY created_at DESC\nLIMIT 1","userID":"Paul"},"method":"UPDATE","primaryKey":"id","table":"api_wf.eventSQL"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 13:06:53"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 13:06:53"}
{"data":{"id":39,"qrySQL":"SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = 'instructions' \n  AND subject = 'AI-startSession'\n  AND deleted_at IS NULL\nORDER BY created_at DESC\nLIMIT 1","userID":"Paul"},"level":"debug","message":"[dmlProcessor.js] Processing UPDATE on api_wf.eventSQL","primaryKey":"id","timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.232065,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":34.577169,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"[dmlProcessor.js] Executing UPDATE SQL:","sql":"UPDATE api_wf.eventSQL SET qrySQL = 'SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = ''instructions'' \n  AND subject = ''AI-startSession''\n  AND deleted_at IS NULL\nORDER BY created_at DESC\nLIMIT 1', updated_at = NOW(), updated_by = 'Paul' WHERE id = 39","timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Executing PATCH query: ********","timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Handling PATCH-specific logic","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":159.304565,"method":"PATCH","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 13:06:53"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"[dmlProcessor.js] UPDATE executed successfully on api_wf.eventSQL","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 13:06:53"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (231ms)","timestamp":"2025-10-29 13:06:53"}
{"body":{"eventSQLId":"AI-summary"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execEventType","timestamp":"2025-10-29 13:07:03"}
{"level":"http","message":"[execEventType.js] POST /api/execEventType","timestamp":"2025-10-29 13:07:03"}
{"level":"debug","message":"[execEventType.js] Fetching eventSQL by qryName: AI-summary","timestamp":"2025-10-29 13:07:03"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:07:03"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:07:03"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:07:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":123.86109,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:07:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:07:03"}
{"level":"debug","message":"[execEventType.js] Found eventSQL: AI-summary (ID: 38)","timestamp":"2025-10-29 13:07:03"}
{"level":"debug","message":"[execEventType.js] Executing SQL: SELECT \n  message as instructions,\n  updated_at as last_updated\nFROM api_wf.plan_communications\nWHERE type = 'instructions' \n  AND subject = 'AI-summary'\n  AND deleted_at IS NULL\nORDER BY created_at DESC\nLIMIT 1","timestamp":"2025-10-29 13:07:03"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 13:07:03"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 13:07:03"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 13:07:03"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":146.270769,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 13:07:03"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 13:07:03"}
{"level":"info","message":"[execEventType.js] EventSQL executed successfully: AI-summary (ID: 38)","timestamp":"2025-10-29 13:07:03"}
{"level":"info","message":"[app.js]  Response: POST /api/execEventType 200 (272ms)","timestamp":"2025-10-29 13:07:03"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-29 13:11:54"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-29 14:11:54"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-29 15:11:55"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-29 16:26:54"}
{"body":{"data":{"grp":"AI-instructions","id":38,"userID":"Paul"},"method":"UPDATE","primaryKey":"id","table":"api_wf.eventSQL"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 16:30:27"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 16:30:27"}
{"data":{"grp":"AI-instructions","id":38,"userID":"Paul"},"level":"debug","message":"[dmlProcessor.js] Processing UPDATE on api_wf.eventSQL","primaryKey":"id","timestamp":"2025-10-29 16:30:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 16:30:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 16:30:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 16:30:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":33.038633,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 16:30:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 16:30:27"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 16:30:27"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 16:30:27"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 16:30:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":32.801876,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 16:30:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 16:30:27"}
{"level":"info","message":"[dmlProcessor.js] Executing UPDATE SQL:","sql":"UPDATE api_wf.eventSQL SET grp = 'AI-instructions', updated_at = NOW(), updated_by = 'Paul' WHERE id = 38","timestamp":"2025-10-29 16:30:27"}
{"level":"debug","message":"[dbUtils.js] Executing PATCH query: ********","timestamp":"2025-10-29 16:30:27"}
{"level":"debug","message":"[dbUtils.js] Handling PATCH-specific logic","timestamp":"2025-10-29 16:30:27"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":172.032492,"method":"PATCH","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 16:30:27"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 16:30:27"}
{"level":"info","message":"[dmlProcessor.js] UPDATE executed successfully on api_wf.eventSQL","timestamp":"2025-10-29 16:30:27"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 16:30:27"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (240ms)","timestamp":"2025-10-29 16:30:27"}
{"body":{"data":{"grp":"AI-instructions","id":39,"userID":"Paul"},"method":"UPDATE","primaryKey":"id","table":"api_wf.eventSQL"},"contentType":"application/json","level":"http","message":"[app.js]  Request","method":"POST","path":"/api/execDML","timestamp":"2025-10-29 16:30:32"}
{"level":"http","message":"[execDML.js] POST /api/execDML","timestamp":"2025-10-29 16:30:32"}
{"data":{"grp":"AI-instructions","id":39,"userID":"Paul"},"level":"debug","message":"[dmlProcessor.js] Processing UPDATE on api_wf.eventSQL","primaryKey":"id","timestamp":"2025-10-29 16:30:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 16:30:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 16:30:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 16:30:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":36.848017,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 16:30:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 16:30:32"}
{"level":"debug","message":"[dbUtils.js] Executing GET query: ********","timestamp":"2025-10-29 16:30:32"}
{"level":"debug","message":"[dbUtils.js] Handling GET-specific logic","timestamp":"2025-10-29 16:30:32"}
{"level":"info","message":"[dbUtils.js] Query executed, rows fetched: 1","timestamp":"2025-10-29 16:30:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":35.037019,"method":"GET","operation":"database_query","rowCount":1,"success":true},"timestamp":"2025-10-29 16:30:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 16:30:32"}
{"level":"info","message":"[dmlProcessor.js] Executing UPDATE SQL:","sql":"UPDATE api_wf.eventSQL SET grp = 'AI-instructions', updated_at = NOW(), updated_by = 'Paul' WHERE id = 39","timestamp":"2025-10-29 16:30:32"}
{"level":"debug","message":"[dbUtils.js] Executing PATCH query: ********","timestamp":"2025-10-29 16:30:32"}
{"level":"debug","message":"[dbUtils.js] Handling PATCH-specific logic","timestamp":"2025-10-29 16:30:32"}
{"level":"info","message":"Performance measurement for database_query","performance":{"duration":163.007686,"method":"PATCH","operation":"database_query","rowCount":2,"success":true},"timestamp":"2025-10-29 16:30:32"}
{"level":"debug","message":"[dbUtils.js] Connection released","timestamp":"2025-10-29 16:30:32"}
{"level":"info","message":"[dmlProcessor.js] UPDATE executed successfully on api_wf.eventSQL","timestamp":"2025-10-29 16:30:32"}
{"level":"info","message":"[execDML.js] DML operation completed successfully","timestamp":"2025-10-29 16:30:32"}
{"level":"info","message":"[app.js]  Response: POST /api/execDML 200 (237ms)","timestamp":"2025-10-29 16:30:32"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-29 17:26:54"}
{"level":"debug","message":"[dbManager.js] Database connected: health check passed","timestamp":"2025-10-29 18:26:54"}
