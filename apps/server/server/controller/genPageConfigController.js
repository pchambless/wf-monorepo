/**
 * Controller for writing pageConfig to production
 * Receives pre-built pageConfig from Studio and writes to app folder
 */

import { promises as fs } from 'fs';
import path from 'path';
import stringify from 'json-stringify-pretty-compact';
import logger from '../utils/logger.js';

const codeName = '[genPageConfigController.js]';
const PRODUCTION_APPS_PATH = '/home/paul/wf-monorepo-new/apps';

const genPageConfigController = async (req, res) => {
  logger.http(`${codeName} ${req.method} ${req.originalUrl}`);

  const { pageConfig, appName, pageName, pageID } = req.body;

  if (!pageConfig) {
    return res.status(400).json({
      success: false,
      error: 'MISSING_PAGE_CONFIG',
      message: 'pageConfig is required'
    });
  }

  if (!appName || !pageName) {
    return res.status(400).json({
      success: false,
      error: 'MISSING_APP_OR_PAGE_NAME',
      message: 'appName and pageName are required'
    });
  }

  try {
    logger.debug(`${codeName} Writing pageConfig for ${appName}/${pageName}`);

    const productionDir = path.join(PRODUCTION_APPS_PATH, appName, 'src', 'pages', pageName);

    const productionPaths = {
      pageConfig: path.join(productionDir, 'pageConfig.json'),
      index: path.join(productionDir, 'index.jsx')
    };

    await fs.mkdir(productionDir, { recursive: true });

    const formattedJson = stringify(pageConfig, { maxLength: 100, indent: 2 });
    await fs.writeFile(productionPaths.pageConfig, formattedJson);
    logger.debug(`${codeName} Saved pageConfig.json to ${productionPaths.pageConfig}`);

    const componentName = pageName
      .split('-')
      .map(part => part.charAt(0).toUpperCase() + part.slice(1))
      .join('');

    const indexTemplate = `import React from "react";
import DirectRenderer from "../../rendering/DirectRenderer";
import pageConfig from "./pageConfig.json";

/**
 * ${componentName} - Database-generated page
 * Generated by Studio pageConfig builder
 */
const ${componentName} = () => {
  return <DirectRenderer config={pageConfig} />;
};

export default ${componentName};
`;

    await fs.writeFile(productionPaths.index, indexTemplate);
    logger.debug(`${codeName} Saved index.jsx to ${productionPaths.index}`);

    logger.info(`${codeName} PageConfig written successfully for ${appName}/${pageName}`);

    res.json({
      success: true,
      meta: {
        pageID,
        appName,
        pageName,
        productionDir,
        componentsCount: pageConfig.components?.length || 0,
        generatedAt: new Date().toISOString(),
        files: {
          pageConfig: productionPaths.pageConfig,
          index: productionPaths.index
        }
      }
    });

  } catch (error) {
    logger.error(`${codeName} Error writing pageConfig for ${appName}/${pageName}:`, error);

    res.status(500).json({
      success: false,
      error: 'WRITE_FAILED',
      message: error.message,
      appName,
      pageName
    });
  }
};

export default genPageConfigController;